{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      cards: [{\n        title: \"Question 1\",\n        description: \"Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.\",\n        content: `<p>Content for Card 1</p>\n            <div class=\"row justify-content-center\">\n              <div class=\"col-md-8\">\n                <div class=\"button-container\">\n                  <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                  <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"map-container\">\n              <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n                <g class=\"apartments\"></g>\n                <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n                <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n              </svg>\n            </div>\n            `\n      }, {\n        title: \"Card 2\",\n        description: \"Description 2\",\n        content: \"<p>Content for Card 2</p>\"\n      }, {\n        title: \"Card 3\",\n        description: \"Description 3\",\n        content: \"<p>Content for Card 3</p>\"\n      }, {\n        title: \"Card 4\",\n        description: \"Description 4\",\n        content: \"<p>Content for Card 4</p>\"\n      }],\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      return getSingleEndpoint({}, \"Apartments\");\n    }).then(response => {\n      this.apartments = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          numberOfRooms: d.numberOfRooms,\n          apartmentId: d.apartmentId,\n          buildingId: d.buildingId,\n          rentalCost: d.rentalCost,\n          maxOccupancy: d.maxOccupancy\n        }\n      }));\n      return getSingleEndpoint({}, \"Pubs\");\n    }).then(response => {\n      this.pubs = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          pubId: d.pubId,\n          hourlyCost: d.hourlyCost,\n          maxOccupancy: d.maxOccupancy,\n          buildingId: d.buildingId\n        }\n      }));\n      return getSingleEndpoint({}, \"Restaurants\");\n    }).then(response => {\n      this.restaurants = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          restaurantId: d.restaurantId,\n          maxOccupancy: d.maxOccupancy,\n          foodCost: d.foodCost,\n          buildingId: d.buildingId\n        }\n      }));\n      this.drawBuildings();\n      this.drawApt();\n      this.drawPub();\n      this.drawRestaurants();\n    }).catch(error => {\n      console.error(\"Error retrieving data:\", error);\n    });\n  },\n  methods: {\n    toggleCollapse(card) {\n      card.isCollapsed = !card.isCollapsed;\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select(\"g.buildings\").datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","name","components","data","cards","title","description","content","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","pubId","hourlyCost","restaurantId","foodCost","drawBuildings","drawApt","drawPub","drawRestaurants","catch","error","console","methods","toggleCollapse","card","isCollapsed","select","$refs","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","toggleRestaurants"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<template>\n  <div id=\"vc2\" class=\"vc2-container\">\n    <div class=\"container\">\n      <h1>Challenge 2: Patterns of Life</h1>\n      <p>\n        Considers the patterns of daily life throughout the city.\n        You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n      </p>\n      <div>\n        <b-card v-for=\"(card, index) in cards\" :key=\"index\" class=\"minimal-card\" no-body>\n          <div\n            class=\"card-header\"\n            :class=\"{ open: !card.isCollapsed, closed: card.isCollapsed }\"\n            @click=\"toggleCollapse(card)\"\n          >\n            <h5 class=\"card-title\">{{ card.title }}</h5>\n            <p class=\"card-description\">{{ card.description }}</p>\n          </div>\n          <b-collapse v-model=\"card.isCollapsed\">\n            <div class=\"card-content\">\n              <div v-html=\"card.content\"></div>\n            </div>\n          </b-collapse>\n        </b-card>\n      </div>\n    </div>\n     <!-- <div class=\"row justify-content-center\">\n               <div class=\"col-md-8\">\n                 <div class=\"button-container\">\n                   <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                   <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n                 </div>\n               </div>\n             </div>\n            <div class=\"map-container\">\n               <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                 <g class=\"buildings\"></g>\n                 <g class=\"legend\"></g>\n                 <g class=\"apartments\"></g>\n                 <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n                 <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n               </svg>\n             </div> -->\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      cards: [\n        {\n          title: \"Question 1\",\n          description: \"Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.\",\n          content: `<p>Content for Card 1</p>\n            <div class=\"row justify-content-center\">\n              <div class=\"col-md-8\">\n                <div class=\"button-container\">\n                  <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                  <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"map-container\">\n              <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n                <g class=\"apartments\"></g>\n                <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n                <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n              </svg>\n            </div>\n            `,\n        },\n        {\n          title: \"Card 2\",\n          description: \"Description 2\",\n          content: \"<p>Content for Card 2</p>\",\n        },\n        {\n          title: \"Card 3\",\n          description: \"Description 3\",\n          content: \"<p>Content for Card 3</p>\",\n        },\n        {\n          title: \"Card 4\",\n          description: \"Description 4\",\n          content: \"<p>Content for Card 4</p>\",\n        },\n      ],\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n    };\n  },\n  mounted() {\n  // DRAW THE MAP\n  getSingleEndpoint({}, \"Buildings\")\n    .then((response) => {\n      this.buildings = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      return getSingleEndpoint({}, \"Apartments\");\n    })\n    .then((response) => {\n      this.apartments = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          numberOfRooms: d.numberOfRooms,\n          apartmentId: d.apartmentId,\n          buildingId: d.buildingId,\n          rentalCost: d.rentalCost,\n          maxOccupancy: d.maxOccupancy,\n        },\n      }));\n      return getSingleEndpoint({}, \"Pubs\");\n    })\n    .then((response) => {\n      this.pubs = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          pubId: d.pubId,\n          hourlyCost: d.hourlyCost,\n          maxOccupancy: d.maxOccupancy,\n          buildingId: d.buildingId,\n        },\n      }));\n      return getSingleEndpoint({}, \"Restaurants\");\n    })\n    .then((response) => {\n      this.restaurants = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          restaurantId: d.restaurantId,\n          maxOccupancy: d.maxOccupancy,\n          foodCost: d.foodCost,\n          buildingId: d.buildingId,\n        },\n      }));\n      this.drawBuildings();\n      this.drawApt();\n      this.drawPub();\n      this.drawRestaurants();\n    })\n    .catch((error) => {\n      console.error(\"Error retrieving data:\", error);\n    });\n},\n\n  methods: {\n    toggleCollapse(card) {\n        card.isCollapsed = !card.isCollapsed;\n      },\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n  },\n};\n</script>\n\n<style>\n#vc2 {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  color: white;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .pubsButton {\n  background-color: #0700c5; \n}\n\n.button-container .restButton {\n  background-color: #ff06fa; \n}\n\n.button-container button:not(.active) {\n  opacity: 0.5;\n}\n.minimal-card {\n    margin-bottom: 1rem;\n  }\n  \n  .card-header {\n    color: black;\n    cursor: pointer;\n    padding: 1rem;\n    transition: background-color 0.3s ease-in-out;\n  }\n  \n  .card-header.open {\n    background-color: coral;\n  }\n  \n  .card-header.closed {\n    background-color: #007bff;\n  }\n  \n  .card-title {\n    font-weight: bold;\n  }\n  \n  .card-description {\n    font-size: 14px;\n  }\n  \n  .card-content {\n    padding: 1rem;\n    background-color: white;\n  }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}