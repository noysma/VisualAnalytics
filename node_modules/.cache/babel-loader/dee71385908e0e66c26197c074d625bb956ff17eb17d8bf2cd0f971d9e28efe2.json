{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nimport * as d3 from 'd3';\nimport { BuildingMap, BuildingTypeLegend } from \"@/assets/BuildingMap\";\nimport wkx from 'wkx';\nimport Buffer from 'buffer';\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      selectedBuildingType: null,\n      buildingTypes: ['residential', 'commercial', 'industrial'] // aggiungi i tipi di edifici disponibili```\n    };\n  },\n\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n\n    // Aggiungi un listener sull'evento 'click' sulla mappa per evidenziare gli edifici selezionati\n    d3.select(this.$refs.map).on('click', () => {\n      this.highlightSelectedBuildingType();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n      bl.color(bm.color());\n      d3.select(this.$refs.map).select('g.legend').call(bl);\n    },\n    highlightSelectedBuildingType() {\n      // Rimuovi l'evidenziazione degli edifici selezionati\n      this.removeHighlightedBuildingType();\n\n      // Seleziona gli edifici corrispondenti al tipo selezionato e applica una classe CSS per evidenziarli```\n      if (this.selectedBuildingType) {\n        d3.selectAll(`svg g.buildings path[data-building-type=\"${this.selectedBuildingType}\"]`).classed('highlighted', true);\n      }\n    },\n    removeHighlightedBuildingType() {\n      // Rimuovi la classe CSS di evidenziazione dagli edifici selezionati\n      d3.selectAll(`svg g.buildings path.highlighted`).classed('highlighted', false);\n    }\n  },\n  watch: {\n    // Rimuovi l'evidenziazione degli edifici selezionati quando viene deselezionato un tipo di edificio\n    selectedBuildingType(newVal) {\n      if (!newVal) {\n        this.removeHighlightedBuildingType();\n      }\n    }\n  },\n  mounted() {\n    const style = document.createElement('style');\n    style.type = 'text/css';\n    style.innerHTML = `\n      svg g.buildings path.highlighted {\n        fill-opacity: 0.5;\n        stroke-width: 2;\n        stroke: red;\n      }\n    `;\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","BuildingMap","BuildingTypeLegend","wkx","Buffer","bm","bl","name","components","data","buildings","selectedBuildingType","buildingTypes","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","select","$refs","on","highlightSelectedBuildingType","methods","datum","call","color","removeHighlightedBuildingType","selectAll","classed","watch","newVal","style","document","createElement","innerHTML","getElementsByTagName","appendChild"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <b-container id=\"app\">\n    <b-row>\n      <b-col>\n        <div id=\"map\">\n          <svg width=\"100%\" height=\"700px\" ref=\"map\">\n            <g class=\"buildings\"></g>\n            <g class=\"legend\"></g>\n          </svg>\n        </div>\n        <b-form-select v-model=\"selectedBuildingType\">\n          <option value=\"\">Seleziona un tipo di edificio...</option>\n          <option v-for=\"type in buildingTypes\" :value=\"type\">{{ type }}</option>\n        </b-form-select>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"@/assets/api_connector\";\nimport * as d3 from 'd3';\nimport { BuildingMap, BuildingTypeLegend } from \"@/assets/BuildingMap\";\nimport wkx from 'wkx';\nimport Buffer from 'buffer';\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      selectedBuildingType: null,\n      buildingTypes: ['residential', 'commercial', 'industrial'] // aggiungi i tipi di edifici disponibili```\n    }\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      this.drawBuildings();\n    });\n\n    // Aggiungi un listener sull'evento 'click' sulla mappa per evidenziare gli edifici selezionati\n    d3.select(this.$refs.map)\n      .on('click', () => {\n        this.highlightSelectedBuildingType();\n      });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n\n      bl.color(bm.color());\n\n      d3.select(this.$refs.map).select('g.legend')\n        .call(bl);\n    },\n    highlightSelectedBuildingType() {\n      // Rimuovi l'evidenziazione degli edifici selezionati\n      this.removeHighlightedBuildingType();\n\n      // Seleziona gli edifici corrispondenti al tipo selezionato e applica una classe CSS per evidenziarli```\nif (this.selectedBuildingType) {\n        d3.selectAll(`svg g.buildings path[data-building-type=\"${this.selectedBuildingType}\"]`)\n          .classed('highlighted', true);\n      }\n    },\n    removeHighlightedBuildingType() {\n      // Rimuovi la classe CSS di evidenziazione dagli edifici selezionati\n      d3.selectAll(`svg g.buildings path.highlighted`)\n        .classed('highlighted', false);\n    }\n  },\n  watch: {\n    // Rimuovi l'evidenziazione degli edifici selezionati quando viene deselezionato un tipo di edificio\n    selectedBuildingType(newVal) {\n      if (!newVal) {\n        this.removeHighlightedBuildingType();\n      }\n    }\n  },\n  mounted() {\n    const style = document.createElement('style');\n    style.type = 'text/css';\n    style.innerHTML = `\n      svg g.buildings path.highlighted {\n        fill-opacity: 0.5;\n        stroke-width: 2;\n        stroke: red;\n      }\n    `;\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n</style>"],"mappings":"AAoBA,SAAAA,iBAAA;AACA,YAAAC,EAAA;AACA,SAAAC,WAAA,EAAAC,kBAAA;AACA,OAAAC,GAAA;AACA,OAAAC,MAAA;AAEA,MAAAC,EAAA,OAAAJ,WAAA;AACA,MAAAK,EAAA,OAAAJ,kBAAA;AAEA;EACAK,IAAA;EACAC,UAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,oBAAA;MACAC,aAAA;IACA;EACA;;EACAC,QAAA;IACAd,iBAAA,kBAAAe,IAAA,CAAAC,QAAA;MACA,KAAAL,SAAA,GAAAK,QAAA,CAAAN,IAAA,CAAAO,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAhB,GAAA,CAAAiB,QAAA,CAAAC,KAAA,CAAAjB,MAAA,CAAAA,MAAA,CAAAkB,IAAA,CAAAL,CAAA,CAAAM,QAAA,UAAAC,SAAA;QACAC,UAAA;UACAC,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAC,YAAA,EAAAV,CAAA,CAAAU,YAAA;UACAC,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAC,KAAA,EAAAZ,CAAA,CAAAY;QACA;MACA;MACA,KAAAC,aAAA;IACA;;IAEA;IACA9B,EAAA,CAAA+B,MAAA,MAAAC,KAAA,CAAAhB,GAAA,EACAiB,EAAA;MACA,KAAAC,6BAAA;IACA;EACA;EACAC,OAAA;IACAL,cAAA;MACA9B,EAAA,CAAA+B,MAAA,MAAAC,KAAA,CAAAhB,GAAA,EAAAe,MAAA,gBACAK,KAAA,MAAA1B,SAAA,EACA2B,IAAA,CAAAhC,EAAA;MAEAC,EAAA,CAAAgC,KAAA,CAAAjC,EAAA,CAAAiC,KAAA;MAEAtC,EAAA,CAAA+B,MAAA,MAAAC,KAAA,CAAAhB,GAAA,EAAAe,MAAA,aACAM,IAAA,CAAA/B,EAAA;IACA;IACA4B,8BAAA;MACA;MACA,KAAAK,6BAAA;;MAEA;MACA,SAAA5B,oBAAA;QACAX,EAAA,CAAAwC,SAAA,kDAAA7B,oBAAA,MACA8B,OAAA;MACA;IACA;IACAF,8BAAA;MACA;MACAvC,EAAA,CAAAwC,SAAA,qCACAC,OAAA;IACA;EACA;EACAC,KAAA;IACA;IACA/B,qBAAAgC,MAAA;MACA,KAAAA,MAAA;QACA,KAAAJ,6BAAA;MACA;IACA;EACA;EACA1B,QAAA;IACA,MAAA+B,KAAA,GAAAC,QAAA,CAAAC,aAAA;IACAF,KAAA,CAAA1B,IAAA;IACA0B,KAAA,CAAAG,SAAA;AACA;AACA;AACA;AACA;AACA;AACA;IACAF,QAAA,CAAAG,oBAAA,YAAAC,WAAA,CAAAL,KAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}