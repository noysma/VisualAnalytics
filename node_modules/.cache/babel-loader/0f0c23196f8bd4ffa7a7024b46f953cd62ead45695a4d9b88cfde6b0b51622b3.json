{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nimport VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      travelJournal: []\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 1010\n      }, 'TravelJournal').then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n        const updateChart = () => {\n          const weekStartIndex = this.currentWeekIndex * 7;\n          const weekEndIndex = weekStartIndex + 6;\n          const filteredData = parsedData.slice(weekStartIndex, weekEndIndex + 1);\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = filteredData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30, 30);\n          const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30]).range([height, 0]);\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60);\n            return `${hours}:00`;\n          });\n          chart.select(\".x-axis\").call(xAxis);\n          chart.select(\".y-axis\").call(yAxis);\n          const bars = chart.selectAll(\".bar\").data(totalTravelTimes);\n          bars.enter().append(\"rect\").attr(\"class\", \"bar\").merge(bars).attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n          bars.exit().remove();\n        };\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        svg.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`);\n        svg.append(\"g\").attr(\"class\", \"y-axis\");\n        updateChart();\n      });\n    },\n    updateChart() {\n      this.createChart();\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","VueSlider","components","data","currentWeekIndex","travelJournal","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","updateChart","weekStartIndex","weekEndIndex","filteredData","slice","weekdays","totalTravelTimes","day","dayTravelTimes","filter","getDay","indexOf","totalTravelTime","sum","x","scaleBand","domain","range","padding","yTicks","max","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","Math","floor","call","bars","selectAll","enter","merge","bandwidth","exit","remove"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <div ref=\"chartContainer\"></div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"Math.floor(travelJournal.length / 7) - 1\" :tooltip=\"'always'\" @drag-end=\"updateChart\" />\n    </div>\n  </template>\n  \n  <script>\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  import VueSlider from 'vue-slider-component';\n  import 'vue-slider-component/theme/default.css';\n  \n  export default {\n    components: {\n      VueSlider,\n    },\n    data() {\n      return {\n        currentWeekIndex: 0,\n        travelJournal: [],\n      };\n    },\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        getSingleEndpoint({ participantId: 1010 }, 'TravelJournal').then((response) => {\n          this.travelJournal = response.data.map(d => ({\n            type: \"Feature\",\n            properties: {\n              travelStartTime: d.travelStartTime,\n              travelStartLocationId: d.travelStartLocationId,\n              travelEndLocationId: d.travelEndLocationId,\n              checkInTime: d.checkInTime,\n              checkOutTime: d.checkOutTime,\n              endingBalance: d.endingBalance,\n              travelEndTime: d.travelEndTime,\n              participantId: d.participantId,\n              purpose: d.purpose,\n              startingBalance: d.startingBalance,\n              id: d.id\n            },\n          }));\n  \n          const data = response.data;\n  \n          // Parsing delle date e calcolo della durata dei viaggi in minuti\n          const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n          });\n  \n          // Crea il grafico utilizzando D3\n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          const chart = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n          const updateChart = () => {\n            const weekStartIndex = this.currentWeekIndex * 7;\n            const weekEndIndex = weekStartIndex + 6;\n  \n            const filteredData = parsedData.slice(weekStartIndex, weekEndIndex + 1);\n  \n            const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  \n            const totalTravelTimes = weekdays.map((day) => {\n              const dayTravelTimes = filteredData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n              const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n              return { day, totalTravelTime };\n            });\n  \n            const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n            const yTicks = d3.range(0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30, 30);\n            const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30]).range([height, 0]);\n  \n            const xAxis = d3.axisBottom(x);\n            const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat((d) => {\n              const hours = Math.floor(d / 60);\n              return `${hours}:00`;\n            });\n  \n            chart.select(\".x-axis\").call(xAxis);\n            chart.select(\".y-axis\").call(yAxis);\n  \n            const bars = chart.selectAll(\".bar\").data(totalTravelTimes);\n  \n            bars\n              .enter()\n              .append(\"rect\")\n              .attr(\"class\", \"bar\")\n              .merge(bars)\n              .attr(\"x\", (d) => x(d.day))\n              .attr(\"y\", (d) => y(d.totalTravelTime))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"height\", (d) => height - y(d.totalTravelTime));\n  \n            bars.exit().remove();\n          };\n  \n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  \n          svg.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`);\n          svg.append(\"g\").attr(\"class\", \"y-axis\");\n  \n          updateChart();\n        });\n      },\n      updateChart() {\n        this.createChart();\n      },\n    },\n  };\n  </script>\n  \n  <style>\n  .bar {\n    fill: steelblue;\n  }\n  </style>\n  \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}