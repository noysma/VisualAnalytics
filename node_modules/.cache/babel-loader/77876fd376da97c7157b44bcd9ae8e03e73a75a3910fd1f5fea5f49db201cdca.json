{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nexport default {\n  mounted() {\n    this.fetchTravelJournalData();\n  },\n  methods: {\n    fetchTravelJournalData() {\n      if (this.partID !== null) {\n        const params = {\n          participantId: Number(this.partID)\n        };\n        getSingleEndpoint({\n          participantId: params.participantId\n        }, 'ParticipantStatusLogs').then(response => {\n          const updatedData = response.data.map(d => ({\n            timestamp: new Date(d.timestamp),\n            currentMode: d.currentMode\n          }));\n\n          // Update the data and redraw the heatmap\n          this.participantStatus = updatedData; // Rename from 'partecipanStatus' to 'participantStatus'\n          this.drawHeatMap();\n        });\n      } else {\n        console.error(\"Please enter a participant ID.\");\n      }\n    },\n    drawHeatMap() {\n      // Select the existing SVG element if it exists, or create a new one\n      let svg = d3.select(this.$refs.heatmapContainer);\n      if (svg.empty()) {\n        // Create an SVG element for the heatmap\n        svg = d3.select(this.$refs.heatmapContainer.parentNode).append('svg').attr('width', 650).attr('height', 700);\n      }\n\n      // Extract the necessary data for the heatmap (timestamps and current mode)\n      const heatmapData = this.participantStatus.map(entry => ({\n        timestamp: new Date(entry.timestamp.toDateString()),\n        mode: entry.currentMode\n      }));\n\n      // Get the unique modes in the data\n      const uniqueModes = [...new Set(heatmapData.map(d => d.mode))];\n\n      // Define the color scale for the heatmap based on the unique modes\n      const colorScale = d3.scaleOrdinal().domain(uniqueModes).range(d3.schemeCategory10);\n\n      // Calculate the height of each row\n      const rowHeight = 700 / heatmapData.length;\n\n      // Update the heatmap rectangles\n      const rects = svg.selectAll('rect').data(heatmapData);\n      rects.enter().append('rect').merge(rects).attr('x', (_, i) => i * rowHeight).attr('y', d => {\n        const dayStart = new Date(d.timestamp);\n        dayStart.setHours(0, 0, 0, 0);\n        const dayEnd = new Date(d.timestamp);\n        dayEnd.setHours(23, 59, 59, 999);\n        const yScale = d3.scaleTime().domain([dayStart, dayEnd]).range([0, 650]);\n        return yScale(d.timestamp);\n      }).attr('width', rowHeight).attr('height', d => {\n        const dayStart = new Date(d.timestamp);\n        dayStart.setHours(0, 0, 0, 0);\n        const dayEnd = new Date(d.timestamp);\n        dayEnd.setHours(23, 59, 59, 999);\n        const yScale = d3.scaleTime().domain([dayStart, dayEnd]).range([0, 650]);\n        return yScale(dayEnd) - yScale(dayStart);\n      }).style('fill', d => colorScale(d.mode));\n      rects.exit().remove();\n\n      // Add X-axis\n      svg.selectAll('.x-axis').remove();\n      const xScale = d3.scaleTime().domain(d3.extent(heatmapData, d => d.timestamp)).range([0, 650]);\n      const xAxis = d3.axisBottom(xScale).ticks(d3.timeHour.every(3)); // Specifica gli intervalli di 3 ore\n      svg.append('g').attr('class', 'x-axis').attr('transform', 'translate(0, 700)').call(xAxis);\n\n      // Add X-axis label\n      svg.selectAll('.x-axis-label').remove();\n      svg.append('text').attr('class', 'x-axis-label').attr('x', 650 / 2).attr('y', 700 - rowHeight / 2 + 40).attr('text-anchor', 'middle').text('Timestamp');\n\n      // Add Y-axis\n      svg.selectAll('.y-axis').remove();\n      const yScale = d3.scaleBand().domain(heatmapData.map(d => d.mode)).range([0, 700]);\n      svg.append('g').attr('class', 'y-axis').attr('transform', 'translate(40, 0)').call(d3.axisLeft(yScale));\n\n      // Add Y-axis label\n      svg.selectAll('.y-axis-label').remove();\n      svg.append('text').attr('class', 'y-axis-label').attr('x', rowHeight / 2 + 40).attr('y', 700 / 2).attr('text-anchor', 'middle').attr('transform', 'rotate(-90)').text('Modes');\n\n      // Add color legend\n      const legend = svg.append('g').attr('class', 'legend').attr('transform', 'translate(550, 660)');\n      const legendItems = legend.selectAll('.legend-item').data(uniqueModes).enter().append('g').attr('class', 'legend-item').attr('transform', (_, i) => `translate(-20, ${i * 20})`);\n      legendItems.append('rect').attr('width', 10).attr('height', 10).attr('fill', d => colorScale(d));\n      legendItems.append('text').attr('x', 15).attr('y', 8).text(d => d);\n\n      // Update the width and height attributes of the SVG element\n      svg.attr('width', 650).attr('height', 700);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","mounted","fetchTravelJournalData","methods","partID","params","participantId","Number","then","response","updatedData","data","map","d","timestamp","Date","currentMode","participantStatus","drawHeatMap","console","error","svg","select","$refs","heatmapContainer","empty","parentNode","append","attr","heatmapData","entry","toDateString","mode","uniqueModes","Set","colorScale","scaleOrdinal","domain","range","schemeCategory10","rowHeight","length","rects","selectAll","enter","merge","_","i","dayStart","setHours","dayEnd","yScale","scaleTime","style","exit","remove","xScale","extent","xAxis","axisBottom","ticks","timeHour","every","call","text","scaleBand","axisLeft","legend","legendItems"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n\n<template>\n    <div>\n      <svg id=\"heatmap-container\" ref=\"heatmapContainer\"></svg>\n    </div>\n  </template>\n  \n  <script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n  \n  export default {\n    mounted() {\n      this.fetchTravelJournalData();\n    },\n    methods: {\n      fetchTravelJournalData() {\n        if (this.partID !== null) {\n          const params = {\n            participantId: Number(this.partID),\n          };\n          getSingleEndpoint({ participantId: params.participantId }, 'ParticipantStatusLogs').then((response) => {\n            const updatedData = response.data.map(d => ({\n              timestamp: new Date(d.timestamp),\n              currentMode: d.currentMode,\n            }));\n  \n            // Update the data and redraw the heatmap\n            this.participantStatus = updatedData; // Rename from 'partecipanStatus' to 'participantStatus'\n            this.drawHeatMap();\n          });\n        } else {\n          console.error(\"Please enter a participant ID.\");\n        }\n      },\n      drawHeatMap() {\n        // Select the existing SVG element if it exists, or create a new one\n        let svg = d3.select(this.$refs.heatmapContainer);\n  \n        if (svg.empty()) {\n          // Create an SVG element for the heatmap\n          svg = d3.select(this.$refs.heatmapContainer.parentNode)\n            .append('svg')\n            .attr('width', 650)\n            .attr('height', 700);\n        }\n  \n        // Extract the necessary data for the heatmap (timestamps and current mode)\n        const heatmapData = this.participantStatus.map(entry => ({\n          timestamp: new Date(entry.timestamp.toDateString()),\n          mode: entry.currentMode,\n        }));\n  \n        // Get the unique modes in the data\n        const uniqueModes = [...new Set(heatmapData.map(d => d.mode))];\n  \n        // Define the color scale for the heatmap based on the unique modes\n        const colorScale = d3.scaleOrdinal()\n          .domain(uniqueModes)\n          .range(d3.schemeCategory10);\n  \n        // Calculate the height of each row\n        const rowHeight = 700 / heatmapData.length;\n  \n        // Update the heatmap rectangles\n        const rects = svg.selectAll('rect')\n          .data(heatmapData);\n  \n        rects.enter()\n          .append('rect')\n          .merge(rects)\n          .attr('x', (_, i) => i * rowHeight)\n          .attr('y', d => {\n            const dayStart = new Date(d.timestamp);\n            dayStart.setHours(0, 0, 0, 0);\n            const dayEnd = new Date(d.timestamp);\n            dayEnd.setHours(23, 59, 59, 999);\n            const yScale = d3.scaleTime()\n              .domain([dayStart, dayEnd])\n              .range([0, 650]);\n            return yScale(d.timestamp);\n          })\n          .attr('width', rowHeight)\n          .attr('height', d => {\n            const dayStart = new Date(d.timestamp);\n            dayStart.setHours(0, 0, 0, 0);\n            const dayEnd = new Date(d.timestamp);\n            dayEnd.setHours(23, 59, 59, 999);\n            const yScale = d3.scaleTime()\n              .domain([dayStart, dayEnd])\n              .range([0, 650]);\n            return yScale(dayEnd) - yScale(dayStart);\n          })\n          .style('fill', d => colorScale(d.mode));\n  \n        rects.exit().remove();\n  \n        // Add X-axis\n        svg.selectAll('.x-axis').remove();\n        const xScale = d3.scaleTime()\n          .domain(d3.extent(heatmapData, d => d.timestamp))\n          .range([0, 650]);\n        const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeHour.every(3)); // Specifica gli intervalli di 3 ore\n        svg.append('g')\n          .attr('class', 'x-axis')\n          .attr('transform', 'translate(0, 700)')\n          .call(xAxis);\n  \n        // Add X-axis label\n        svg.selectAll('.x-axis-label').remove();\n        svg.append('text')\n          .attr('class', 'x-axis-label')\n          .attr('x', 650 / 2)\n          .attr('y', 700 - rowHeight / 2 + 40)\n          .attr('text-anchor', 'middle')\n          .text('Timestamp');\n  \n        // Add Y-axis\n        svg.selectAll('.y-axis').remove();\n        const yScale = d3.scaleBand()\n          .domain(heatmapData.map(d => d.mode))\n          .range([0, 700]);\n        svg.append('g')\n          .attr('class', 'y-axis')\n          .attr('transform', 'translate(40, 0)')\n          .call(d3.axisLeft(yScale));\n  \n        // Add Y-axis label\n        svg.selectAll('.y-axis-label').remove();\n        svg.append('text')\n          .attr('class', 'y-axis-label')\n          .attr('x', rowHeight / 2 + 40)\n          .attr('y', 700 / 2)\n          .attr('text-anchor', 'middle')\n          .attr('transform', 'rotate(-90)')\n          .text('Modes');\n  \n        // Add color legend\n        const legend = svg.append('g')\n          .attr('class', 'legend')\n          .attr('transform', 'translate(550, 660)');\n  \n        const legendItems = legend.selectAll('.legend-item')\n          .data(uniqueModes)\n          .enter()\n          .append('g')\n          .attr('class', 'legend-item')\n          .attr('transform', (_, i) => `translate(-20, ${i * 20})`);\n  \n        legendItems.append('rect')\n          .attr('width', 10)\n          .attr('height', 10)\n          .attr('fill', d => colorScale(d));\n  \n        legendItems.append('text')\n          .attr('x', 15)\n          .attr('y', 8)\n          .text(d => d);\n  \n        // Update the width and height attributes of the SVG element\n        svg.attr('width', 650)\n          .attr('height', 700);\n      },\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}