{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n      getSingleEndpoint({\n        participantId: 1010\n      }, 'TravelJournal').then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Calcola la densità dei viaggi per ogni giorno della settimana\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const densityData = weekdays.map(day => {\n          const dayTravelTimes = parsedData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n          const density = dayTravelTimes.length;\n          return {\n            day,\n            density\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Scala per gli assi x e y\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n        const y = d3.scaleLinear().domain([0, d3.max(densityData, d => d.density)]).range([height, 0]);\n\n        // Creazione degli assi x e y\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y);\n\n        // Aggiungi gli assi al grafico\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n        // Crea le barre del grafico\n        chart.selectAll(\".bar\").data(densityData).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", (d, i) => x(d.day) + i * x.bandwidth() / weekdays.length).attr(\"y\", d => y(d.density)).attr(\"width\", x.bandwidth() / weekdays.length).attr(\"height\", d => height - y(d.density));\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","mounted","createChart","methods","participantId","then","response","travelJournal","data","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","weekdays","densityData","day","dayTravelTimes","filter","getDay","indexOf","density","length","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","x","scaleBand","domain","range","padding","y","scaleLinear","max","xAxis","axisBottom","yAxis","axisLeft","call","selectAll","enter","i","bandwidth"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div ref=\"chartContainer\"></div>\n  </template>\n  \n  <script>\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  \n  export default {\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n        getSingleEndpoint({participantId:1010}, 'TravelJournal').then((response) => {\n        this.travelJournal = response.data.map(d => ({\n            type: \"Feature\",\n            properties: {\n              travelStartTime: d.travelStartTime,\n              travelStartLocationId: d.travelStartLocationId,\n              travelEndLocationId: d.travelEndLocationId,\n              checkInTime: d.checkInTime,\n              checkOutTime: d.checkOutTime,\n              endingBalance: d.endingBalance,\n              travelEndTime: d.travelEndTime,\n              participantId: d.participantId,\n              purpose: d.purpose,\n              startingBalance: d.startingBalance,\n              id: d.id\n            },\n        }));          const data = response.data;\n  \n          // Parsing delle date e calcolo della durata dei viaggi in minuti\n          const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n          });\n  \n          // Calcola la densità dei viaggi per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const densityData = weekdays.map((day) => {\n            const dayTravelTimes = parsedData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n            const density = dayTravelTimes.length;\n            return { day, density };\n          });\n  \n          // Crea il grafico utilizzando D3\n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          const chart = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n  \n          const y = d3.scaleLinear().domain([0, d3.max(densityData, (d) => d.density)]).range([height, 0]);\n  \n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y);\n  \n          // Aggiungi gli assi al grafico\n          chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n          chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n  \n          // Crea le barre del grafico\n          chart\n            .selectAll(\".bar\")\n            .data(densityData)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d, i) => x(d.day) + i * x.bandwidth() / weekdays.length)\n            .attr(\"y\", (d) => y(d.density))\n            .attr(\"width\", x.bandwidth() / weekdays.length)\n            .attr(\"height\", (d) => height - y(d.density));\n        });\n      },\n    },\n  };\n  </script>\n  "],"mappings":"AAMA,SAAAA,iBAAA;AACA,YAAAC,EAAA;AAEA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,YAAA;MACA;MACAH,iBAAA;QAAAK,aAAA;MAAA,oBAAAC,IAAA,CAAAC,QAAA;QACA,KAAAC,aAAA,GAAAD,QAAA,CAAAE,IAAA,CAAAC,GAAA,CAAAC,CAAA;UACAC,IAAA;UACAC,UAAA;YACAC,eAAA,EAAAH,CAAA,CAAAG,eAAA;YACAC,qBAAA,EAAAJ,CAAA,CAAAI,qBAAA;YACAC,mBAAA,EAAAL,CAAA,CAAAK,mBAAA;YACAC,WAAA,EAAAN,CAAA,CAAAM,WAAA;YACAC,YAAA,EAAAP,CAAA,CAAAO,YAAA;YACAC,aAAA,EAAAR,CAAA,CAAAQ,aAAA;YACAC,aAAA,EAAAT,CAAA,CAAAS,aAAA;YACAf,aAAA,EAAAM,CAAA,CAAAN,aAAA;YACAgB,OAAA,EAAAV,CAAA,CAAAU,OAAA;YACAC,eAAA,EAAAX,CAAA,CAAAW,eAAA;YACAC,EAAA,EAAAZ,CAAA,CAAAY;UACA;QACA;QAAA,MAAAd,IAAA,GAAAF,QAAA,CAAAE,IAAA;;QAEA;QACA,MAAAe,UAAA,GAAAf,IAAA,CAAAC,GAAA,CAAAC,CAAA;UACA,MAAAc,SAAA,OAAAC,IAAA,CAAAf,CAAA,CAAAG,eAAA;UACA,MAAAa,OAAA,OAAAD,IAAA,CAAAf,CAAA,CAAAS,aAAA;UACA,MAAAQ,UAAA,IAAAD,OAAA,GAAAF,SAAA;UACA;YAAAA,SAAA;YAAAE,OAAA;YAAAC;UAAA;QACA;;QAEA;QACA,MAAAC,QAAA;QACA,MAAAC,WAAA,GAAAD,QAAA,CAAAnB,GAAA,CAAAqB,GAAA;UACA,MAAAC,cAAA,GAAAR,UAAA,CAAAS,MAAA,CAAAtB,CAAA,IAAAA,CAAA,CAAAc,SAAA,CAAAS,MAAA,OAAAL,QAAA,CAAAM,OAAA,CAAAJ,GAAA;UACA,MAAAK,OAAA,GAAAJ,cAAA,CAAAK,MAAA;UACA;YAAAN,GAAA;YAAAK;UAAA;QACA;;QAEA;QACA,MAAAE,MAAA;UAAAC,GAAA;UAAAC,KAAA;UAAAC,MAAA;UAAAC,IAAA;QAAA;QACA,MAAAC,KAAA,SAAAL,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAE,KAAA;QACA,MAAAI,MAAA,SAAAN,MAAA,CAAAC,GAAA,GAAAD,MAAA,CAAAG,MAAA;QAEA,MAAAI,GAAA,GAAA5C,EAAA,CACA6C,MAAA,MAAAC,KAAA,CAAAC,cAAA,EACAC,MAAA,QACAC,IAAA,UAAAP,KAAA,GAAAL,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAE,KAAA,EACAU,IAAA,WAAAN,MAAA,GAAAN,MAAA,CAAAC,GAAA,GAAAD,MAAA,CAAAG,MAAA;QAEA,MAAAU,KAAA,GAAAN,GAAA,CACAI,MAAA,MACAC,IAAA,2BAAAZ,MAAA,CAAAI,IAAA,IAAAJ,MAAA,CAAAC,GAAA;;QAEA;QACA,MAAAa,CAAA,GAAAnD,EAAA,CAAAoD,SAAA,GAAAC,MAAA,CAAAzB,QAAA,EAAA0B,KAAA,KAAAZ,KAAA,GAAAa,OAAA;QAEA,MAAAC,CAAA,GAAAxD,EAAA,CAAAyD,WAAA,GAAAJ,MAAA,KAAArD,EAAA,CAAA0D,GAAA,CAAA7B,WAAA,EAAAnB,CAAA,IAAAA,CAAA,CAAAyB,OAAA,IAAAmB,KAAA,EAAAX,MAAA;;QAEA;QACA,MAAAgB,KAAA,GAAA3D,EAAA,CAAA4D,UAAA,CAAAT,CAAA;QACA,MAAAU,KAAA,GAAA7D,EAAA,CAAA8D,QAAA,CAAAN,CAAA;;QAEA;QACAN,KAAA,CAAAF,MAAA,MAAAC,IAAA,oBAAAA,IAAA,8BAAAN,MAAA,KAAAoB,IAAA,CAAAJ,KAAA;QACAT,KAAA,CAAAF,MAAA,MAAAC,IAAA,oBAAAc,IAAA,CAAAF,KAAA;;QAEA;QACAX,KAAA,CACAc,SAAA,SACAxD,IAAA,CAAAqB,WAAA,EACAoC,KAAA,GACAjB,MAAA,SACAC,IAAA,iBACAA,IAAA,OAAAvC,CAAA,EAAAwD,CAAA,KAAAf,CAAA,CAAAzC,CAAA,CAAAoB,GAAA,IAAAoC,CAAA,GAAAf,CAAA,CAAAgB,SAAA,KAAAvC,QAAA,CAAAQ,MAAA,EACAa,IAAA,MAAAvC,CAAA,IAAA8C,CAAA,CAAA9C,CAAA,CAAAyB,OAAA,GACAc,IAAA,UAAAE,CAAA,CAAAgB,SAAA,KAAAvC,QAAA,CAAAQ,MAAA,EACAa,IAAA,WAAAvC,CAAA,IAAAiC,MAAA,GAAAa,CAAA,CAAA9C,CAAA,CAAAyB,OAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}