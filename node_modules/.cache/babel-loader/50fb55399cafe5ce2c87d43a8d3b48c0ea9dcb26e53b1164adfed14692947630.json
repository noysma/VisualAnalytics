{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap } from \"@/assets/BuildingMap\";\nconst bm = new BuildingMap();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: []\n    };\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      const svg = d3.select(this.$refs.map);\n      svg.select(\"g.buildings\").datum(this.buildings).call(bm);\n      svg.selectAll(\"path\").on(\"mouseover\", function () {\n        d3.select(this).style(\"fill-opacity\", 1).attr(\"stroke-width\", 2);\n      }).on(\"mouseout\", function () {\n        if (!self.showTypes[this.properties.buildingType]) {\n          d3.select(this).style(\"fill-opacity\", 0.2).attr(\"stroke-width\", 1);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","bm","name","components","data","buildings","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","methods","svg","select","$refs","datum","call","selectAll","on","style","attr","self","showTypes"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <b-container id=\"app\">\n    <b-row>\n      <b-col>\n        <div id=\"map\">\n            <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n            </svg>\n        </div>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n\n<script>\nimport {getSingleEndpoint} from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport {BuildingMap} from \"@/assets/BuildingMap\";\n\nconst bm = new BuildingMap();\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      buildings: [],\n    }\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy:d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n    const svg = d3.select(this.$refs.map);\n    \n    svg.select(\"g.buildings\")\n      .datum(this.buildings)\n      .call(bm);\n\n    svg.selectAll(\"path\")\n      .on(\"mouseover\", function() {\n        d3.select(this).style(\"fill-opacity\", 1)\n          .attr(\"stroke-width\", 2);\n      })\n      .on(\"mouseout\", function() {\n        if (!self.showTypes[this.properties.buildingType]) {\n          d3.select(this).style(\"fill-opacity\", 0.2)\n            .attr(\"stroke-width\", 1);\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nsvg g.buildings path {\n  fill-opacity: 0.2;\n  stroke: grey;\n}\n\nsvg g.buildings path:hover {\n  fill-opacity: 1;\n  stroke-width: 2;\n}\n\n</style>"],"mappings":"AAgBA,SAAAA,iBAAA;AACA,IAAAC,MAAA,GAAAC,OAAA,YAAAD,MAAA;AACA,MAAAE,GAAA,GAAAD,OAAA;AACA,MAAAE,EAAA,GAAAF,OAAA;AAEA,SAAAG,WAAA;AAEA,MAAAC,EAAA,OAAAD,WAAA;AAEA;EACAE,IAAA;EACAC,UAAA,GACA;EACAC,KAAA;IACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACAX,iBAAA,kBAAAY,IAAA,CAAAC,QAAA;MACA,KAAAH,SAAA,GAAAG,QAAA,CAAAJ,IAAA,CAAAK,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAd,GAAA,CAAAe,QAAA,CAAAC,KAAA,CAAAlB,MAAA,CAAAmB,IAAA,CAAAL,CAAA,CAAAM,QAAA,UAAAC,SAAA;QACAC,UAAA;UACAC,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAC,YAAA,EAAAV,CAAA,CAAAU,YAAA;UACAC,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAC,KAAA,EAAAZ,CAAA,CAAAY;QACA;MACA;MACA,KAAAC,aAAA;IACA;EACA;EACAC,OAAA;IACAD,cAAA;MACA,MAAAE,GAAA,GAAA1B,EAAA,CAAA2B,MAAA,MAAAC,KAAA,CAAAlB,GAAA;MAEAgB,GAAA,CAAAC,MAAA,gBACAE,KAAA,MAAAvB,SAAA,EACAwB,IAAA,CAAA5B,EAAA;MAEAwB,GAAA,CAAAK,SAAA,SACAC,EAAA;QACAhC,EAAA,CAAA2B,MAAA,OAAAM,KAAA,oBACAC,IAAA;MACA,GACAF,EAAA;QACA,KAAAG,IAAA,CAAAC,SAAA,MAAAjB,UAAA,CAAAE,YAAA;UACArB,EAAA,CAAA2B,MAAA,OAAAM,KAAA,sBACAC,IAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}