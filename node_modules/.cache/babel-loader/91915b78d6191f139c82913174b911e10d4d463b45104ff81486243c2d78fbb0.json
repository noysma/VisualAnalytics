{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nimport VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      travelJournal: [],\n      weekStart: new Date()\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 1010\n      }, 'TravelJournal').then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n        const updateChart = () => {\n          const weekStart = new Date(this.weekStart);\n          weekStart.setDate(weekStart.getDate() + this.currentWeekIndex * 7);\n          const weekEnd = new Date(weekStart);\n          weekEnd.setDate(weekEnd.getDate() + 6);\n          const weekStartStr = weekStart.toLocaleDateString('en-US', {\n            day: 'numeric',\n            month: 'long'\n          });\n          const weekEndStr = weekEnd.toLocaleDateString('en-US', {\n            day: 'numeric',\n            month: 'long'\n          });\n          d3.select(\"#week-info\").text(`${weekStartStr} - ${weekEndStr}`);\n          const filteredData = parsedData.filter(d => {\n            const startDate = new Date(d.startDate);\n            return startDate >= weekStart && startDate <= weekEnd;\n          });\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = filteredData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30, 30);\n          const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30]).range([height, 0]);\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60);\n            return `${hours}:00`;\n          });\n          chart.select(\".x-axis\").call(xAxis);\n          chart.select(\".y-axis\").call(yAxis);\n          const bars = chart.selectAll(\".bar\").data(totalTravelTimes);\n          bars.enter().append(\"rect\").attr(\"class\", \"bar\").merge(bars).attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n          bars.exit().remove();\n        };\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const weekInfo = svg.append(\"text\").attr(\"id\", \"week-info\").attr(\"x\", margin.left).attr(\"y\", margin.top).text(\"\");\n        updateChart();\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","VueSlider","components","data","currentWeekIndex","travelJournal","weekStart","Date","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","endDate","travelTime","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","updateChart","setDate","getDate","weekEnd","weekStartStr","toLocaleDateString","day","month","weekEndStr","text","filteredData","filter","totalTravelTimes","weekdays","dayTravelTimes","getDay","indexOf","totalTravelTime","sum","x","scaleBand","domain","range","padding","yTicks","max","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","Math","floor","call","bars","selectAll","enter","merge","bandwidth","exit","remove","weekInfo"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"Math.floor(travelJournal.length / 7) - 1\" :tooltip=\"'always'\" @drag-end=\"updateChart\" />\n      <div ref=\"chartContainer\"></div>\n    </div>\n  </template>\n  \n  <script>\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  import VueSlider from 'vue-slider-component';\n  import 'vue-slider-component/theme/default.css';\n  \n  export default {\n    components: {\n      VueSlider,\n    },\n    data() {\n      return {\n        currentWeekIndex: 0,\n        travelJournal: [],\n        weekStart: new Date(),\n      };\n    },\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        getSingleEndpoint({ participantId: 1010 }, 'TravelJournal').then((response) => {\n          this.travelJournal = response.data.map(d => ({\n            type: \"Feature\",\n            properties: {\n              travelStartTime: d.travelStartTime,\n              travelStartLocationId: d.travelStartLocationId,\n              travelEndLocationId: d.travelEndLocationId,\n              checkInTime: d.checkInTime,\n              checkOutTime: d.checkOutTime,\n              endingBalance: d.endingBalance,\n              travelEndTime: d.travelEndTime,\n              participantId: d.participantId,\n              purpose: d.purpose,\n              startingBalance: d.startingBalance,\n              id: d.id\n            },\n          }));\n  \n          const data = response.data;\n  \n          // Parsing delle date e calcolo della durata dei viaggi in minuti\n          const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n          });\n  \n          // Crea il grafico utilizzando D3\n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          const chart = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n          const updateChart = () => {\n            const weekStart = new Date(this.weekStart);\n            weekStart.setDate(weekStart.getDate() + this.currentWeekIndex * 7);\n  \n            const weekEnd = new Date(weekStart);\n            weekEnd.setDate(weekEnd.getDate() + 6);\n  \n            const weekStartStr = weekStart.toLocaleDateString('en-US', { day: 'numeric', month: 'long' });\n            const weekEndStr = weekEnd.toLocaleDateString('en-US', { day: 'numeric', month: 'long' });\n  \n            d3.select(\"#week-info\").text(`${weekStartStr} - ${weekEndStr}`);\n  \n            const filteredData = parsedData.filter((d) => {\n              const startDate = new Date(d.startDate);\n              return startDate >= weekStart && startDate <= weekEnd;\n            });\n  \n            const totalTravelTimes = weekdays.map((day) => {\n              const dayTravelTimes = filteredData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n              const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n              return { day, totalTravelTime };\n            });\n  \n            const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n            const yTicks = d3.range(0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30, 30);\n            const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30]).range([height, 0]);\n  \n            const xAxis = d3.axisBottom(x);\n            const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat((d) => {\n              const hours = Math.floor(d / 60);\n              return `${hours}:00`;\n            });\n  \n            chart.select(\".x-axis\").call(xAxis);\n            chart.select(\".y-axis\").call(yAxis);\n  \n            const bars = chart.selectAll(\".bar\").data(totalTravelTimes);\n  \n            bars\n              .enter()\n              .append(\"rect\")\n              .attr(\"class\", \"bar\")\n              .merge(bars)\n              .attr(\"x\", (d) => x(d.day))\n              .attr(\"y\", (d) => y(d.totalTravelTime))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"height\", (d) => height - y(d.totalTravelTime));\n  \n            bars.exit().remove();\n          };\n  \n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  \n          const weekInfo = svg.append(\"text\")\n            .attr(\"id\", \"week-info\")\n            .attr(\"x\", margin.left)\n            .attr(\"y\", margin.top)\n            .text(\"\");\n  \n          updateChart();\n        });\n      },\n    },\n  };\n  </script>\n  \n  <style>\n  .bar {\n    fill: steelblue;\n  }\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}