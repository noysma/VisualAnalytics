{"ast":null,"code":"import VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      yScaleMax: 0,\n      maxTravelTime: 0\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 2\n      }, \"TravelJournal\").then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const parsedData = response.data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60);\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n        this.maxTravelTime = d3.max(parsedData, d => d.travelTime);\n        this.yScaleMax = this.maxTravelTime + 30;\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n        const updateChart = () => {\n          const currentWeekStart = new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + this.currentWeekIndex * 7);\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter(d => d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd);\n          const weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n          chart.selectAll(\".bar\").remove();\n          chart.selectAll(\".x-axis\").remove();\n          chart.selectAll(\".y-axis\").remove();\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, this.yScaleMax, 30);\n          const y = d3.scaleLinear().domain([0, this.maxTravelTime]).range([height, 0]);\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60);\n            const minutes = d % 60;\n            return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n          });\n          chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n          chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n          chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n        };\n        updateChart();\n        this.$watch(\"currentWeekIndex\", () => {\n          updateChart();\n        });\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n    }\n  }\n};","map":{"version":3,"names":["VueSlider","getSingleEndpoint","d3","components","data","currentWeekIndex","totalWeeks","travelJournal","weekStart","yScaleMax","maxTravelTime","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","getFullYear","getMonth","getDate","getDay","weekEnd","length","Math","ceil","max","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","updateChart","currentWeekStart","currentWeekEnd","currentWeekData","filter","weekdays","totalTravelTimes","day","dayTravelTimes","indexOf","totalTravelTime","sum","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","floor","minutes","call","enter","bandwidth","$watch","formatWeekLabel","value","toDateString"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n      <div ref=\"chartContainer\"></div>\n    </div>\n  </template>\n  \n  <script>\n  import VueSlider from 'vue-slider-component';\n  import 'vue-slider-component/theme/default.css';\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  \n  export default {\n    components: {\n      VueSlider,\n    },\n    data() {\n      return {\n        currentWeekIndex: 0,\n        totalWeeks: 0,\n        travelJournal: [],\n        weekStart: null,\n        yScaleMax: 0,\n        maxTravelTime: 0,\n      };\n    },\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        getSingleEndpoint({ participantId: 2 }, \"TravelJournal\").then((response) => {\n          this.travelJournal = response.data.map((d) => ({\n            type: \"Feature\",\n            properties: {\n              travelStartTime: d.travelStartTime,\n              travelStartLocationId: d.travelStartLocationId,\n              travelEndLocationId: d.travelEndLocationId,\n              checkInTime: d.checkInTime,\n              checkOutTime: d.checkOutTime,\n              endingBalance: d.endingBalance,\n              travelEndTime: d.travelEndTime,\n              participantId: d.participantId,\n              purpose: d.purpose,\n              startingBalance: d.startingBalance,\n              id: d.id,\n            },\n          }));\n  \n          const parsedData = response.data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60);\n            return { startDate, endDate, travelTime };\n          });\n  \n          const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n          const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n          const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n          this.totalWeeks = totalWeeks;\n          this.weekStart = weekStart;\n          this.maxTravelTime = d3.max(parsedData, (d) => d.travelTime);\n          this.yScaleMax = this.maxTravelTime + 30;\n  \n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n  \n          const updateChart = () => {\n            const currentWeekStart = new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + this.currentWeekIndex * 7);\n            const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n            const currentWeekData = parsedData.filter((d) => d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd);\n  \n            const weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n            const totalTravelTimes = weekdays.map((day) => {\n              const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n              const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n              return { day, totalTravelTime };\n            });\n  \n            chart.selectAll(\".bar\").remove();\n            chart.selectAll(\".x-axis\").remove();\n            chart.selectAll(\".y-axis\").remove();\n  \n            const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n  \n            const yTicks = d3.range(0, this.yScaleMax, 30);\n            const y = d3.scaleLinear().domain([0, this.maxTravelTime]).range([height, 0]);\n  \n            const xAxis = d3.axisBottom(x);\n            const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat((d) => {\n              const hours = Math.floor(d / 60);\n              const minutes = d % 60;\n              return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n            });\n  \n            chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n            chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n  \n            chart\n              .selectAll(\".bar\")\n              .data(totalTravelTimes)\n              .enter()\n              .append(\"rect\")\n              .attr(\"class\", \"bar\")\n              .attr(\"x\", (d) => x(d.day))\n              .attr(\"y\", (d) => y(d.totalTravelTime))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"height\", (d) => height - y(d.totalTravelTime));\n          };\n  \n          updateChart();\n  \n          this.$watch(\"currentWeekIndex\", () => {\n            updateChart();\n          });\n        });\n      },\n      formatWeekLabel(value) {\n        const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n        const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n        return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n      },\n    },\n  };\n  </script>\n  \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}