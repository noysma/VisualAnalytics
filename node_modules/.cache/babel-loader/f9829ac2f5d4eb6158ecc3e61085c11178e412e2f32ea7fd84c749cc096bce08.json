{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      yScaleMax: 0,\n      maxTravelTime: 0,\n      svg: null,\n      chart: null\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 2\n      }, \"TravelJournal\").then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60);\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        this.svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        this.chart = this.svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Calculate the maximum travel time for all weeks\n        const allWeeksData = parsedData.reduce((accumulator, currentValue) => {\n          const weekIndex = Math.floor((currentValue.startDate - weekStart) / (1000 * 60 * 60 * 24 * 7));\n          if (!accumulator[weekIndex]) {\n            accumulator[weekIndex] = [];\n          }\n          accumulator[weekIndex].push(currentValue.travelTime);\n          return accumulator;\n        }, {});\n        const maxTravelTime = Object.values(allWeeksData).reduce((max, weekData) => {\n          const weekMax = d3.max(weekData);\n          return weekMax > max ? weekMax : max;\n        }, 0);\n        this.maxTravelTime = maxTravelTime;\n        this.yScaleMax = Math.ceil((maxTravelTime + 30) / 10) * 10;\n        const updateChart = () => {\n          const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter(d => {\n            return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n          });\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n          this.chart.selectAll(\".bar\").remove();\n          this.chart.selectAll(\".x-axis\").remove();\n          this.chart.selectAll(\".y-axis\").remove();\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, this.yScaleMax, 30);\n          const y = d3.scaleLinear().domain([0, this.yScaleMax]).range([height, 0]);\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60);\n            const minutes = d % 60;\n            return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n          });\n          this.chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n          this.chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n          this.chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n        };\n        updateChart();\n        this.$watch(\"currentWeekIndex\", () => {\n          updateChart();\n        });\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n    },\n    getCurrentWeekLabel() {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()}`;\n    }\n  }\n};","map":{"version":3,"names":["VueSlider","getSingleEndpoint","d3","components","data","currentWeekIndex","totalWeeks","travelJournal","weekStart","yScaleMax","maxTravelTime","svg","chart","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","getFullYear","getMonth","getDate","getDay","weekEnd","length","Math","ceil","margin","top","right","bottom","left","width","height","select","$refs","chartContainer","append","attr","allWeeksData","reduce","accumulator","currentValue","weekIndex","floor","push","Object","values","max","weekData","weekMax","updateChart","currentWeekStart","currentWeekEnd","currentWeekData","filter","weekdays","totalTravelTimes","day","dayTravelTimes","indexOf","totalTravelTime","sum","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","minutes","call","enter","bandwidth","$watch","formatWeekLabel","value","toDateString","getCurrentWeekLabel"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n      <div ref=\"chartContainer\"></div>\n    </div>\n  </template>\n  \n  <script>\nimport VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\n\nexport default {\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      yScaleMax: 0,\n      maxTravelTime: 0,\n      svg: null,\n      chart: null,\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({ participantId: 2 }, \"TravelJournal\").then((response) => {\n        this.travelJournal = response.data.map((d) => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id,\n          },\n        }));\n        const data = response.data;\n\n        const parsedData = data.map((d) => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60);\n          return { startDate, endDate, travelTime };\n        });\n\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n\n        const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n\n        this.svg = d3\n          .select(this.$refs.chartContainer)\n          .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom);\n\n        this.chart = this.svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Calculate the maximum travel time for all weeks\n        const allWeeksData = parsedData.reduce((accumulator, currentValue) => {\n          const weekIndex = Math.floor((currentValue.startDate - weekStart) / (1000 * 60 * 60 * 24 * 7));\n          if (!accumulator[weekIndex]) {\n            accumulator[weekIndex] = [];\n          }\n          accumulator[weekIndex].push(currentValue.travelTime);\n          return accumulator;\n        }, {});\n\n        const maxTravelTime = Object.values(allWeeksData).reduce((max, weekData) => {\n          const weekMax = d3.max(weekData);\n          return weekMax > max ? weekMax : max;\n        }, 0);\n\n        this.maxTravelTime = maxTravelTime;\n        this.yScaleMax = Math.ceil((maxTravelTime + 30) / 10) * 10;\n\n        const updateChart = () => {\n          const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter((d) => {\n            return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n          });\n\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map((day) => {\n            const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n            return { day, totalTravelTime };\n          });\n\n          this.chart.selectAll(\".bar\").remove();\n          this.chart.selectAll(\".x-axis\").remove();\n          this.chart.selectAll(\".y-axis\").remove();\n\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n          const yTicks = d3.range(0, this.yScaleMax, 30);\n          const y = d3\n            .scaleLinear()\n            .domain([0, this.yScaleMax])\n            .range([height, 0]);\n\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3\n            .axisLeft(y)\n            .tickValues(yTicks)\n            .tickFormat((d) => {\n              const hours = Math.floor(d / 60);\n              const minutes = d % 60;\n              return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n            });\n\n          this.chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n          this.chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n          this.chart\n            .selectAll(\".bar\")\n            .data(totalTravelTimes)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.day))\n            .attr(\"y\", (d) => y(d.totalTravelTime))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => height - y(d.totalTravelTime));\n        };\n\n        updateChart();\n\n        this.$watch(\"currentWeekIndex\", () => {\n          updateChart();\n        });\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (value * 7));\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n    },\n    getCurrentWeekLabel() {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()}`;\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}