{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      cards: [{\n        title: \"Question 1\",\n        description: \"Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.\",\n        body: `\n            <div class=\"row justify-content-center\">\n              <div class=\"col-md-8\">\n                <div class=\"button-container\">\n                  <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                  <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"map-container\">\n              <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n                <g class=\"apartments\"></g>\n                <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n                <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n              </svg>\n            </div>\n          `\n      }\n      // Rest of the card objects\n      ],\n\n      collapsedCards: [],\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false\n    };\n  },\n  methods: {\n    toggleCollapse(index) {\n      if (this.isCollapsed(index)) {\n        this.collapsedCards = [];\n      } else {\n        this.collapsedCards = [index];\n      }\n    },\n    isCollapsed(index) {\n      return !this.collapsedCards.includes(index);\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    async fetchGeoJsonData() {\n      const response = await getSingleEndpoint(\"/geojson/buildings\", \"get\");\n      if (response.status === 200) {\n        const data = response.data;\n        this.buildings = data.features.map(feature => {\n          return wkx.Geometry.parse(Buffer.from(feature.geometry, \"hex\")).toGeoJSON();\n        });\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map.$el).select(\"g.buildings\").datum(this.buildings).call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map.$el).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map.$el).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map.$el).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    }\n  },\n  mounted() {\n    this.fetchGeoJsonData();\n  },\n  watch: {\n    buildings: {\n      immediate: true,\n      handler() {\n        this.drawBuildings();\n        this.drawApt();\n        this.drawPub();\n        this.drawRestaurants();\n      }\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","name","components","data","cards","title","description","body","collapsedCards","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","methods","toggleCollapse","index","isCollapsed","includes","togglePubs","toggleRestaurants","fetchGeoJsonData","response","status","features","map","feature","Geometry","parse","from","geometry","toGeoJSON","drawBuildings","select","$refs","$el","datum","call","drawApt","extent","drawPub","drawRestaurants","mounted","watch","immediate","handler"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<template>\n  <div id=\"vc2\" class=\"vc2-container\">\n    <div class=\"container\">\n      <h1>Challenge 2: Patterns of Life</h1>\n      <p>\n        Considers the patterns of daily life throughout the city.\n        You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n      </p>\n      <div class=\"card-container\">\n        <b-card no-body v-for=\"(card, index) in cards\" :key=\"index\">\n          <b-card-header header-tag=\"header\" class=\"p-3\" role=\"tab\" @click=\"toggleCollapse(index)\">\n            <div class=\"d-flex flex-column align-items-center\">\n              <h2 class=\"question-title\">{{ card.title }}</h2>\n              <p class=\"question-description\">{{ card.description }}</p>\n              <span class=\"arrow-icon\" :class=\"{ 'rotate': isCollapsed(index) }\" @click.stop=\"toggleCollapse(index)\">&#x25BE;</span>\n            </div>\n          </b-card-header>\n          <b-collapse :id=\"'collapse' + index\" v-model=\"collapsedCards\" accordion=\"my-accordion\" role=\"tabpanel\">\n            <b-card-body>\n              <div v-html=\"card.body\"></div>\n            </b-card-body>\n          </b-collapse>\n        </b-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      cards: [\n        {\n          title: \"Question 1\",\n          description: \"Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.\",\n          body: `\n            <div class=\"row justify-content-center\">\n              <div class=\"col-md-8\">\n                <div class=\"button-container\">\n                  <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                  <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"map-container\">\n              <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n                <g class=\"apartments\"></g>\n                <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n                <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n              </svg>\n            </div>\n          `,\n        },\n        // Rest of the card objects\n      ],\n      collapsedCards: [],\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n    };\n  },\n  methods: {\n    toggleCollapse(index) {\n      if (this.isCollapsed(index)) {\n        this.collapsedCards = [];\n      } else {\n        this.collapsedCards = [index];\n      }\n    },\n    isCollapsed(index) {\n      return !this.collapsedCards.includes(index);\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    async fetchGeoJsonData() {\n      const response = await getSingleEndpoint(\"/geojson/buildings\", \"get\");\n      if (response.status === 200) {\n        const data = response.data;\n        this.buildings = data.features.map((feature) => {\n          return wkx.Geometry.parse(Buffer.from(feature.geometry, \"hex\")).toGeoJSON();\n        });\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map.$el)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map.$el)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map.$el)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map.$el)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n  },\n  mounted() {\n    this.fetchGeoJsonData();\n  },\n  watch: {\n    buildings: {\n      immediate: true,\n      handler() {\n        this.drawBuildings();\n        this.drawApt();\n        this.drawPub();\n        this.drawRestaurants();\n      },\n    },\n  },\n};\n</script>\n\n<style>\n#vc2 {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  color: white;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .pubsButton {\n  background-color: #0700c5; \n}\n\n.button-container .restButton {\n  background-color: #ff06fa; \n}\n\n.button-container button:not(.active) {\n  opacity: 0.5;\n}\n\n.question-title {\n  font-weight: bold;\n  font-size: 18px;\n  margin-right: 10px;\n}\n\n.arrow-icon {\n  font-size: 14px;\n  transition: transform 0.3s ease;\n}\n\n.rotate {\n  transform: rotate(180deg);\n}\n\n.collapse-button {\n  background-color: transparent;\n  border: none;\n  color: #007bff;\n  cursor: pointer;\n  padding: 0;\n}\n</style>"],"mappings":"AA6BA,SAAAA,iBAAA;AACA,IAAAC,MAAA,GAAAC,OAAA,YAAAD,MAAA;AACA,MAAAE,GAAA,GAAAD,OAAA;AACA,MAAAE,EAAA,GAAAF,OAAA;AAEA,SACAG,WAAA,EACAC,kBAAA,EACAC,WAAA,EACAC,WAAA,EACAC,kBAAA,QACA;AAEA,MAAAC,EAAA,OAAAL,WAAA;AACA,MAAAM,EAAA,OAAAL,kBAAA;AACA,MAAAM,GAAA,OAAAL,WAAA;AACA,MAAAM,GAAA,OAAAL,WAAA;AACA,MAAAM,IAAA,OAAAL,kBAAA;AAEA;EACAM,IAAA;EACAC,UAAA;EACAC,KAAA;IACA;MACAC,KAAA,GACA;QACAC,KAAA;QACAC,WAAA;QACAC,IAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;MACA;MAAA,CACA;;MACAC,cAAA;MACAC,SAAA;MACAC,UAAA;MACAC,IAAA;MACAC,WAAA;MACAC,UAAA;MACAC,iBAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,KAAA;MACA,SAAAC,WAAA,CAAAD,KAAA;QACA,KAAAT,cAAA;MACA;QACA,KAAAA,cAAA,IAAAS,KAAA;MACA;IACA;IACAC,YAAAD,KAAA;MACA,aAAAT,cAAA,CAAAW,QAAA,CAAAF,KAAA;IACA;IACAG,WAAA;MACA,KAAAP,UAAA,SAAAA,UAAA;IACA;IACAQ,kBAAA;MACA,KAAAP,iBAAA,SAAAA,iBAAA;IACA;IACA,MAAAQ,iBAAA;MACA,MAAAC,QAAA,SAAArC,iBAAA;MACA,IAAAqC,QAAA,CAAAC,MAAA;QACA,MAAArB,IAAA,GAAAoB,QAAA,CAAApB,IAAA;QACA,KAAAM,SAAA,GAAAN,IAAA,CAAAsB,QAAA,CAAAC,GAAA,CAAAC,OAAA;UACA,OAAAtC,GAAA,CAAAuC,QAAA,CAAAC,KAAA,CAAA1C,MAAA,CAAA2C,IAAA,CAAAH,OAAA,CAAAI,QAAA,UAAAC,SAAA;QACA;MACA;IACA;IACAC,cAAA;MACA3C,EAAA,CAAA4C,MAAA,MAAAC,KAAA,CAAAT,GAAA,CAAAU,GAAA,EACAF,MAAA,gBACAG,KAAA,MAAA5B,SAAA,EACA6B,IAAA,CAAA1C,EAAA;IACA;IACA2C,QAAA;MACAjD,EAAA,CAAA4C,MAAA,MAAAC,KAAA,CAAAT,GAAA,CAAAU,GAAA,EACAF,MAAA,iBACAG,KAAA,MAAA3B,UAAA,EACA4B,IAAA,CAAAxC,GAAA,EAAAF,EAAA,CAAA4C,MAAA;IACA;IACAC,QAAA;MACAnD,EAAA,CAAA4C,MAAA,MAAAC,KAAA,CAAAT,GAAA,CAAAU,GAAA,EACAF,MAAA,WACAG,KAAA,MAAA1B,IAAA,EACA2B,IAAA,CAAAvC,GAAA,EAAAH,EAAA,CAAA4C,MAAA;IACA;IACAE,gBAAA;MACApD,EAAA,CAAA4C,MAAA,MAAAC,KAAA,CAAAT,GAAA,CAAAU,GAAA,EACAF,MAAA,kBACAG,KAAA,MAAAzB,WAAA,EACA0B,IAAA,CAAAtC,IAAA,EAAAJ,EAAA,CAAA4C,MAAA;IACA;EACA;EACAG,QAAA;IACA,KAAArB,gBAAA;EACA;EACAsB,KAAA;IACAnC,SAAA;MACAoC,SAAA;MACAC,QAAA;QACA,KAAAb,aAAA;QACA,KAAAM,OAAA;QACA,KAAAE,OAAA;QACA,KAAAC,eAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}