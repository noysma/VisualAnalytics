{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport { format } from 'date-fns';\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nimport { drawChart, updateChart } from '@/assets/TrafficPlot.js';\nimport { BusiestArea } from \"@/assets/BusiestArea.js\";\nconst dm = new BusiestArea();\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: {\n          active: false,\n          maxHeight: null\n        },\n        2: {\n          active: false,\n          maxHeight: null\n        },\n        3: {\n          active: false,\n          maxHeight: null\n        },\n        4: {\n          active: false,\n          maxHeight: null\n        }\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      data: [],\n      selectedWeek: 0,\n      totalWeeks: 0,\n      weekdaysSelected: false,\n      weekendSelected: false,\n      heatmapContainer: null,\n      selectedCsv1: '',\n      // File CSV selezionato 1\n      selectedCsv2: '',\n      // File CSV selezionato 2\n      heatmapId1: 'heatmap-1',\n      // ID univoco per la heat-map 1\n      heatmapId2: 'heatmap-2' // ID univoco per la heat-map 2\n    };\n  },\n\n  computed: {\n    weekDetails() {\n      const startDate = this.data[this.selectedWeek * 7]?.date;\n      const endDate = this.data[this.selectedWeek * 7 + 6]?.date;\n      const formattedStartDate = startDate ? format(new Date(startDate), 'dd MMMM yyyy') : '';\n      const formattedEndDate = endDate ? format(new Date(endDate), 'dd MMMM yyyy') : '';\n      return startDate && endDate ? `${formattedStartDate} - ${formattedEndDate}` : '';\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then(response => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy\n          }\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n      this.drawBusiestArea();\n    });\n    d3.csv('travelDuration.csv').then(data => {\n      this.data = data;\n      this.totalWeeks = Math.floor(data.length / 7);\n      drawChart(this.data.slice(0, 7), this.$refs.chart);\n    });\n  },\n  watch: {\n    selectedWeek() {\n      updateChart(this.data, this.selectedWeek, this.$refs.chart);\n    }\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select(\"g.buildings\").datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawBusiestArea() {\n      d3.select(\"#BusiestArea\").append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"700px\").append(\"g\").classed(\"density\", true).datum(this.buildings).call(dm);\n    },\n    toggleWeekdayCircles() {\n      const weekdayCircles = d3.select(\"#BusiestArea\").selectAll(\".weekday-circle\");\n      const isHidden = weekdayCircles.style(\"visibility\") === \"hidden\";\n      if (!isHidden) {\n        return; // Se il bottone \"Weekdays\" è già selezionato, esci senza fare nulla\n      }\n\n      // Nascondi le cose specifiche del bottone \"Weekend\", se selezionate\n      const weekendCircles = d3.select(\"#BusiestArea\").selectAll(\".weekend-circle\");\n      weekendCircles.style(\"visibility\", \"hidden\");\n      this.weekendSelected = false;\n\n      // Mostra le cose specifiche del bottone \"Weekdays\"\n      weekdayCircles.style(\"visibility\", \"visible\");\n      this.weekdaysSelected = true;\n    },\n    toggleWeekendCircles() {\n      const weekendCircles = d3.select(\"#BusiestArea\").selectAll(\".weekend-circle\");\n      const isHidden = weekendCircles.style(\"visibility\") === \"hidden\";\n      if (!isHidden) {\n        return; // Se il bottone \"Weekend\" è già selezionato, esci senza fare nulla\n      }\n\n      // Nascondi le cose specifiche del bottone \"Weekdays\", se selezionate\n      const weekdayCircles = d3.select(\"#BusiestArea\").selectAll(\".weekday-circle\");\n      weekdayCircles.style(\"visibility\", \"hidden\");\n      this.weekdaysSelected = false;\n\n      // Mostra le cose specifiche del bottone \"Weekend\"\n      weekendCircles.style(\"visibility\", \"visible\");\n      this.weekendSelected = true;\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","format","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","drawChart","updateChart","BusiestArea","dm","name","components","data","panels","active","maxHeight","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","selectedWeek","totalWeeks","weekdaysSelected","weekendSelected","heatmapContainer","selectedCsv1","selectedCsv2","heatmapId1","heatmapId2","computed","weekDetails","startDate","date","endDate","formattedStartDate","Date","formattedEndDate","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","drawBusiestArea","csv","Math","floor","length","slice","$refs","chart","watch","methods","toggleAccordion","section","select","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","toggleRestaurants","append","attr","classed","toggleWeekdayCircles","weekdayCircles","selectAll","isHidden","style","weekendCircles","toggleWeekendCircles"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div id=\"vc2\" class=\"vc2-container\">\n    <h1 class=\"vc2Title\">Challenge 2: Patterns of Life</h1>\n    <p>\n      Considers the patterns of daily life throughout the city.\n      You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n    </p>\n  \n    <!-- QUESTION 1 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(1)\">\n      Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify.\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"legend\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n      </svg>\n    </div>\n\n    <!-- QUESTION 2 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(2)\">\n      Where are the busiest areas in Engagement?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"bottle-btn\">\n            <button size=\"sm\" @click=\"toggleWeekdayCircles\" class=\"weekdaysButton\" :class=\"{ 'selected': weekdaysSelected }\">Weekdays</button>\n            <button size=\"sm\" @click=\"toggleWeekendCircles\" class=\"weekendButton\" :class=\"{ 'selected': weekendSelected }\">Weekend</button>\n          </div>\n        </div>\n      </div>\n      <div id=\"BusiestArea\"></div>\n    </div>\n\n    <!-- QUESTION 3 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(3)\">\n      Participants have given permission to have their daily routines captured. Choose two different participants with different routines and describe their daily patterns.\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <div class=\"heatmap-container\">\n      <b-row>\n        <b-col>\n          <div>\n            <label for=\"csvSelect1\">Select CSV 1: </label>\n            <select id=\"csvSelect1\" v-model=\"selectedCsv1\" @change=\"handleCsvSelect1\">\n              <option value=\"\">-- Select CSV File --</option>\n              <option value=\"routine_179.csv\">Routine 1</option>\n              <option value=\"routine_728.csv\">Routine 2</option>\n              <option value=\"routine_902.csv\">Routine 3</option>\n              <option value=\"routine_911.csv\">Routine 4</option>\n            </select>\n          </div>\n          <div class=\"heatmap\" :id=\"heatmapId1\"></div>\n        </b-col>\n        <b-col>\n          <div>\n            <label for=\"csvSelect2\">Select CSV 2: </label>\n            <select id=\"csvSelect2\" v-model=\"selectedCsv2\" @change=\"handleCsvSelect2\">\n              <option value=\"\">-- Select CSV File --</option>\n              <option value=\"routine_179.csv\">Routine 1</option>\n              <option value=\"routine_728.csv\">Routine 2</option>\n              <option value=\"routine_902.csv\">Routine 3</option>\n              <option value=\"routine_911.csv\">Routine 4</option>\n            </select>\n          </div>\n          <div class=\"heatmap\" :id=\"heatmapId2\"></div>\n        </b-col>\n      </b-row>\n    </div>\n\n    </div>\n\n    <!-- QUESTION 4 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(4)\">Over the span of the dataset, how do patterns change?</button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[4].maxHeight }\">\n      <div>\n        <div ref=\"chart\"></div>\n        <input type=\"range\" v-model=\"selectedWeek\" min=\"0\" :max=\"totalWeeks - 1\">\n        <p>{{ weekDetails }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport { format } from 'date-fns';\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nimport { drawChart, updateChart } from '@/assets/TrafficPlot.js';\n\nimport { BusiestArea } from \"@/assets/BusiestArea.js\";\nconst dm = new BusiestArea();\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      data: [],\n      selectedWeek: 0,\n      totalWeeks: 0,\n      weekdaysSelected: false,\n      weekendSelected: false,\n      heatmapContainer: null,\n      selectedCsv1: '', // File CSV selezionato 1\n      selectedCsv2: '', // File CSV selezionato 2\n      heatmapId1: 'heatmap-1', // ID univoco per la heat-map 1\n      heatmapId2: 'heatmap-2', // ID univoco per la heat-map 2\n    };\n  },\n  computed: {\n    weekDetails() {\n      const startDate = this.data[this.selectedWeek * 7]?.date;\n      const endDate = this.data[this.selectedWeek * 7 + 6]?.date;\n      const formattedStartDate = startDate ? format(new Date(startDate), 'dd MMMM yyyy') : '';\n      const formattedEndDate = endDate ? format(new Date(endDate), 'dd MMMM yyyy') : '';\n      return startDate && endDate ? `${formattedStartDate} - ${formattedEndDate}` : '';\n    },\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then((response) => {\n      this.buildings = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then((response) => {\n        this.apartments = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then((response) => {\n        this.pubs = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then((response) => {\n        this.restaurants = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n      this.drawBusiestArea()\n    });\n    d3.csv('travelDuration.csv').then((data) => {\n      this.data = data;\n      this.totalWeeks = Math.floor(data.length / 7);\n      drawChart(this.data.slice(0, 7), this.$refs.chart);\n    });\n  },\n  watch: {\n    selectedWeek() {\n      updateChart(this.data, this.selectedWeek, this.$refs.chart);\n    },\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawBusiestArea() {\n      d3.select(\"#BusiestArea\")\n        .append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"700px\")\n        .append(\"g\")\n        .classed(\"density\", true)\n        .datum(this.buildings)\n        .call(dm);\n    },\n    toggleWeekdayCircles() {\n      const weekdayCircles = d3.select(\"#BusiestArea\").selectAll(\".weekday-circle\");\n      const isHidden = weekdayCircles.style(\"visibility\") === \"hidden\";\n      \n      if (!isHidden) {\n        return; // Se il bottone \"Weekdays\" è già selezionato, esci senza fare nulla\n      }\n      \n      // Nascondi le cose specifiche del bottone \"Weekend\", se selezionate\n      const weekendCircles = d3.select(\"#BusiestArea\").selectAll(\".weekend-circle\");\n      weekendCircles.style(\"visibility\", \"hidden\");\n      this.weekendSelected = false;\n      \n      // Mostra le cose specifiche del bottone \"Weekdays\"\n      weekdayCircles.style(\"visibility\", \"visible\");\n      this.weekdaysSelected = true;\n    },\n    toggleWeekendCircles() {\n      const weekendCircles = d3.select(\"#BusiestArea\").selectAll(\".weekend-circle\");\n      const isHidden = weekendCircles.style(\"visibility\") === \"hidden\";\n      \n      if (!isHidden) {\n        return; // Se il bottone \"Weekend\" è già selezionato, esci senza fare nulla\n      }\n      \n      // Nascondi le cose specifiche del bottone \"Weekdays\", se selezionate\n      const weekdayCircles = d3.select(\"#BusiestArea\").selectAll(\".weekday-circle\");\n      weekdayCircles.style(\"visibility\", \"hidden\");\n      this.weekdaysSelected = false;\n      \n      // Mostra le cose specifiche del bottone \"Weekend\"\n      weekendCircles.style(\"visibility\", \"visible\");\n      this.weekendSelected = true;\n    },\n  },\n};\n</script>\n\n<style>\n  #vc2 {\n    position: relative;\n  }\n\n  .vc2Title {\n    color: #8ECAE6;\n  }\n\n  /* CARDS STYLE */\n  .accordion2 {\n    background-color: #eee;\n    color: #444;\n    cursor: pointer;\n    padding: 18px;\n    width: 100%;\n    border: none;\n    text-align: left;\n    outline: none;\n    font-size: 15px;\n    text-align: justify;\n    transition: 0.4s;\n    margin-bottom: 20px;\n    border-radius: 20px;\n  }\n\n  .active,\n  .accordion2:hover {\n    background-color: #8ECAE6;\n    color: white;\n  }\n\n  .panel {\n    padding: 0 18px;\n    background-color: white;\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.2s ease-out;\n  }\n\n  /* DISTINCT AREA STYLE */\n  svg g.buildings {\n    fill-opacity: 0.3;\n    stroke: grey;\n  }\n\n  .button-container {\n    position: absolute;\n    top: 10px;\n    right: 30px;\n  }\n\n  .button-container button {\n    margin-left: 10px;\n    background-color: transparent;\n    border: none;\n    color: white;\n    border-radius: 20px;\n    padding: 10px 20px;\n    transition: background-color 0.3s ease;\n    opacity: 0.3;\n  }\n\n  .button-container .active {\n    opacity: 1;\n  }\n\n  .button-container .pubsButton {\n    background-color: #0051ba;\n  }\n\n  .button-container .restButton {\n    background-color: #cc3333;\n  }\n\n  /* BUSIEST AREA STYLE */\n  .bottle-btn {\n    position: absolute;\n    top: 10px;\n    right: 30px;\n  }\n\n  button.weekdaysButton,\n  button.weekendButton {\n    margin-left: 10px;\n    background-color: transparent;\n    border: none;\n    border-radius: 20px;\n    padding: 10px 20px;\n    transition: background-color 0.3s ease, opacity 0.3s ease;\n    opacity: 0.3;\n    color: white;\n  }\n\n  button.weekdaysButton,\n  button.weekendButton {\n    color: white;\n  }\n\n  button.weekdaysButton {\n    background-color: red;\n  }\n\n  button.weekendButton {\n    background-color: blue;\n  }\n\n  button.weekdaysButton,\n  button.weekendButton {\n    opacity: 0.3;\n    color: white;\n    transition: opacity 0.3s ease;\n  }\n\n  button.weekdaysButton.selected,\n  button.weekendButton.selected {\n    opacity: 1;\n  }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}