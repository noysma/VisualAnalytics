{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nimport { DensityMap } from \"@/assets/DensityMap\";\nconst dm = new DensityMap();\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then(response => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy\n          }\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n      this.drawDensity();\n    });\n  },\n  methods: {\n    toggleCollapse(card) {\n      card.isCollapsed = !card.isCollapsed;\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select(\"g.buildings\").datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawDensity() {\n      d3.select(\"#density-map\").append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"700px\").append(\"g\").classed(\"density\", true).datum(this.buildings).call(dm);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","DensityMap","dm","name","components","data","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","drawDensity","methods","toggleCollapse","card","isCollapsed","select","$refs","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","toggleRestaurants","append","attr","classed"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n\n<template>\n  <div id=\"vc2\" class=\"vc2-container\">\n    <h1>Challenge 2: Patterns of Life</h1>\n    <p>\n      Considers the patterns of daily life throughout the city.\n      You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n    </p>\n\n<button class=\"accordion\">Section 1</button>\n<div class=\"panel\">\n  <div class=\"row justify-content-center\">\n      <div class=\"col-md-8\">\n        <div class=\"button-container\">\n          <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n          <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"map-container\">\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"legend\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n      </svg>\n    </div>\n</div>\n\n<button class=\"accordion\">Section 2</button>\n<div class=\"panel\">\n  <div id=\"density-map\"></div>\n</div>\n\n\n\n    \n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nimport {\n  DensityMap,\n} from \"@/assets/DensityMap\";\n\nconst dm = new DensityMap();\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then((response) => {\n      this.buildings = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then((response) => {\n        this.apartments = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then((response) => {\n        this.pubs = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then((response) => {\n        this.restaurants = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n      this.drawDensity();\n    });\n  },\n  methods: {\n    toggleCollapse(card) {\n      card.isCollapsed = !card.isCollapsed;\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawDensity() {\n      d3.select(\"#density-map\")\n        .append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"700px\")\n        .append(\"g\")\n        .classed(\"density\", true)\n        .datum(this.buildings)\n        .call(dm);\n    },\n  },\n};\n</script>\n\n<style>\n#vc2 {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  color: white;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .pubsButton {\n  background-color: #0700c5; \n}\n\n.button-container .restButton {\n  background-color: #ff06fa; \n}\n\n.button-container button:not(.active) {\n  opacity: 0.5;\n}\n\n/* STILE DENSITY */\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n/* Style the buttons that are used to open and close the accordion panel */\n.accordion {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  text-align: left;\n  border: none;\n  outline: none;\n  transition: 0.4s;\n}\n\n/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */\n.active, .accordion:hover {\n  background-color: #ccc;\n}\n\n/* Style the accordion panel. Note: hidden by default */\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  display: none;\n  overflow: hidden;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}