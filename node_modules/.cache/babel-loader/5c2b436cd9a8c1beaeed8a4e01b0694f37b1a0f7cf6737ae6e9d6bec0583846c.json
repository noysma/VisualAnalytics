{"ast":null,"code":"// Nome del file: chart.js\n\nimport * as d3 from 'd3';\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 40\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      // Crea il contenitore SVG per il grafico\n      const svg = d3.select('#chart-container').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Carica i dati dal file CSV\n      d3.csv('data.csv', (error, data) => {\n        if (error) throw error;\n\n        // Formato delle date\n        const parseDate = d3.timeParse('%Y-%m-%d');\n        const formatWeek = d3.timeFormat('%e %B');\n\n        // Converti le date nel formato corretto\n        data.forEach(d => {\n          d.date = parseDate(d.date);\n          d.travelDuration = +d.travelDuration;\n        });\n\n        // Crea una scala per l'asse x (giorni della settimana)\n        const x = d3.scaleBand().range([0, width]).padding(0.1).domain(data.map(d => d.date.getDay()));\n\n        // Crea una scala per l'asse y (travelDuration)\n        const y = d3.scaleLinear().range([height, 0]).domain([0, d3.max(data, d => d.travelDuration)]);\n\n        // Crea gli assi x e y\n        svg.append('g').attr('class', 'axis axis-x').attr('transform', `translate(0,${height})`).call(d3.axisBottom(x).tickFormat(d => this.getDayOfWeek(d)));\n        svg.append('g').attr('class', 'axis axis-y').call(d3.axisLeft(y));\n\n        // Crea le barre del grafico\n        svg.selectAll('.bar').data(data).enter().append('rect').attr('class', 'bar').attr('x', d => x(d.date.getDay())).attr('y', d => y(d.travelDuration)).attr('width', x.bandwidth()).attr('height', d => height - y(d.travelDuration));\n      });\n    },\n    getDayOfWeek(day) {\n      const days = ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'];\n      return days[day];\n    }\n  }\n};\n\n// import * as d3 from 'd3';\n\n// export function createBarChart(data) {\n//   // Impostazioni del grafico\n//   var margin = { top: 20, right: 20, bottom: 30, left: 40 };\n//   var width = 800 - margin.left - margin.right;\n//   var height = 400 - margin.top - margin.bottom;\n\n//   // Creazione dello scale per gli assi\n//   var x = d3.scaleBand()\n//     .range([0, width])\n//     .padding(0.1);\n\n//   var y = d3.scaleLinear()\n//     .range([height, 0]);\n\n//   // Creazione dell'elemento SVG\n//   var svg = d3.select(\"#chart\")\n//     .attr(\"width\", width + margin.left + margin.right)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//     .append(\"g\")\n//     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//   // Funzione per aggiornare il grafico\n//   function updateChart(startDate) {\n//     // Calcola la data di fine della settimana\n//     var endDate = d3.timeDay.offset(startDate, 6);\n\n//     // Filtra i dati per la settimana selezionata\n//     var filteredData = data.filter(function (d) {\n//       var date = new Date(d.date);\n//       return date >= startDate && date <= endDate;\n//     });\n\n//     // Calcola la media settimanale\n//     var averageDuration = d3.mean(filteredData, function (d) { return d.travelDuration; });\n\n//     // Aggiorna il dominio degli assi\n//     var weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n//     x.domain(weekdays);\n//     y.domain([0, d3.max(filteredData, function (d) { return d.travelDuration; })]);\n\n//     // Rimuovi eventuali barre precedenti e linea media\n//     svg.selectAll(\".bar\").remove();\n//     svg.selectAll(\".average-line\").remove();\n\n//     // Aggiungi le nuove barre\n//     svg.selectAll(\".bar\")\n//       .data(filteredData)\n//       .enter().append(\"rect\")\n//       .attr(\"class\", \"bar\")\n//       .attr(\"x\", function (d) { return x(weekdays[new Date(d.date).getDay()]); })\n//       .attr(\"width\", x.bandwidth())\n//       .attr(\"y\", function (d) { return y(d.travelDuration); })\n//       .attr(\"height\", function (d) { return height - y(d.travelDuration); });\n\n//     // Aggiungi la linea della media settimanale\n//     svg.append(\"line\")\n//       .attr(\"class\", \"average-line\")\n//       .attr(\"x1\", 0)\n//       .attr(\"x2\", width)\n//       .attr(\"y1\", y(averageDuration))\n//       .attr(\"y2\", y(averageDuration))\n//       .attr(\"stroke\", \"red\")\n//       .attr(\"stroke-dasharray\", \"4\");\n//   }\n\n//   // Inizializza il grafico con la prima settimana\n//   var initialStartDate = d3.min(data, function (d) { return new Date(d.date); });\n//   updateChart(initialStartDate);\n\n//   // Aggiungi asse x\n//   svg.append(\"g\")\n//     .attr(\"class\", \"x-axis\")\n//     .attr(\"transform\", \"translate(0,\" + height + \")\")\n//     .call(d3.axisBottom(x));\n\n//   // Esporta la funzione di aggiornamento per poterla utilizzare nell'oggetto Vue\n//   return updateChart;\n// }","map":{"version":3,"names":["d3","mounted","createChart","methods","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","error","data","parseDate","timeParse","formatWeek","timeFormat","forEach","d","date","travelDuration","x","scaleBand","range","padding","domain","map","getDay","y","scaleLinear","max","call","axisBottom","tickFormat","getDayOfWeek","axisLeft","selectAll","enter","bandwidth","day","days"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["// Nome del file: chart.js\n\nimport * as d3 from 'd3';\n\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      // Crea il contenitore SVG per il grafico\n      const svg = d3\n        .select('#chart-container')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Carica i dati dal file CSV\n      d3.csv('data.csv', (error, data) => {\n        if (error) throw error;\n\n        // Formato delle date\n        const parseDate = d3.timeParse('%Y-%m-%d');\n        const formatWeek = d3.timeFormat('%e %B');\n\n        // Converti le date nel formato corretto\n        data.forEach((d) => {\n          d.date = parseDate(d.date);\n          d.travelDuration = +d.travelDuration;\n        });\n\n        // Crea una scala per l'asse x (giorni della settimana)\n        const x = d3\n          .scaleBand()\n          .range([0, width])\n          .padding(0.1)\n          .domain(data.map((d) => d.date.getDay()));\n\n        // Crea una scala per l'asse y (travelDuration)\n        const y = d3\n          .scaleLinear()\n          .range([height, 0])\n          .domain([0, d3.max(data, (d) => d.travelDuration)]);\n\n        // Crea gli assi x e y\n        svg\n          .append('g')\n          .attr('class', 'axis axis-x')\n          .attr('transform', `translate(0,${height})`)\n          .call(d3.axisBottom(x).tickFormat((d) => this.getDayOfWeek(d)));\n\n        svg.append('g').attr('class', 'axis axis-y').call(d3.axisLeft(y));\n\n        // Crea le barre del grafico\n        svg\n          .selectAll('.bar')\n          .data(data)\n          .enter()\n          .append('rect')\n          .attr('class', 'bar')\n          .attr('x', (d) => x(d.date.getDay()))\n          .attr('y', (d) => y(d.travelDuration))\n          .attr('width', x.bandwidth())\n          .attr('height', (d) => height - y(d.travelDuration));\n      });\n    },\n    getDayOfWeek(day) {\n      const days = ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'];\n      return days[day];\n    },\n  },\n};\n\n\n// import * as d3 from 'd3';\n\n// export function createBarChart(data) {\n//   // Impostazioni del grafico\n//   var margin = { top: 20, right: 20, bottom: 30, left: 40 };\n//   var width = 800 - margin.left - margin.right;\n//   var height = 400 - margin.top - margin.bottom;\n\n//   // Creazione dello scale per gli assi\n//   var x = d3.scaleBand()\n//     .range([0, width])\n//     .padding(0.1);\n\n//   var y = d3.scaleLinear()\n//     .range([height, 0]);\n\n//   // Creazione dell'elemento SVG\n//   var svg = d3.select(\"#chart\")\n//     .attr(\"width\", width + margin.left + margin.right)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//     .append(\"g\")\n//     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//   // Funzione per aggiornare il grafico\n//   function updateChart(startDate) {\n//     // Calcola la data di fine della settimana\n//     var endDate = d3.timeDay.offset(startDate, 6);\n\n//     // Filtra i dati per la settimana selezionata\n//     var filteredData = data.filter(function (d) {\n//       var date = new Date(d.date);\n//       return date >= startDate && date <= endDate;\n//     });\n\n//     // Calcola la media settimanale\n//     var averageDuration = d3.mean(filteredData, function (d) { return d.travelDuration; });\n\n//     // Aggiorna il dominio degli assi\n//     var weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n//     x.domain(weekdays);\n//     y.domain([0, d3.max(filteredData, function (d) { return d.travelDuration; })]);\n\n//     // Rimuovi eventuali barre precedenti e linea media\n//     svg.selectAll(\".bar\").remove();\n//     svg.selectAll(\".average-line\").remove();\n\n//     // Aggiungi le nuove barre\n//     svg.selectAll(\".bar\")\n//       .data(filteredData)\n//       .enter().append(\"rect\")\n//       .attr(\"class\", \"bar\")\n//       .attr(\"x\", function (d) { return x(weekdays[new Date(d.date).getDay()]); })\n//       .attr(\"width\", x.bandwidth())\n//       .attr(\"y\", function (d) { return y(d.travelDuration); })\n//       .attr(\"height\", function (d) { return height - y(d.travelDuration); });\n\n//     // Aggiungi la linea della media settimanale\n//     svg.append(\"line\")\n//       .attr(\"class\", \"average-line\")\n//       .attr(\"x1\", 0)\n//       .attr(\"x2\", width)\n//       .attr(\"y1\", y(averageDuration))\n//       .attr(\"y2\", y(averageDuration))\n//       .attr(\"stroke\", \"red\")\n//       .attr(\"stroke-dasharray\", \"4\");\n//   }\n\n//   // Inizializza il grafico con la prima settimana\n//   var initialStartDate = d3.min(data, function (d) { return new Date(d.date); });\n//   updateChart(initialStartDate);\n\n//   // Aggiungi asse x\n//   svg.append(\"g\")\n//     .attr(\"class\", \"x-axis\")\n//     .attr(\"transform\", \"translate(0,\" + height + \")\")\n//     .call(d3.axisBottom(x));\n\n//   // Esporta la funzione di aggiornamento per poterla utilizzare nell'oggetto Vue\n//   return updateChart;\n// }\n\n"],"mappings":"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,EAAGS,CAAC,IAAKb,MAAM,GAAGuB,CAAC,CAACV,CAAC,CAACE,cAAc,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC;IACDc,YAAYA,CAACK,GAAG,EAAE;MAChB,MAAMC,IAAI,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC;MAC3F,OAAOA,IAAI,CAACD,GAAG,CAAC;IAClB;EACF;AACF,CAAC;;AAGD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}