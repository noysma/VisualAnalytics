{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      collapse1: false\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then(response => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy\n          }\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select(\"g.buildings\").datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    toggleCollapse1() {\n      this.collapse1 = !this.collapse1;\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","name","components","data","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","collapse1","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","methods","select","$refs","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","toggleRestaurants","toggleCollapse1"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<template>\n  <div id=\"vc2\">\n    <div class=\"container\">\n      <h1>Challenge 2: Patterns of Life</h1>\n      <p>\n        Considers the patterns of daily life throughout the city.\n        You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n      </p>\n      <div class=\"card-container\">\n        <b-card no-body>\n          <b-card-header header-tag=\"header\" class=\"p-3\" role=\"tab\" @click=\"toggleCollapse1\">\n            <div class=\"d-flex flex-column align-items-center\">\n              <h2 class=\"question-title text-left\">Question 1</h2>\n              <p class=\"question-description\">Assuming the volunteers are representative of the cityâ€™s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.</p>\n              <span class=\"arrow-icon\" :class=\"{ 'rotate': collapse1 }\" @click.stop=\"toggleCollapse1\">&#x25BE;</span>\n            </div>\n          </b-card-header>\n          <b-collapse id=\"collapse1\" v-model=\"collapse1\" accordion=\"my-accordion\" role=\"tabpanel\">\n            <b-card-body>\n              <p>Ecco un esempio di testo all'interno del box collassabile.</p>\n              <p>Puoi inserire ulteriori contenuti qui.</p>\n              <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n              <div class=\"map-container\">\n                <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                  <g class=\"buildings\"></g>\n                  <g class=\"legend\"></g>\n                  <g class=\"apartments\"></g>\n                  <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n                  <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n                </svg>\n              </div>\n            </b-card-body>\n          </b-collapse>\n        </b-card>\n      </div>\n      \n    </div>\n  </div>\n</template>\n\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      collapse1: false,\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then((response) => {\n      this.buildings = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then((response) => {\n        this.apartments = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then((response) => {\n        this.pubs = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then((response) => {\n        this.restaurants = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    toggleCollapse1() {\n      this.collapse1 = !this.collapse1;\n    },\n  },\n};\n</script>\n\n<style>\n#vc2 {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  color: white;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .active {\n  opacity: 1; /* OpacitÃ  al 100% */\n}\n\n.button-container .pubsButton {\n  background-color: #0700c5; \n}\n\n.button-container .restButton {\n  background-color: #ff06fa; \n}\n\n.button-container button:not(.active) {\n  opacity: 0.5; /* OpacitÃ  al 50% */\n}\n\n.question-title {\n  font-weight: bold;\n  font-size: 18px;\n  margin-right: 10px;\n}\n\n\n.arrow-icon {\n  font-size: 14px;\n  transition: transform 0.3s ease;\n}\n\n.rotate {\n  transform: rotate(180deg);\n}\n\n.collapse-button {\n  background-color: transparent;\n  border: none;\n  color: #007bff;\n  cursor: pointer;\n  padding: 0;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}