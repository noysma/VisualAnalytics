{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n      getSingleEndpoint({\n        participantId: 1010\n      }, 'TravelJournal').then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const totalTravelTimes = weekdays.map(day => {\n          const dayTravelTimes = parsedData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n          const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n          return {\n            day,\n            totalTravelTime\n          };\n        });\n\n        // Scala per gli assi x e y\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n        const yTicks = d3.range(0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30, 30); // Genera intervalli di 30 minuti per l'asse y\n        const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30]).range([height, 0]);\n\n        // Creazione degli assi x e y\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n          const hours = Math.floor(d / 60); // Calcola le ore\n          const minutes = d % 60; // Calcola i minuti\n          return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`; // Formatta l'etichetta come \"hh:mm\"\n        });\n\n        // Aggiungi gli assi al grafico\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n        // Crea le barre del grafico\n        chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","mounted","createChart","methods","participantId","then","response","travelJournal","data","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","weekdays","totalTravelTimes","day","dayTravelTimes","filter","getDay","indexOf","totalTravelTime","sum","x","scaleBand","domain","range","padding","yTicks","max","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","Math","floor","minutes","call","selectAll","enter","bandwidth"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div ref=\"chartContainer\"></div>\n  </template>\n  \n  <script>\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  \n  export default {\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n        getSingleEndpoint({participantId:1010}, 'TravelJournal').then((response) => {\n        this.travelJournal = response.data.map(d => ({\n            type: \"Feature\",\n            properties: {\n              travelStartTime: d.travelStartTime,\n              travelStartLocationId: d.travelStartLocationId,\n              travelEndLocationId: d.travelEndLocationId,\n              checkInTime: d.checkInTime,\n              checkOutTime: d.checkOutTime,\n              endingBalance: d.endingBalance,\n              travelEndTime: d.travelEndTime,\n              participantId: d.participantId,\n              purpose: d.purpose,\n              startingBalance: d.startingBalance,\n              id: d.id\n            },\n        }));          const data = response.data;\n  \n          // Parsing delle date e calcolo della durata dei viaggi in minuti\n          const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n          });\n  \n          // Crea il grafico utilizzando D3\n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          const chart = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n          // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map((day) => {\n            const dayTravelTimes = parsedData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n            return { day, totalTravelTime };\n          });\n  \n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n  \n          const yTicks = d3.range(0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30, 30); // Genera intervalli di 30 minuti per l'asse y\n          const y = d3\n            .scaleLinear()\n            .domain([0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30])\n            .range([height, 0]);\n  \n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3\n            .axisLeft(y)\n            .tickValues(yTicks)\n            .tickFormat((d) => {\n              const hours = Math.floor(d / 60); // Calcola le ore\n              const minutes = d % 60; // Calcola i minuti\n              return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`; // Formatta l'etichetta come \"hh:mm\"\n            });\n  \n          // Aggiungi gli assi al grafico\n          chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n  \n          chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n  \n          // Crea le barre del grafico\n          chart\n            .selectAll(\".bar\")\n            .data(totalTravelTimes)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.day))\n            .attr(\"y\", (d) => y(d.totalTravelTime))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => height - y(d.totalTravelTime));\n        });\n      },\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}