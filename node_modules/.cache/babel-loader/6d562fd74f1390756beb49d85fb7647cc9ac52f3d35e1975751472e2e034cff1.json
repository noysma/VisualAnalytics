{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  mounted() {\n    // Carica il file CSV\n    d3.csv(\"travelDuration.csv\").then(data => {\n      // Trasforma i valori di travelDuration in ore\n      data.forEach(d => {\n        d.travelDuration = +d.travelDuration / 60; // Conversione da minuti ad ore\n      });\n\n      // Inizializza i dati e il grafico\n      this.initData(data);\n      this.initChart();\n    });\n  },\n  methods: {\n    initData(data) {\n      // Ottieni l'elenco delle settimane uniche presenti nei dati\n      this.weeks = [...new Set(data.map(d => this.getWeek(d.date)))];\n\n      // Ordina le settimane in ordine crescente\n      this.weeks.sort((a, b) => new Date(a) - new Date(b));\n\n      // Imposta la settimana corrente come la prima settimana disponibile\n      this.currentWeek = this.weeks[0];\n\n      // Crea i dati per il grafico utilizzando la settimana corrente\n      this.updateChartData(data);\n    },\n    initChart() {\n      // Crea il contenitore SVG per il grafico\n      this.svg = d3.select(\"#chart\").append(\"svg\").attr(\"width\", this.chartWidth).attr(\"height\", this.chartHeight);\n\n      // Crea le scale x e y\n      this.xScale = d3.scaleBand().range([0, this.chartWidth]).padding(0.1).domain([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]);\n      this.yScale = d3.scaleLinear().range([this.chartHeight, 0]);\n\n      // Crea gli assi x e y\n      this.xAxis = this.svg.append(\"g\").attr(\"transform\", \"translate(0,\" + this.chartHeight + \")\");\n      this.yAxis = this.svg.append(\"g\");\n\n      // Aggiorna il grafico\n      this.updateChart();\n    },\n    updateChartData(data) {\n      // Filtra i dati per la settimana corrente\n      this.chartData = data.filter(d => this.getWeek(d.date) === this.currentWeek);\n    },\n    updateChart() {\n      // Aggiorna la scala y\n      this.yScale.domain([0, d3.max(this.chartData, d => d.travelDuration)]);\n\n      // Aggiorna l'asse x\n      this.xAxis.call(d3.axisBottom(this.xScale));\n\n      // Aggiorna l'asse y\n      this.yAxis.call(d3.axisLeft(this.yScale));\n\n      // Aggiorna le barre nel grafico\n      this.svg.selectAll(\".bar\").data(this.chartData).join(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => this.xScale(d.day)).attr(\"y\", d => this.yScale(d.travelDuration)).attr(\"width\", this.xScale.bandwidth()).attr(\"height\", d => this.chartHeight - this.yScale(d.travelDuration));\n    },\n    getWeek(date) {\n      // Restituisce la settimana nel formato \"1 January - 7 January\" per una data specifica\n      var startDate = new Date(date);\n      var endDate = new Date(startDate);\n      endDate.setDate(startDate.getDate() + 6);\n      var options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      var startDateFormat = startDate.toLocaleDateString(undefined, options);\n      var endDateFormat = endDate.toLocaleDateString(undefined, options);\n      return startDateFormat + \" - \" + endDateFormat;\n    }\n  },\n  data() {\n    return {\n      chartWidth: 600,\n      chartHeight: 400,\n      weeks: [],\n      currentWeek: \"\",\n      chartData: []\n    };\n  }\n};","map":{"version":3,"names":["d3","mounted","csv","then","data","forEach","d","travelDuration","initData","initChart","methods","weeks","Set","map","getWeek","date","sort","a","b","Date","currentWeek","updateChartData","svg","select","append","attr","chartWidth","chartHeight","xScale","scaleBand","range","padding","domain","yScale","scaleLinear","xAxis","yAxis","updateChart","chartData","filter","max","call","axisBottom","axisLeft","selectAll","join","day","bandwidth","startDate","endDate","setDate","getDate","options","year","month","startDateFormat","toLocaleDateString","undefined","endDateFormat"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names-->\n<template>\n  <div>\n    <h1>Travel Duration Chart</h1>\n    <div id=\"chart\"></div>\n    <div id=\"slider\"></div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  mounted() {\n    // Carica il file CSV\n    d3.csv(\"travelDuration.csv\").then(data => {\n      // Trasforma i valori di travelDuration in ore\n      data.forEach(d => {\n        d.travelDuration = +d.travelDuration / 60; // Conversione da minuti ad ore\n      });\n\n      // Inizializza i dati e il grafico\n      this.initData(data);\n      this.initChart();\n    });\n  },\n  methods: {\n    initData(data) {\n      // Ottieni l'elenco delle settimane uniche presenti nei dati\n      this.weeks = [...new Set(data.map(d => this.getWeek(d.date)))];\n\n      // Ordina le settimane in ordine crescente\n      this.weeks.sort((a, b) => new Date(a) - new Date(b));\n\n      // Imposta la settimana corrente come la prima settimana disponibile\n      this.currentWeek = this.weeks[0];\n\n      // Crea i dati per il grafico utilizzando la settimana corrente\n      this.updateChartData(data);\n    },\n    initChart() {\n      // Crea il contenitore SVG per il grafico\n      this.svg = d3\n        .select(\"#chart\")\n        .append(\"svg\")\n        .attr(\"width\", this.chartWidth)\n        .attr(\"height\", this.chartHeight);\n\n      // Crea le scale x e y\n      this.xScale = d3\n        .scaleBand()\n        .range([0, this.chartWidth])\n        .padding(0.1)\n        .domain([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]);\n\n      this.yScale = d3\n        .scaleLinear()\n        .range([this.chartHeight, 0]);\n\n      // Crea gli assi x e y\n      this.xAxis = this.svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + this.chartHeight + \")\");\n\n      this.yAxis = this.svg.append(\"g\");\n\n      // Aggiorna il grafico\n      this.updateChart();\n    },\n    updateChartData(data) {\n      // Filtra i dati per la settimana corrente\n      this.chartData = data.filter(d => this.getWeek(d.date) === this.currentWeek);\n    },\n    updateChart() {\n      // Aggiorna la scala y\n      this.yScale.domain([0, d3.max(this.chartData, d => d.travelDuration)]);\n\n      // Aggiorna l'asse x\n      this.xAxis.call(d3.axisBottom(this.xScale));\n\n      // Aggiorna l'asse y\n      this.yAxis.call(d3.axisLeft(this.yScale));\n\n      // Aggiorna le barre nel grafico\n      this.svg\n        .selectAll(\".bar\")\n        .data(this.chartData)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => this.xScale(d.day))\n        .attr(\"y\", d => this.yScale(d.travelDuration))\n        .attr(\"width\", this.xScale.bandwidth())\n        .attr(\"height\", d => this.chartHeight - this.yScale(d.travelDuration));\n    },\n    getWeek(date) {\n      // Restituisce la settimana nel formato \"1 January - 7 January\" per una data specifica\n      var startDate = new Date(date);\n      var endDate = new Date(startDate);\n      endDate.setDate(startDate.getDate() + 6);\n\n      var options = { year: 'numeric', month: 'long', day: 'numeric' };\n      var startDateFormat = startDate.toLocaleDateString(undefined, options);\n      var endDateFormat = endDate.toLocaleDateString(undefined, options);\n\n      return startDateFormat + \" - \" + endDateFormat;\n    },\n  },\n  data() {\n    return {\n      chartWidth: 600,\n      chartHeight: 400,\n      weeks: [],\n      currentWeek: \"\",\n      chartData: [],\n    };\n  },\n};\n</script>\n\n<style>\n#chart {\n  margin-top: 20px;\n}\n.bar {\n  fill: steelblue;\n}\n</style>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- eslint-disable vue/multi-word-component-names\n<template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <br>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div id=\"bar-chart\"></div>  \n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n\n    <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n    <div ref=\"chartContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nimport { createBarChart } from \"@/assets/CitizenPurchase\";\n\nconst bm = new BuildingMap();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n\n    getSingleEndpoint({ participantId: 2 }, 'FinancialJournal').then((response) => {\n      this.FinancialJournal = response.data.map(d => ({\n        type: \"Feature\",\n        properties: {\n          amount: d.amount,\n          category: d.category,\n          timestamp: d.timestamp,\n          id: d.id,\n        },\n      }));\n\n      // Rimuovi la selezione delle barre precedenti\n      d3.select(\"#bar-chart\").selectAll(\".bar\").remove();\n      createBarChart(this.FinancialJournal);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select('g.apartments')\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}