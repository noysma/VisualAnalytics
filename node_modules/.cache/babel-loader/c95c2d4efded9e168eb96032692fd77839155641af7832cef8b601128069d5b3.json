{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n      getSingleEndpoint({\n        participantId: 1010\n      }, \"TravelJournal\").then(response => {\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Calcola la densità dei viaggi per ogni giorno della settimana\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const densityData = weekdays.map(day => {\n          const dayTravelTimes = parsedData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n          const density = dayTravelTimes.length;\n          return {\n            day,\n            density\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Scala per gli assi x e y\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n        const y = d3.scaleLinear().domain([0, d3.max(densityData, d => d.density)]).range([height, 0]);\n\n        // Creazione degli assi x e y\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y);\n\n        // Aggiungi gli assi al grafico\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n        // Calcola la larghezza delle barre\n        const barWidth = x.bandwidth();\n\n        // Crea le barre cumulative del grafico\n        let cumulativeX = 0;\n        chart.selectAll(\".bar\").data(densityData).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", (d, i) => {\n          const xPosition = cumulativeX;\n          cumulativeX += barWidth;\n          return xPosition;\n        }).attr(\"y\", d => y(d.density)).attr(\"width\", barWidth).attr(\"height\", d => height - y(d.density));\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","mounted","createChart","methods","participantId","then","response","data","parsedData","map","d","startDate","Date","travelStartTime","endDate","travelEndTime","travelTime","weekdays","densityData","day","dayTravelTimes","filter","getDay","indexOf","density","length","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","x","scaleBand","domain","range","padding","y","scaleLinear","max","xAxis","axisBottom","yAxis","axisLeft","call","barWidth","bandwidth","cumulativeX","selectAll","enter","i","xPosition"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div ref=\"chartContainer\"></div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n      getSingleEndpoint({ participantId: 1010 }, \"TravelJournal\").then((response) => {\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map((d) => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return { startDate, endDate, travelTime };\n        });\n\n        // Calcola la densità dei viaggi per ogni giorno della settimana\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const densityData = weekdays.map((day) => {\n          const dayTravelTimes = parsedData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n          const density = dayTravelTimes.length;\n          return { day, density };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n\n        const svg = d3\n          .select(this.$refs.chartContainer)\n          .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom);\n\n        const chart = svg\n          .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Scala per gli assi x e y\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n        const y = d3.scaleLinear().domain([0, d3.max(densityData, (d) => d.density)]).range([height, 0]);\n\n        // Creazione degli assi x e y\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y);\n\n        // Aggiungi gli assi al grafico\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n        // Calcola la larghezza delle barre\n        const barWidth = x.bandwidth();\n\n        // Crea le barre cumulative del grafico\n        let cumulativeX = 0;\n        chart\n          .selectAll(\".bar\")\n          .data(densityData)\n          .enter()\n          .append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", (d, i) => {\n            const xPosition = cumulativeX;\n            cumulativeX += barWidth;\n            return xPosition;\n          })\n          .attr(\"y\", (d) => y(d.density))\n          .attr(\"width\", barWidth)\n          .attr(\"height\", (d) => height - y(d.density));\n      });\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}