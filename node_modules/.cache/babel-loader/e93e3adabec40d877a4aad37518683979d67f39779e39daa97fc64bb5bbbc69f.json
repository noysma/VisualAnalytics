{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  mounted() {\n    this.createScatterplot();\n  },\n  methods: {\n    createScatterplot() {\n      // set the dimensions and margins of the graph\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 60\n      };\n      const width = 460 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      // append the svg object to the component element\n      const svg = d3.select(this.$refs.scatterplot).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Read the data from your CSV file\n      d3.csv('path_to_your_csv_file.csv').then(data => {\n        // Get the maximum values for x and y axes\n        const maxX = d3.max(data, d => +d.hourlyRate);\n        const maxY = d3.max(data, d => +d.counts);\n\n        // Add X axis\n        const x = d3.scaleLinear().domain([0, maxX]).range([0, width]);\n        svg.append('g').attr('transform', `translate(0, ${height})`).call(d3.axisBottom(x));\n\n        // Add Y axis\n        const y = d3.scaleLinear().domain([0, maxY]).range([height, 0]);\n        svg.append('g').call(d3.axisLeft(y));\n\n        // Add dots\n        const dots = svg.selectAll('circle').data(data).enter().append('circle').attr('cx', d => x(+d.hourlyRate)).attr('cy', d => y(+d.counts)).attr('r', 5).style('fill', 'steelblue').on('mouseover', (event, d) => {\n          // Show the jobId details for the corresponding point\n          const tooltip = d3.select(this.$refs.tooltip);\n          tooltip.transition().duration(200).style('opacity', 0.9);\n          tooltip.html(`Job ID: ${d.jobId}`).style('left', `${event.pageX}px`).style('top', `${event.pageY - 28}px`);\n\n          // Highlight all dots with the same jobId\n          dots.filter(dotData => dotData.jobId === d.jobId).style('fill', 'red').attr('r', 7);\n        }).on('mouseout', () => {\n          // Hide the tooltip\n          const tooltip = d3.select(this.$refs.tooltip);\n          tooltip.transition().duration(500).style('opacity', 0);\n\n          // Restore the original style of all dots\n          dots.style('fill', 'steelblue').attr('r', 5);\n        }).on('click', (event, d) => {\n          // Filter and highlight all dots with the same jobId\n          const jobId = d.jobId;\n          dots.style('fill', dotData => dotData.jobId === jobId ? 'red' : 'steelblue').attr('r', dotData => dotData.jobId === jobId ? 7 : 5);\n        });\n\n        // Append the tooltip element\n        d3.select(this.$refs.scatterplot).append('div').attr('class', 'tooltip').style('opacity', 0).attr('ref', 'tooltip');\n      });\n    }\n  }\n};","map":{"version":3,"names":["d3","mounted","createScatterplot","methods","margin","top","right","bottom","left","width","height","svg","select","$refs","scatterplot","attr","append","csv","then","data","maxX","max","d","hourlyRate","maxY","counts","x","scaleLinear","domain","range","call","axisBottom","y","axisLeft","dots","selectAll","enter","style","on","event","tooltip","transition","duration","html","jobId","pageX","pageY","filter","dotData"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div>\n    <svg ref=\"scatterplot\"></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  mounted() {\n    this.createScatterplot();\n  },\n  methods: {\n    createScatterplot() {\n      // set the dimensions and margins of the graph\n      const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n      const width = 460 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      // append the svg object to the component element\n      const svg = d3.select(this.$refs.scatterplot)\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Read the data from your CSV file\n      d3.csv('path_to_your_csv_file.csv').then((data) => {\n        // Get the maximum values for x and y axes\n        const maxX = d3.max(data, (d) => +d.hourlyRate);\n        const maxY = d3.max(data, (d) => +d.counts);\n\n        // Add X axis\n        const x = d3.scaleLinear()\n          .domain([0, maxX])\n          .range([0, width]);\n        svg.append('g')\n          .attr('transform', `translate(0, ${height})`)\n          .call(d3.axisBottom(x));\n\n        // Add Y axis\n        const y = d3.scaleLinear()\n          .domain([0, maxY])\n          .range([height, 0]);\n        svg.append('g')\n          .call(d3.axisLeft(y));\n\n        // Add dots\n        const dots = svg.selectAll('circle')\n          .data(data)\n          .enter()\n          .append('circle')\n          .attr('cx', (d) => x(+d.hourlyRate))\n          .attr('cy', (d) => y(+d.counts))\n          .attr('r', 5)\n          .style('fill', 'steelblue')\n          .on('mouseover', (event, d) => {\n            // Show the jobId details for the corresponding point\n            const tooltip = d3.select(this.$refs.tooltip);\n            tooltip.transition().duration(200).style('opacity', 0.9);\n            tooltip.html(`Job ID: ${d.jobId}`)\n              .style('left', `${event.pageX}px`)\n              .style('top', `${event.pageY - 28}px`);\n\n            // Highlight all dots with the same jobId\n            dots.filter((dotData) => dotData.jobId === d.jobId)\n              .style('fill', 'red')\n              .attr('r', 7);\n          })\n          .on('mouseout', () => {\n            // Hide the tooltip\n            const tooltip = d3.select(this.$refs.tooltip);\n            tooltip.transition().duration(500).style('opacity', 0);\n\n            // Restore the original style of all dots\n            dots.style('fill', 'steelblue')\n              .attr('r', 5);\n          })\n          .on('click', (event, d) => {\n            // Filter and highlight all dots with the same jobId\n            const jobId = d.jobId;\n\n            dots.style('fill', (dotData) => (dotData.jobId === jobId ? 'red' : 'steelblue'))\n              .attr('r', (dotData) => (dotData.jobId === jobId ? 7 : 5));\n          });\n\n        // Append the tooltip element\n        d3.select(this.$refs.scatterplot)\n          .append('div')\n          .attr('class', 'tooltip')\n          .style('opacity', 0)\n          .attr('ref', 'tooltip');\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.tooltip {\n  position: absolute;\n  background-color: white;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 6px;\n}\n</style>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- <template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    QUESTION 1 \n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    QUESTION 2 \n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <p>Line Chart con:\n        <br>\n        -asse x: time stamp\n        <br>\n        -asse y: available balance\n        <br>\n        il colore delle linee sul grafico Ã¨ dato dall'educational level\n      </p>\n    </div>\n\n    QUESTION 3 \n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\n\nconst bm = new BuildingMap();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = true;\n      this.restaurantsActive = false;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = true;\n      this.pubsActive = false;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n/* BUSINESS HEALTH STYLE */\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 60px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}