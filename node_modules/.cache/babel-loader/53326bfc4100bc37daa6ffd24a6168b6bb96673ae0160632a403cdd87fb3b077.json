{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BuildingMap\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: []\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n    // DRAW APARTMENTS\n    getSingleEndpoint({}, 'Apartments').then(response => {\n      this.apartments = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          numberOfRooms: d.numberOfRooms,\n          apartmentId: d.apartmentId,\n          buildingId: d.buildingId,\n          rentalCost: d.rentalCost,\n          maxOccupancy: d.maxOccupancy\n        }\n      }));\n      this.drawApt();\n    });\n    // DRAW PUBS\n    getSingleEndpoint({}, 'Pubs').then(response => {\n      this.pubs = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          pubId: d.pubId,\n          hourlyCost: d.hourlyCost,\n          maxOccupancy: d.maxOccupancy,\n          buildingId: d.buildingId\n        }\n      }));\n      this.drawPub();\n    });\n    // DRAW RESTAURANTS\n    getSingleEndpoint({}, 'Restaurants').then(response => {\n      this.restaurants = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          restaurantId: d.restaurantId,\n          maxOccupancy: d.maxOccupancy,\n          foodCost: d.foodCost,\n          buildingId: d.buildingId\n        }\n      }));\n      this.drawRestaurants();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n      bl.color(bm.color());\n      d3.select(this.$refs.map).select('g.legend').call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select('g.apartments').datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select('g.pubs').datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select('g.restaurants').datum(this.restaurants).call(rest, bm.extent());\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","name","components","data","buildings","apartments","pubs","restaurants","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","methods","select","$refs","datum","call","color","extent"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-brand href=\"#\">Vast Challenge 2022</b-navbar-brand>\n      <b-navbar-nav>\n        <b-nav-item href=\"#\">Challenge #1</b-nav-item>\n        <b-nav-item href=\"#\">Challenge #2</b-nav-item>\n        <b-nav-item href=\"#\">Challenge #3</b-nav-item>\n      </b-navbar-nav>\n    </b-navbar>\n\n    <b-container id=\"app\">\n      <b-row>\n        <b-col>\n          <div id=\"map\">\n              <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                  <g class=\"buildings\"></g>\n                  <g class=\"legend\"></g>\n                  <g class=\"apartments\"></g>\n                  <g class=\"pubs\"></g>\n                  <g class=\"restaurants\"></g>\n              </svg>\n          </div>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport {getSingleEndpoint} from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport {BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant} from \"@/assets/BuildingMap\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data(){\n      return {\n          buildings: [],\n          apartments: [],\n          pubs: [],\n          restaurants: [],\n      }\n  },\n  mounted(){\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n        this.buildings = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                buildingId: d.buildingId,\n                buildingType: d.buildingType,\n                maxOccupancy: d.maxOccupancy,\n                units: d.units,\n            },\n        }));\n        this.drawBuildings();\n    });\n    // DRAW APARTMENTS\n    getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                numberOfRooms: d.numberOfRooms,\n                apartmentId: d.apartmentId,\n                buildingId: d.buildingId,\n                rentalCost: d.rentalCost,\n                maxOccupancy: d.maxOccupancy,\n            },\n        }));\n        this.drawApt();      \n    });\n    // DRAW PUBS\n    getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                pubId: d.pubId,\n                hourlyCost: d.hourlyCost,\n                maxOccupancy: d.maxOccupancy,\n                buildingId: d.buildingId,\n            },\n        }));\n        this.drawPub();\n    });\n    // DRAW RESTAURANTS\n    getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                restaurantId: d.restaurantId,\n                maxOccupancy: d.maxOccupancy,\n                foodCost: d.foodCost,\n                buildingId: d.buildingId,\n            },\n        }));\n        this.drawRestaurants();\n    });                            \n  },\n  methods:{\n      drawBuildings(){\n        d3.select(this.$refs.map).select('g.buildings')\n            .datum(this.buildings)\n            .call(bm);\n\n        bl.color(bm.color());\n\n        d3.select(this.$refs.map).select('g.legend')\n            .call(bl);\n      },\n      drawApt(){\n        d3.select(this.$refs.map).select('g.apartments')\n          .datum(this.apartments)\n          .call(apt, bm.extent())\n      },\n      drawPub(){\n        d3.select(this.$refs.map).select('g.pubs')\n          .datum(this.pubs)\n          .call(pub, bm.extent())\n      },\n      drawRestaurants(){\n        d3.select(this.$refs.map).select('g.restaurants')\n          .datum(this.restaurants)\n          .call(rest, bm.extent())    \n      } \n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 50px;\n}\n\nsvg g.buildings{\n    fill-opacity: 0.3;\n    stroke: grey;\n}\n\n\n</style>"],"mappings":"AA8BA,SAAAA,iBAAA;AACA,IAAAC,MAAA,GAAAC,OAAA,YAAAD,MAAA;AACA,MAAAE,GAAA,GAAAD,OAAA;AACA,MAAAE,EAAA,GAAAF,OAAA;AAEA,SAAAG,WAAA,EAAAC,kBAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,kBAAA;AAEA,MAAAC,EAAA,OAAAL,WAAA;AACA,MAAAM,EAAA,OAAAL,kBAAA;AACA,MAAAM,GAAA,OAAAL,WAAA;AACA,MAAAM,GAAA,OAAAL,WAAA;AACA,MAAAM,IAAA,OAAAL,kBAAA;AAEA;EACAM,IAAA;EACAC,UAAA,GACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,UAAA;MACAC,IAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA;IACAtB,iBAAA,kBAAAuB,IAAA,CAAAC,QAAA;MACA,KAAAN,SAAA,GAAAM,QAAA,CAAAP,IAAA,CAAAQ,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAzB,GAAA,CAAA0B,QAAA,CAAAC,KAAA,CAAA7B,MAAA,CAAA8B,IAAA,CAAAL,CAAA,CAAAM,QAAA,UACAC,SAAA;QACAC,UAAA;UACAC,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAC,YAAA,EAAAV,CAAA,CAAAU,YAAA;UACAC,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAC,KAAA,EAAAZ,CAAA,CAAAY;QACA;MACA;MACA,KAAAC,aAAA;IACA;IACA;IACAvC,iBAAA,mBAAAuB,IAAA,CAAAC,QAAA;MACA,KAAAL,UAAA,GAAAK,QAAA,CAAAP,IAAA,CAAAQ,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAzB,GAAA,CAAA0B,QAAA,CAAAC,KAAA,CAAA7B,MAAA,CAAA8B,IAAA,CAAAL,CAAA,CAAAM,QAAA,UACAC,SAAA;QACAC,UAAA;UACAM,aAAA,EAAAd,CAAA,CAAAc,aAAA;UACAC,WAAA,EAAAf,CAAA,CAAAe,WAAA;UACAN,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAO,UAAA,EAAAhB,CAAA,CAAAgB,UAAA;UACAL,YAAA,EAAAX,CAAA,CAAAW;QACA;MACA;MACA,KAAAM,OAAA;IACA;IACA;IACA3C,iBAAA,aAAAuB,IAAA,CAAAC,QAAA;MACA,KAAAJ,IAAA,GAAAI,QAAA,CAAAP,IAAA,CAAAQ,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAzB,GAAA,CAAA0B,QAAA,CAAAC,KAAA,CAAA7B,MAAA,CAAA8B,IAAA,CAAAL,CAAA,CAAAM,QAAA,UACAC,SAAA;QACAC,UAAA;UACAU,KAAA,EAAAlB,CAAA,CAAAkB,KAAA;UACAC,UAAA,EAAAnB,CAAA,CAAAmB,UAAA;UACAR,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAF,UAAA,EAAAT,CAAA,CAAAS;QACA;MACA;MACA,KAAAW,OAAA;IACA;IACA;IACA9C,iBAAA,oBAAAuB,IAAA,CAAAC,QAAA;MACA,KAAAH,WAAA,GAAAG,QAAA,CAAAP,IAAA,CAAAQ,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAzB,GAAA,CAAA0B,QAAA,CAAAC,KAAA,CAAA7B,MAAA,CAAA8B,IAAA,CAAAL,CAAA,CAAAM,QAAA,UACAC,SAAA;QACAC,UAAA;UACAa,YAAA,EAAArB,CAAA,CAAAqB,YAAA;UACAV,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAW,QAAA,EAAAtB,CAAA,CAAAsB,QAAA;UACAb,UAAA,EAAAT,CAAA,CAAAS;QACA;MACA;MACA,KAAAc,eAAA;IACA;EACA;EACAC,OAAA;IACAX,cAAA;MACAnC,EAAA,CAAA+C,MAAA,MAAAC,KAAA,CAAA3B,GAAA,EAAA0B,MAAA,gBACAE,KAAA,MAAAnC,SAAA,EACAoC,IAAA,CAAA5C,EAAA;MAEAC,EAAA,CAAA4C,KAAA,CAAA7C,EAAA,CAAA6C,KAAA;MAEAnD,EAAA,CAAA+C,MAAA,MAAAC,KAAA,CAAA3B,GAAA,EAAA0B,MAAA,aACAG,IAAA,CAAA3C,EAAA;IACA;IACAgC,QAAA;MACAvC,EAAA,CAAA+C,MAAA,MAAAC,KAAA,CAAA3B,GAAA,EAAA0B,MAAA,iBACAE,KAAA,MAAAlC,UAAA,EACAmC,IAAA,CAAA1C,GAAA,EAAAF,EAAA,CAAA8C,MAAA;IACA;IACAV,QAAA;MACA1C,EAAA,CAAA+C,MAAA,MAAAC,KAAA,CAAA3B,GAAA,EAAA0B,MAAA,WACAE,KAAA,MAAAjC,IAAA,EACAkC,IAAA,CAAAzC,GAAA,EAAAH,EAAA,CAAA8C,MAAA;IACA;IACAP,gBAAA;MACA7C,EAAA,CAAA+C,MAAA,MAAAC,KAAA,CAAA3B,GAAA,EAAA0B,MAAA,kBACAE,KAAA,MAAAhC,WAAA,EACAiC,IAAA,CAAAxC,IAAA,EAAAJ,EAAA,CAAA8C,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}