{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst d3 = require(\"d3\");\nexport default {\n  data() {\n    return {\n      participantStatusLogs: [],\n      // Array di dati ottenuti dall'API\n      heatmapData: [] // Dati per la heatmap\n    };\n  },\n\n  mounted() {\n    this.getParticipantStatusLogs().then(() => {\n      this.initializeHeatmap();\n    });\n  },\n  methods: {\n    getParticipantStatusLogs() {\n      return getSingleEndpoint({\n        participantId: 1\n      }, 'ParticipantStatusLogs').then(response => {\n        this.participantStatusLogs = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            timestamp: d.timestamp,\n            currentMode: d.currentMode,\n            participantId: d.participantId\n          }\n        }));\n      }).catch(error => {\n        console.error('Error accessing data:', error);\n      });\n    },\n    initializeHeatmap() {\n      const discretizedTimestamps = this.discretizeTimestamps(this.participantStatusLogs);\n      const groupedData = this.groupDataByDay(this.participantStatusLogs);\n      this.heatmapData = this.createHeatmapData(discretizedTimestamps, groupedData);\n    },\n    discretizeTimestamps(data) {\n      const timestamps = data.map(item => item.properties.timestamp);\n      const sortedTimestamps = timestamps.sort((a, b) => a - b);\n      const startTimestamp = sortedTimestamps[0];\n      const endTimestamp = sortedTimestamps[sortedTimestamps.length - 1];\n      const interval = 3 * 60 * 60 * 1000; // Intervallo di 3 ore in millisecondi\n\n      const discretizedTimestamps = [];\n      for (let timestamp = startTimestamp; timestamp <= endTimestamp; timestamp += interval) {\n        discretizedTimestamps.push(timestamp);\n      }\n      return discretizedTimestamps;\n    },\n    groupDataByDay(data) {\n      const groupedData = {};\n      // Group the data by day\n      data.forEach(item => {\n        const date = this.getDateString(item.properties.timestamp);\n        if (!groupedData[date]) {\n          groupedData[date] = [];\n        }\n        groupedData[date].push(item);\n      });\n      return groupedData;\n    },\n    getDateString(timestamp) {\n      const dateObj = new Date(timestamp);\n      const year = dateObj.getFullYear();\n      const month = this.addLeadingZero(dateObj.getMonth() + 1);\n      const day = this.addLeadingZero(dateObj.getDate());\n      return `${year}-${month}-${day}`;\n    },\n    addLeadingZero(value) {\n      return value < 10 ? `0${value}` : value.toString();\n    },\n    createHeatmapData(timestamps, groupedData) {\n      const heatmapData = [];\n      for (const date in groupedData) {\n        const dayData = groupedData[date];\n        const rowData = [];\n        for (let i = 0; i < timestamps.length - 1; i++) {\n          const intervalStart = timestamps[i];\n          const intervalEnd = timestamps[i + 1];\n          const modeChange = this.checkModeChange(dayData, intervalStart, intervalEnd);\n          const color = modeChange ? this.getColor(dayData, intervalStart) : '';\n          rowData.push(color);\n        }\n        heatmapData.push(rowData);\n      }\n      return heatmapData;\n    },\n    checkModeChange(data, start, end) {\n      for (const item of data) {\n        if (item.properties.timestamp >= start && item.properties.timestamp < end) {\n          if (item.properties.currentMode !== data[0].properties.currentMode) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    getColor(data, timestamp) {\n      const uniqueModes = [...new Set(data.map(item => item.properties.currentMode))];\n      const colorScale = d3.scaleOrdinal().domain(uniqueModes).range(d3.schemeCategory10);\n      for (const item of data) {\n        if (item.properties.timestamp === timestamp) {\n          return colorScale(item.properties.currentMode);\n        }\n      }\n      return '';\n    },\n    getSquareClass(square) {\n      return square ? `square ${square}` : 'square';\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","require","data","participantStatusLogs","heatmapData","mounted","getParticipantStatusLogs","then","initializeHeatmap","methods","participantId","response","map","d","type","properties","timestamp","currentMode","catch","error","console","discretizedTimestamps","discretizeTimestamps","groupedData","groupDataByDay","createHeatmapData","timestamps","item","sortedTimestamps","sort","a","b","startTimestamp","endTimestamp","length","interval","push","forEach","date","getDateString","dateObj","Date","year","getFullYear","month","addLeadingZero","getMonth","day","getDate","value","toString","dayData","rowData","i","intervalStart","intervalEnd","modeChange","checkModeChange","color","getColor","start","end","uniqueModes","Set","colorScale","scaleOrdinal","domain","range","schemeCategory10","getSquareClass","square"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n\n<template>\n    <div>\n      <div class=\"heatmap-container\">\n        <div v-for=\"(row, index) in heatmapData\" :key=\"index\" class=\"heatmap-row\">\n          <div v-for=\"(square, colIndex) in row\" :key=\"colIndex\" :class=\"getSquareClass(square)\">\n            {{ square }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  \n  <script>\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  const d3 = require(\"d3\"); \n  \n  export default {\n    data() {\n      return {\n        participantStatusLogs: [], // Array di dati ottenuti dall'API\n        heatmapData: [], // Dati per la heatmap\n      };\n    },\n    mounted() {\n      this.getParticipantStatusLogs().then(() => {\n        this.initializeHeatmap();\n      });\n    },\n    methods: {\n      getParticipantStatusLogs() {\n        return getSingleEndpoint({ participantId: 1 }, 'ParticipantStatusLogs')\n          .then((response) => {\n            this.participantStatusLogs = response.data.map(d => ({\n              type: \"Feature\",\n              properties: {\n                timestamp: d.timestamp,\n                currentMode: d.currentMode,\n                participantId: d.participantId,\n              },\n            }));\n          })\n          .catch((error) => {\n            console.error('Error accessing data:', error);\n          });\n      },\n      initializeHeatmap() {\n        const discretizedTimestamps = this.discretizeTimestamps(this.participantStatusLogs);\n        const groupedData = this.groupDataByDay(this.participantStatusLogs);\n        this.heatmapData = this.createHeatmapData(discretizedTimestamps, groupedData);\n      },\n      discretizeTimestamps(data) {\n        const timestamps = data.map(item => item.properties.timestamp);\n        const sortedTimestamps = timestamps.sort((a, b) => a - b);\n  \n        const startTimestamp = sortedTimestamps[0];\n        const endTimestamp = sortedTimestamps[sortedTimestamps.length - 1];\n        const interval = 3 * 60 * 60 * 1000; // Intervallo di 3 ore in millisecondi\n  \n        const discretizedTimestamps = [];\n  \n        for (let timestamp = startTimestamp; timestamp <= endTimestamp; timestamp += interval) {\n          discretizedTimestamps.push(timestamp);\n        }\n  \n        return discretizedTimestamps;\n      },\n      groupDataByDay(data) {\n        const groupedData = {};\n        // Group the data by day\n        data.forEach(item => {\n          const date = this.getDateString(item.properties.timestamp);\n          if (!groupedData[date]) {\n            groupedData[date] = [];\n          }\n          groupedData[date].push(item);\n        });\n        return groupedData;\n      },\n      getDateString(timestamp) {\n        const dateObj = new Date(timestamp);\n        const year = dateObj.getFullYear();\n        const month = this.addLeadingZero(dateObj.getMonth() + 1);\n        const day = this.addLeadingZero(dateObj.getDate());\n        return `${year}-${month}-${day}`;\n      },\n      addLeadingZero(value) {\n        return value < 10 ? `0${value}` : value.toString();\n      },\n      createHeatmapData(timestamps, groupedData) {\n        const heatmapData = [];\n        for (const date in groupedData) {\n          const dayData = groupedData[date];\n          const rowData = [];\n          for (let i = 0; i < timestamps.length - 1; i++) {\n            const intervalStart = timestamps[i];\n            const intervalEnd = timestamps[i + 1];\n            const modeChange = this.checkModeChange(dayData, intervalStart, intervalEnd);\n            const color = modeChange ? this.getColor(dayData, intervalStart) : '';\n            rowData.push(color);\n          }\n          heatmapData.push(rowData);\n        }\n        return heatmapData;\n      },\n      checkModeChange(data, start, end) {\n        for (const item of data) {\n          if (item.properties.timestamp >= start && item.properties.timestamp < end) {\n            if (item.properties.currentMode !== data[0].properties.currentMode) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      getColor(data, timestamp) {\n        const uniqueModes = [...new Set(data.map(item => item.properties.currentMode))];\n        const colorScale = d3.scaleOrdinal()\n          .domain(uniqueModes)\n          .range(d3.schemeCategory10);\n  \n        for (const item of data) {\n          if (item.properties.timestamp === timestamp) {\n            return colorScale(item.properties.currentMode);\n          }\n        }\n        return '';\n      },\n      getSquareClass(square) {\n        return square ? `square ${square}` : 'square';\n      },\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}