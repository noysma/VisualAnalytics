{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n      getSingleEndpoint({\n        participantId: 1010\n      }, \"TravelJournal\").then(response => {\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / 60000; // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const totalTravelTimes = weekdays.map(day => {\n          const dayTravelTimes = parsedData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n          const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n          return {\n            day,\n            totalTravelTime\n          };\n        });\n\n        // Scala per gli assi x e y\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n        const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, d => d.totalTravelTime)]).range([height, 0]);\n\n        // Creazione degli assi x e y\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y).tickFormat(d => `${d} min`); // Formato delle etichette sull'asse y\n\n        // Aggiungi gli assi al grafico\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n        // Crea le barre del grafico\n        chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","mounted","createChart","methods","participantId","then","response","data","parsedData","map","d","startDate","Date","travelStartTime","endDate","travelEndTime","travelTime","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","weekdays","totalTravelTimes","day","dayTravelTimes","filter","getDay","indexOf","totalTravelTime","sum","x","scaleBand","domain","range","padding","y","scaleLinear","max","xAxis","axisBottom","yAxis","axisLeft","tickFormat","call","selectAll","enter","bandwidth"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div ref=\"chartContainer\"></div>\n  </template>\n  \n  <script>\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  \n  export default {\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        // Recupera i dati dal tuo API usando getSingleEndpoint() e 'TravelJournal'\n        getSingleEndpoint({ participantId: 1010 }, \"TravelJournal\").then((response) => {\n          const data = response.data;\n  \n          // Parsing delle date e calcolo della durata dei viaggi in minuti\n          const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / 60000; // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n          });\n  \n          // Crea il grafico utilizzando D3\n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          const chart = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n          // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map((day) => {\n            const dayTravelTimes = parsedData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n            return { day, totalTravelTime };\n          });\n  \n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n  \n          const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, (d) => d.totalTravelTime)]).range([height, 0]);\n  \n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickFormat((d) => `${d} min`); // Formato delle etichette sull'asse y\n  \n          // Aggiungi gli assi al grafico\n          chart\n            .append(\"g\")\n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(xAxis);\n  \n          chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n  \n          // Crea le barre del grafico\n          chart\n            .selectAll(\".bar\")\n            .data(totalTravelTimes)\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => x(d.day))\n            .attr(\"y\", (d) => y(d.totalTravelTime))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => height - y(d.totalTravelTime));\n        });\n      },\n    },\n  };\n  </script>\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}