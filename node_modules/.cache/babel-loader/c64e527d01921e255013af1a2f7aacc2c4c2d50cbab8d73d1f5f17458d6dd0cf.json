{"ast":null,"code":"import * as d3 from \"d3\";\nexport function createRoutine(data, containter, width, height) {\n  const parseTime = d3.timeParse(\"%Y-%m-%dT%H:%M:%SZ\");\n\n  // Preprocess the data\n  const formattedData = data.map(d => {\n    return {\n      participantId: +d.participantId,\n      timestamp: parseTime(d.timestamp),\n      currentMode: d.currentMode\n    };\n  });\n\n  // Group the data by day\n  const groupedData = d3.group(formattedData, d => d3.timeDay.floor(d.timestamp));\n\n  // Get the unique modes\n  const modes = Array.from(new Set(formattedData.map(d => d.currentMode)));\n\n  // Set up the color scale\n  const colorScale = d3.scaleOrdinal().domain(modes).range(d3.schemeCategory10);\n\n  // Set the dimensions of the heatmap\n  const rectWidth = width / (1440 / 5); // Five-minute interval for a day (24 hours * 60 minutes / 5 minutes)\n  const rectHeight = height / groupedData.size;\n\n  // Create the SVG container\n  const svg = d3.select(containter).append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\n  // Draw the heatmap\n  const heatmap = svg.selectAll(\"g\").data(Array.from(groupedData)).enter().append(\"g\").attr(\"transform\", (d, i) => `translate(0, ${i * rectHeight})`); // Move to the next row for each day\n\n  heatmap.selectAll(\"rect\").data(d => d[1]).enter().append(\"rect\").attr(\"x\", d => {\n    const dayStart = d3.timeDay.floor(d.timestamp);\n    const minutesSinceStart = d3.timeMinute.count(dayStart, d.timestamp);\n    return minutesSinceStart * rectWidth / 5; // Multiply by rectWidth and divide by 5 for five-minute intervals\n  }).attr(\"y\", 0).attr(\"width\", rectWidth).attr(\"height\", rectHeight).style(\"fill\", d => colorScale(d.currentMode));\n\n  // Add x-axis labels for hours\n  const xScale = d3.scaleTime().domain([d3.timeMinute.floor(d3.min(formattedData, d => d.timestamp)), d3.timeMinute.ceil(d3.max(formattedData, d => d.timestamp))]).range([0, width]);\n  const xAxis = d3.axisBottom(xScale).ticks(d3.timeHour.every(3)).tickFormat(d3.timeFormat(\"%H:%M\"));\n  svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n\n  // Add y-axis labels for days\n  const yScale = d3.scaleTime().domain([d3.timeDay.floor(d3.min(formattedData, d => d.timestamp)), d3.timeDay.ceil(d3.max(formattedData, d => d.timestamp))]).range([0, height]);\n  const yAxis = d3.axisLeft(yScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n  svg.append(\"g\").call(yAxis);\n\n  // Add legend for currentMode colors\n  const legend = svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", `translate(${width - 100}, 20)`);\n  const legendItems = legend.selectAll(\".legend-item\").data(modes).enter().append(\"g\").attr(\"class\", \"legend-item\").attr(\"transform\", (d, i) => `translate(0, ${i * 20})`);\n  legendItems.append(\"rect\").attr(\"x\", +50).attr(\"y\", 0).attr(\"width\", 10).attr(\"height\", 10).style(\"fill\", d => colorScale(d));\n  legendItems.append(\"text\").attr(\"x\", 15).attr(\"y\", 10).attr(\"dy\", \"0.35em\").text(d => d);\n}","map":{"version":3,"names":["d3","createRoutine","data","containter","width","height","parseTime","timeParse","formattedData","map","d","participantId","timestamp","currentMode","groupedData","group","timeDay","floor","modes","Array","from","Set","colorScale","scaleOrdinal","domain","range","schemeCategory10","rectWidth","rectHeight","size","svg","select","append","attr","heatmap","selectAll","enter","i","dayStart","minutesSinceStart","timeMinute","count","style","xScale","scaleTime","min","ceil","max","xAxis","axisBottom","ticks","timeHour","every","tickFormat","timeFormat","call","yScale","yAxis","axisLeft","legend","legendItems","text"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/RoutineComparison.js"],"sourcesContent":["import * as d3 from \"d3\";\n\nexport function createRoutine(data, containter, width, height) {\n  const parseTime = d3.timeParse(\"%Y-%m-%dT%H:%M:%SZ\");\n\n  // Preprocess the data\n  const formattedData = data.map((d) => {\n    return {\n      participantId: +d.participantId,\n      timestamp: parseTime(d.timestamp),\n      currentMode: d.currentMode,\n    };\n  });\n\n  // Group the data by day\n  const groupedData = d3.group(formattedData, (d) => d3.timeDay.floor(d.timestamp));\n\n  // Get the unique modes\n  const modes = Array.from(new Set(formattedData.map((d) => d.currentMode)));\n\n  // Set up the color scale\n  const colorScale = d3\n    .scaleOrdinal()\n    .domain(modes)\n    .range(d3.schemeCategory10);\n\n  // Set the dimensions of the heatmap\n  const rectWidth = width / (1440 / 5); // Five-minute interval for a day (24 hours * 60 minutes / 5 minutes)\n  const rectHeight = height / groupedData.size;\n\n  // Create the SVG container\n  const svg = d3\n    .select(containter)\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  // Draw the heatmap\n  const heatmap = svg\n    .selectAll(\"g\")\n    .data(Array.from(groupedData))\n    .enter()\n    .append(\"g\")\n    .attr(\"transform\", (d, i) => `translate(0, ${i * rectHeight})`); // Move to the next row for each day\n\n  heatmap\n    .selectAll(\"rect\")\n    .data((d) => d[1])\n    .enter()\n    .append(\"rect\")\n    .attr(\"x\", (d) => {\n      const dayStart = d3.timeDay.floor(d.timestamp);\n      const minutesSinceStart = d3.timeMinute.count(dayStart, d.timestamp);\n      return (minutesSinceStart * rectWidth) / 5; // Multiply by rectWidth and divide by 5 for five-minute intervals\n    })\n    .attr(\"y\", 0)\n    .attr(\"width\", rectWidth)\n    .attr(\"height\", rectHeight)\n    .style(\"fill\", (d) => colorScale(d.currentMode));\n\n  // Add x-axis labels for hours\n  const xScale = d3\n    .scaleTime()\n    .domain([d3.timeMinute.floor(d3.min(formattedData, (d) => d.timestamp)), d3.timeMinute.ceil(d3.max(formattedData, (d) => d.timestamp))])\n    .range([0, width]);\n\n  const xAxis = d3\n    .axisBottom(xScale)\n    .ticks(d3.timeHour.every(3))\n    .tickFormat(d3.timeFormat(\"%H:%M\"));\n\n  svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n\n  // Add y-axis labels for days\n  const yScale = d3\n    .scaleTime()\n    .domain([d3.timeDay.floor(d3.min(formattedData, (d) => d.timestamp)), d3.timeDay.ceil(d3.max(formattedData, (d) => d.timestamp))])\n    .range([0, height]);\n\n  const yAxis = d3.axisLeft(yScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n\n  svg.append(\"g\").call(yAxis);\n\n\n  // Add legend for currentMode colors\n  const legend = svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", `translate(${width - 100}, 20)`);\n\n  const legendItems = legend.selectAll(\".legend-item\").data(modes).enter().append(\"g\").attr(\"class\", \"legend-item\").attr(\"transform\", (d, i) => `translate(0, ${i * 20})`);\n\n  legendItems\n    .append(\"rect\")\n    .attr(\"x\", +50)\n    .attr(\"y\", 0)\n    .attr(\"width\", 10)\n    .attr(\"height\", 10)\n    .style(\"fill\", (d) => colorScale(d));\n\n  legendItems\n    .append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 10)\n    .attr(\"dy\", \"0.35em\")\n    .text((d) => d);\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}