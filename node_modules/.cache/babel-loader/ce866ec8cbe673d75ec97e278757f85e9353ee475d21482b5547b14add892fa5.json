{"ast":null,"code":"import { BCard } from 'bootstrap-vue';\nimport * as d3 from 'd3';\nexport default {\n  name: 'App',\n  components: {\n    BCard\n  },\n  mounted() {\n    this.drawScatterPlot();\n  },\n  methods: {\n    drawScatterPlot() {\n      const data = [{\n        age: 25,\n        householdSize: 2\n      }, {\n        age: 30,\n        householdSize: 3\n      }, {\n        age: 35,\n        householdSize: 4\n      }, {\n        age: 40,\n        householdSize: 2\n      }, {\n        age: 45,\n        householdSize: 5\n      }, {\n        age: 50,\n        householdSize: 2\n      }, {\n        age: 55,\n        householdSize: 3\n      }, {\n        age: 60,\n        householdSize: 4\n      }, {\n        age: 65,\n        householdSize: 2\n      }, {\n        age: 70,\n        householdSize: 5\n      }];\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 50\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const svg = d3.select(this.$refs.scatterplot).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n      const x = d3.scaleLinear().domain([20, 75]).range([0, width]);\n      const y = d3.scaleLinear().domain([1, 5]).range([height, 0]);\n      svg.append('g').attr('transform', `translate(0,${height})`).call(d3.axisBottom(x));\n      svg.append('g').call(d3.axisLeft(y));\n      svg.selectAll('dot').data(data).enter().append('circle').attr('cx', d => x(d.age)).attr('cy', d => y(d.householdSize)).attr('r', 5).style('fill', 'steelblue');\n    }\n  }\n};","map":{"version":3,"names":["BCard","d3","name","components","mounted","drawScatterPlot","methods","data","age","householdSize","margin","top","right","bottom","left","width","height","svg","select","$refs","scatterplot","append","attr","x","scaleLinear","domain","range","y","call","axisBottom","axisLeft","selectAll","enter","d","style"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <b-card>\n      <h3 class=\"mb-0\">Participant Age vs Household Size</h3>\n    </b-card>\n    <b-card>\n      <div ref=\"scatterplot\"></div>\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport { BCard } from 'bootstrap-vue'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'App',\n  components: {\n    BCard,\n  },\n  mounted() {\n    this.drawScatterPlot()\n  },\n  methods: {\n    drawScatterPlot() {\n      const data = [\n        { age: 25, householdSize: 2 },\n        { age: 30, householdSize: 3 },\n        { age: 35, householdSize: 4 },\n        { age: 40, householdSize: 2 },\n        { age: 45, householdSize: 5 },\n        { age: 50, householdSize: 2 },\n        {age: 55, householdSize: 3 },\n        { age: 60, householdSize: 4 },\n        { age: 65, householdSize: 2 },\n        { age: 70, householdSize: 5 },\n      ]\n\n      const margin = { top: 20, right: 20, bottom: 30, left: 50 }\n      const width = 600 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      const svg = d3\n        .select(this.$refs.scatterplot)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      const x = d3.scaleLinear().domain([20, 75]).range([0, width])\n      const y = d3.scaleLinear().domain([1, 5]).range([height, 0])\n\n      svg\n        .append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x))\n\n      svg.append('g').call(d3.axisLeft(y))\n\n      svg\n        .selectAll('dot')\n        .data(data)\n        .enter()\n        .append('circle')\n        .attr('cx', d => x(d.age))\n        .attr('cy', d => y(d.householdSize))\n        .attr('r', 5)\n        .style('fill', 'steelblue')\n    },\n  },\n}\n</script>"],"mappings":"AAYA,SAAAA,KAAA;AACA,YAAAC,EAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH;EACA;EACAI,QAAA;IACA,KAAAC,eAAA;EACA;EACAC,OAAA;IACAD,gBAAA;MACA,MAAAE,IAAA,IACA;QAAAC,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,GACA;QAAAD,GAAA;QAAAC,aAAA;MAAA,EACA;MAEA,MAAAC,MAAA;QAAAC,GAAA;QAAAC,KAAA;QAAAC,MAAA;QAAAC,IAAA;MAAA;MACA,MAAAC,KAAA,SAAAL,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAE,KAAA;MACA,MAAAI,MAAA,SAAAN,MAAA,CAAAC,GAAA,GAAAD,MAAA,CAAAG,MAAA;MAEA,MAAAI,GAAA,GAAAhB,EAAA,CACAiB,MAAA,MAAAC,KAAA,CAAAC,WAAA,EACAC,MAAA,QACAC,IAAA,UAAAP,KAAA,GAAAL,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAE,KAAA,EACAU,IAAA,WAAAN,MAAA,GAAAN,MAAA,CAAAC,GAAA,GAAAD,MAAA,CAAAG,MAAA,EACAQ,MAAA,MACAC,IAAA,2BAAAZ,MAAA,CAAAI,IAAA,IAAAJ,MAAA,CAAAC,GAAA;MAEA,MAAAY,CAAA,GAAAtB,EAAA,CAAAuB,WAAA,GAAAC,MAAA,WAAAC,KAAA,KAAAX,KAAA;MACA,MAAAY,CAAA,GAAA1B,EAAA,CAAAuB,WAAA,GAAAC,MAAA,SAAAC,KAAA,EAAAV,MAAA;MAEAC,GAAA,CACAI,MAAA,MACAC,IAAA,6BAAAN,MAAA,KACAY,IAAA,CAAA3B,EAAA,CAAA4B,UAAA,CAAAN,CAAA;MAEAN,GAAA,CAAAI,MAAA,MAAAO,IAAA,CAAA3B,EAAA,CAAA6B,QAAA,CAAAH,CAAA;MAEAV,GAAA,CACAc,SAAA,QACAxB,IAAA,CAAAA,IAAA,EACAyB,KAAA,GACAX,MAAA,WACAC,IAAA,OAAAW,CAAA,IAAAV,CAAA,CAAAU,CAAA,CAAAzB,GAAA,GACAc,IAAA,OAAAW,CAAA,IAAAN,CAAA,CAAAM,CAAA,CAAAxB,aAAA,GACAa,IAAA,SACAY,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}