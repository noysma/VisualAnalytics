{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingTypeLegend } from \"@/assets/BuildingMap\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      showTypes: {\n        'Residental': true,\n        'Commercial': true,\n        'School': true\n      }\n    };\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      const self = this;\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n      bl.color(bm.color());\n      const legend = d3.select(this.$refs.map).select('g.legend').call(bl);\n      legend.selectAll('.legend-item').on('click', function (type) {\n        self.toggleType(type);\n        d3.select(this).classed('active', self.showTypes[type]);\n      });\n    },\n    toggleType(type) {\n      console.log('toggleType called with type:', type);\n      this.showTypes[type] = !this.showTypes[type];\n      d3.selectAll('path').filter(d => d.properties.buildingType === type).attr('stroke-width', d => this.showTypes[d.properties.buildingType] ? 2 : 0).style('fill-opacity', d => this.showTypes[d.properties.buildingType] ? 1 : 0.2).classed('active', d => this.showTypes[d.properties.buildingType]);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","bm","bl","name","components","data","buildings","showTypes","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","methods","self","select","$refs","datum","call","color","legend","selectAll","on","toggleType","classed","console","log","filter","attr","style"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <b-container id=\"app\">\n    <b-row>\n      <b-col>\n        <div id=\"map\">\n            <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n            </svg>\n        </div>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n\n\n\n<script>\nimport { getSingleEndpoint} from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport {BuildingMap, BuildingTypeLegend} from \"@/assets/BuildingMap\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      buildings: [],\n      showTypes: {\n        'Residental': true,\n        'Commercial': true,\n        'School': true,\n      }\n    }\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      const self = this;\n      d3.select(this.$refs.map).select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n\n      bl.color(bm.color());\n\n      const legend = d3.select(this.$refs.map).select('g.legend')\n        .call(bl);\n\n      legend.selectAll('.legend-item')\n        .on('click', function(type) {\n          self.toggleType(type);\n          d3.select(this).classed('active', self.showTypes[type]);\n        });\n    },\n    toggleType(type) {\n      console.log('toggleType called with type:', type);\n      this.showTypes[type] = !this.showTypes[type];\n      d3.selectAll('path')\n        .filter((d) => d.properties.buildingType === type)\n        .attr('stroke-width', (d) => this.showTypes[d.properties.buildingType] ? 2 : 0)\n        .style('fill-opacity', (d) => this.showTypes[d.properties.buildingType] ? 1 : 0.2)\n        .classed('active', (d) => this.showTypes[d.properties.buildingType]);\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nsvg g.buildings path {\n  fill-opacity: 0.2;\n  stroke: grey;\n}\n\nsvg g.buildings path:hover,\nsvg g.buildings path.active {\n  fill-opacity: 1;\n  stroke-width: 2;\n}\n\n</style>"],"mappings":"AAmBA,SAAAA,iBAAA;AACA,IAAAC,MAAA,GAAAC,OAAA,YAAAD,MAAA;AACA,MAAAE,GAAA,GAAAD,OAAA;AACA,MAAAE,EAAA,GAAAF,OAAA;AAEA,SAAAG,WAAA,EAAAC,kBAAA;AAEA,MAAAC,EAAA,OAAAF,WAAA;AACA,MAAAG,EAAA,OAAAF,kBAAA;AAEA;EACAG,IAAA;EACAC,UAAA,GACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;QACA;QACA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACAd,iBAAA,kBAAAe,IAAA,CAAAC,QAAA;MACA,KAAAJ,SAAA,GAAAI,QAAA,CAAAL,IAAA,CAAAM,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAjB,GAAA,CAAAkB,QAAA,CAAAC,KAAA,CAAArB,MAAA,CAAAsB,IAAA,CAAAL,CAAA,CAAAM,QAAA,UAAAC,SAAA;QACAC,UAAA;UACAC,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAC,YAAA,EAAAV,CAAA,CAAAU,YAAA;UACAC,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAC,KAAA,EAAAZ,CAAA,CAAAY;QACA;MACA;MACA,KAAAC,aAAA;IACA;EACA;EACAC,OAAA;IACAD,cAAA;MACA,MAAAE,IAAA;MACA7B,EAAA,CAAA8B,MAAA,MAAAC,KAAA,CAAAlB,GAAA,EAAAiB,MAAA,gBACAE,KAAA,MAAAxB,SAAA,EACAyB,IAAA,CAAA9B,EAAA;MAEAC,EAAA,CAAA8B,KAAA,CAAA/B,EAAA,CAAA+B,KAAA;MAEA,MAAAC,MAAA,GAAAnC,EAAA,CAAA8B,MAAA,MAAAC,KAAA,CAAAlB,GAAA,EAAAiB,MAAA,aACAG,IAAA,CAAA7B,EAAA;MAEA+B,MAAA,CAAAC,SAAA,iBACAC,EAAA,oBAAAtB,IAAA;QACAc,IAAA,CAAAS,UAAA,CAAAvB,IAAA;QACAf,EAAA,CAAA8B,MAAA,OAAAS,OAAA,WAAAV,IAAA,CAAApB,SAAA,CAAAM,IAAA;MACA;IACA;IACAuB,WAAAvB,IAAA;MACAyB,OAAA,CAAAC,GAAA,iCAAA1B,IAAA;MACA,KAAAN,SAAA,CAAAM,IAAA,UAAAN,SAAA,CAAAM,IAAA;MACAf,EAAA,CAAAoC,SAAA,SACAM,MAAA,CAAA5B,CAAA,IAAAA,CAAA,CAAAQ,UAAA,CAAAE,YAAA,KAAAT,IAAA,EACA4B,IAAA,iBAAA7B,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA,WACAoB,KAAA,iBAAA9B,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA,aACAe,OAAA,WAAAzB,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}