{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nimport { DensityMap } from \"@/assets/DensityMap\";\nconst dm = new DensityMap();\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      cards: [{\n        title: \"Question 1\",\n        description: \"Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.\",\n        content: `\n          <div class=\"row justify-content-center\">\n            <div class=\"col-md-8\">\n              <div class=\"button-container\">\n                <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n              </div>\n            </div>\n          </div>\n          <div class=\"map-container\">\n            <svg ref=\"map\">\n              <g class=\"buildings\"></g>\n              <g class=\"legend\"></g>\n              <g class=\"apartments\"></g>\n              <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n              <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n            </svg>\n          </div>\n          `\n      }, {\n        title: \"Question 2\",\n        description: \"Where are the busiest areas in Engagement? Are there traffic bottlenecks that should be addressed?\",\n        content: `<p>ciao</p>`\n      }, {\n        title: \"Question 3\",\n        description: \"Participants have given permission to have their daily routines captured. Choose two different participants with different routines and describe their daily patterns, with supporting evidence\",\n        content: \"<p>Content for Card 3</p>\"\n      }, {\n        title: \"Question 4\",\n        description: \"Over the span of the dataset, how do patterns change in the city change?\",\n        content: \"<p>Content for Card 4</p>\"\n      }],\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false\n    };\n  },\n  mounted() {\n    this.$nextTick(() => {\n      // DRAW THE MAP\n      getSingleEndpoint({}, \"Buildings\").then(response => {\n        this.buildings = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            buildingId: d.buildingId,\n            buildingType: d.buildingType,\n            maxOccupancy: d.maxOccupancy,\n            units: d.units\n          }\n        }));\n        // DRAW APARTMENTS\n        getSingleEndpoint({}, \"Apartments\").then(response => {\n          this.apartments = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n            properties: {\n              numberOfRooms: d.numberOfRooms,\n              apartmentId: d.apartmentId,\n              buildingId: d.buildingId,\n              rentalCost: d.rentalCost,\n              maxOccupancy: d.maxOccupancy\n            }\n          }));\n        });\n        // DRAW PUBS\n        getSingleEndpoint({}, \"Pubs\").then(response => {\n          this.pubs = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n            properties: {\n              pubId: d.pubId,\n              hourlyCost: d.hourlyCost,\n              maxOccupancy: d.maxOccupancy,\n              buildingId: d.buildingId\n            }\n          }));\n        });\n        // DRAW RESTAURANTS\n        getSingleEndpoint({}, \"Restaurants\").then(response => {\n          this.restaurants = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n            properties: {\n              restaurantId: d.restaurantId,\n              maxOccupancy: d.maxOccupancy,\n              foodCost: d.foodCost,\n              buildingId: d.buildingId\n            }\n          }));\n        });\n        this.$nextTick(() => {\n          this.drawBuildings();\n          this.drawApt();\n          this.drawPub();\n          this.drawRestaurants();\n          this.drawDensity();\n        });\n      });\n    });\n  },\n  methods: {\n    toggleCollapse(card) {\n      card.isCollapsed = !card.isCollapsed;\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select(\"g.buildings\").datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawDensity() {\n      d3.select(\"#density-map\").append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"700px\").append(\"g\").classed(\"density\", true).datum(this.buildings).call(dm);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","DensityMap","dm","name","components","data","cards","title","description","content","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","mounted","$nextTick","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","pubId","hourlyCost","restaurantId","foodCost","drawBuildings","drawApt","drawPub","drawRestaurants","drawDensity","methods","toggleCollapse","card","isCollapsed","select","$refs","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","toggleRestaurants","append","attr","classed"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<template>\n  <div id=\"vc2\" class=\"vc2-container\">\n    <div class=\"container\">\n      <h1>Challenge 2: Patterns of Life</h1>\n      <p>\n        Considers the patterns of daily life throughout the city.\n        You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n      </p>\n      <div>\n        <b-card v-for=\"(card, index) in cards\" :key=\"index\" class=\"minimal-card\" no-body>\n          <div\n            class=\"card-header\"\n            :class=\"{ open: !card.isCollapsed, closed: card.isCollapsed }\"\n            @click=\"toggleCollapse(card)\"\n          >\n            <h5 class=\"card-title\">{{ card.title }}</h5>\n            <p class=\"card-description\">{{ card.description }}</p>\n            <div class=\"arrow-container\" :class=\"{ rotated: !card.isCollapsed }\">\n              <span class=\"arrow\">&#9660;</span>\n            </div>\n          </div>\n          <b-collapse v-model=\"card.isCollapsed\">\n            <div class=\"card-content\" v-html=\"card.content\"></div>\n          </b-collapse>\n        </b-card>\n      </div>\n      <div id=\"density-map\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nimport {\n  DensityMap,\n} from \"@/assets/DensityMap\";\n\nconst dm = new DensityMap();\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      cards: [\n        {\n          title: \"Question 1\",\n          description: \"Assuming the volunteers are representative of the city’s population, characterize the distinct areas of the city that you identify. For each area you identify, provide your rationale and supporting data.\",\n          content: `\n          <div class=\"row justify-content-center\">\n            <div class=\"col-md-8\">\n              <div class=\"button-container\">\n                <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n                <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n              </div>\n            </div>\n          </div>\n          <div class=\"map-container\">\n            <svg ref=\"map\">\n              <g class=\"buildings\"></g>\n              <g class=\"legend\"></g>\n              <g class=\"apartments\"></g>\n              <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n              <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n            </svg>\n          </div>\n          `\n        },\n        {\n          title: \"Question 2\",\n          description: \"Where are the busiest areas in Engagement? Are there traffic bottlenecks that should be addressed?\",\n          content: `<p>ciao</p>`\n        },\n        {\n          title: \"Question 3\",\n          description: \"Participants have given permission to have their daily routines captured. Choose two different participants with different routines and describe their daily patterns, with supporting evidence\",\n          content: \"<p>Content for Card 3</p>\",\n        },\n        {\n          title: \"Question 4\",\n          description: \"Over the span of the dataset, how do patterns change in the city change?\",\n          content: \"<p>Content for Card 4</p>\",\n        },\n      ],\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n    };\n  },\n  mounted() {\n    this.$nextTick(() => {\n      // DRAW THE MAP\n      getSingleEndpoint({}, \"Buildings\").then((response) => {\n        this.buildings = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            buildingId: d.buildingId,\n            buildingType: d.buildingType,\n            maxOccupancy: d.maxOccupancy,\n            units: d.units,\n          },\n        }));\n        // DRAW APARTMENTS\n        getSingleEndpoint({}, \"Apartments\").then((response) => {\n          this.apartments = response.data.map((d) => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n            properties: {\n              numberOfRooms: d.numberOfRooms,\n              apartmentId: d.apartmentId,\n              buildingId: d.buildingId,\n              rentalCost: d.rentalCost,\n              maxOccupancy: d.maxOccupancy,\n            },\n          }));\n        });\n        // DRAW PUBS\n        getSingleEndpoint({}, \"Pubs\").then((response) => {\n          this.pubs = response.data.map((d) => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n            properties: {\n              pubId: d.pubId,\n              hourlyCost: d.hourlyCost,\n              maxOccupancy: d.maxOccupancy,\n              buildingId: d.buildingId,\n            },\n          }));\n        });\n        // DRAW RESTAURANTS\n        getSingleEndpoint({}, \"Restaurants\").then((response) => {\n          this.restaurants = response.data.map((d) => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n            properties: {\n              restaurantId: d.restaurantId,\n              maxOccupancy: d.maxOccupancy,\n              foodCost: d.foodCost,\n              buildingId: d.buildingId,\n            },\n          }));\n        });\n        this.$nextTick(() => {\n          this.drawBuildings();\n          this.drawApt();\n          this.drawPub();\n          this.drawRestaurants();\n          this.drawDensity();\n        });\n      });\n    });\n  },\n  methods: {\n    toggleCollapse(card) {\n      card.isCollapsed = !card.isCollapsed;\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawDensity() {\n      d3.select(\"#density-map\")\n        .append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"700px\")\n        .append(\"g\")\n        .classed(\"density\", true)\n        .datum(this.buildings)\n        .call(dm);\n    },\n  },\n};\n</script>\n\n\n<style>\n#vc2 {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  color: white;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .pubsButton {\n  background-color: #0700c5; \n}\n\n.button-container .restButton {\n  background-color: #ff06fa; \n}\n\n.button-container button:not(.active) {\n  opacity: 0.5;\n}\n.minimal-card {\n    margin-bottom: 1rem;\n  }\n  \n  .card-header {\n    color: black;\n    cursor: pointer;\n    padding: 1rem;\n    transition: background-color 0.3s ease-in-out;\n  }\n  \n  .card-header.open {\n    background-color: #007bff46;\n  }\n  \n  .card-header.closed {\n    background-color: rgb(80, 141, 255);\n  }\n  \n  .card-title {\n    font-weight: bold;\n  }\n  \n  .card-description {\n    font-size: 14px;\n  }\n  \n  .card-content {\n    padding: 1rem;\n    background-color: white;\n  }\n  .arrow-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(180deg);\n  transition: transform 0.3s ease;\n}\n\n.rotated .arrow {\n  transform: rotate(180deg);\n}\n/* STILE DENSITY */\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}