{"ast":null,"code":"import * as d3 from 'd3';\nexport function TrafficPlot(data) {\n  const parsedData = data.map(d => {\n    const startDate = new Date(d.travelStartTime);\n    const endDate = new Date(d.travelEndTime);\n    const travelTime = (endDate - startDate) / (1000 * 60);\n    return {\n      startDate,\n      endDate,\n      travelTime\n    };\n  });\n  const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n  const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n  const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n  this.totalWeeks = totalWeeks;\n  this.weekStart = weekStart;\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = 800 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n  const svg = d3.select(this.$refs.daledale).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n  const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  const updateChart = () => {\n    const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n    const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n    const currentWeekData = parsedData.filter(d => {\n      return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n    });\n    const maxTravelTime = d3.max(currentWeekData, d => d.travelTime);\n    this.maxTravelTime = maxTravelTime;\n    const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n    this.totalTravelTime = totalTravelTime;\n    const totalTravelTimes = weekdays.map(day => {\n      const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n      const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n      return {\n        day,\n        totalTravelTime\n      };\n    });\n    svg.selectAll(\".bar\").remove();\n    svg.selectAll(\".x-axis\").remove();\n    svg.selectAll(\".y-axis\").remove();\n    const x = d3.scaleBand().range([0, width]).padding(0.1).domain(weekdays);\n    const y = d3.scaleLinear().range([height, 0]).domain([0, maxTravelTime]);\n    chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x));\n    chart.append(\"g\").attr(\"class\", \"y-axis\").call(d3.axisLeft(y));\n    this.chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n  };\n  updateChart();\n  this.nextWeek = () => {\n    if (this.currentWeekIndex < this.totalWeeks - 1) {\n      this.currentWeekIndex++;\n      updateChart();\n    }\n  };\n  this.previousWeek = () => {\n    if (this.currentWeekIndex > 0) {\n      this.currentWeekIndex--;\n      updateChart();\n    }\n  };\n}","map":{"version":3,"names":["d3","TrafficPlot","data","parsedData","map","d","startDate","Date","travelStartTime","endDate","travelEndTime","travelTime","weekStart","getFullYear","getMonth","getDate","getDay","weekEnd","length","totalWeeks","Math","ceil","margin","top","right","bottom","left","width","height","svg","select","$refs","daledale","append","attr","chart","updateChart","currentWeekStart","currentWeekIndex","currentWeekEnd","currentWeekData","filter","maxTravelTime","max","weekdays","totalTravelTime","reduce","total","totalTravelTimes","day","dayTravelTimes","indexOf","sum","selectAll","remove","x","scaleBand","range","padding","domain","y","scaleLinear","call","axisBottom","axisLeft","enter","bandwidth","nextWeek","previousWeek"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["import * as d3 from 'd3';\n\nexport function TrafficPlot(data) {\n    const parsedData = data.map((d) => {\n      const startDate = new Date(d.travelStartTime);\n      const endDate = new Date(d.travelEndTime);\n      const travelTime = (endDate - startDate) / (1000 * 60);\n      return { startDate, endDate, travelTime };\n    });\n\n    const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n    const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n    const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n    this.totalWeeks = totalWeeks;\n    this.weekStart = weekStart;\n\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    const svg = d3\n      .select(this.$refs.daledale)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n     const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    const updateChart = () => {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      const currentWeekData = parsedData.filter((d) => {\n        return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n      });\n      const maxTravelTime = d3.max(currentWeekData, (d) => d.travelTime);\n      this.maxTravelTime = maxTravelTime;\n\n      const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n      const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n      this.totalTravelTime = totalTravelTime;\n      const totalTravelTimes = weekdays.map((day) => {\n        const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n        const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n        return { day, totalTravelTime };\n      });\n\n      svg.selectAll(\".bar\").remove();\n      svg.selectAll(\".x-axis\").remove();\n      svg.selectAll(\".y-axis\").remove();\n\n      const x = d3.scaleBand().range([0, width]).padding(0.1).domain(weekdays);\n      const y = d3.scaleLinear().range([height, 0]).domain([0, maxTravelTime]);\n\n      chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x));\n      chart.append(\"g\").attr(\"class\", \"y-axis\").call(d3.axisLeft(y));\n\n      this.chart\n        .selectAll(\".bar\")\n        .data(totalTravelTimes)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) => x(d.day))\n        .attr(\"y\", (d) => y(d.totalTravelTime))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"height\", (d) => height - y(d.totalTravelTime));\n    };\n\n    updateChart();\n\n    this.nextWeek = () => {\n      if (this.currentWeekIndex < this.totalWeeks - 1) {\n        this.currentWeekIndex++;\n        updateChart();\n      }\n    };\n\n    this.previousWeek = () => {\n      if (this.currentWeekIndex > 0) {\n        this.currentWeekIndex--;\n        updateChart();\n      }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}