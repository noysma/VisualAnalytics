{"ast":null,"code":"import * as d3 from 'd3';\nexport function createScatterplot(divElement, data) {\n  // set the dimensions and margins of the graph\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  };\n  const width = 700 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n\n  // append a container div to the specified div element\n  const container = d3.select(divElement).style('position', 'relative').style('width', width + margin.left + margin.right + 'px').style('height', height + margin.top + margin.bottom + 'px');\n\n  // create the x scale\n  const x = d3.scaleLinear().domain([0, d3.max(data, d => +d.hourlyRate) + 10]).range([0, width]);\n\n  // create the y scale\n  const y = d3.scaleLinear().domain([0, d3.max(data, d => +d.counts) + 5]).range([height, 0]);\n\n  // add the x axis\n  const xAxis = d3.axisBottom(x).ticks(5);\n  container.append('div').style('position', 'absolute').style('bottom', '0').style('width', '100%').style('text-align', 'center').call(xAxis);\n\n  // add the y axis\n  const yAxis = d3.axisLeft(y).ticks(5);\n  container.append('div').style('position', 'absolute').style('left', '0').style('height', '100%').style('display', 'flex').style('align-items', 'center').call(yAxis);\n\n  // add the data points\n  const circles = container.selectAll('.circle').data(data).enter().append('div').attr('class', 'circle').style('position', 'absolute').style('width', '10px').style('height', '10px').style('border-radius', '50%').style('background-color', 'gray').style('left', d => x(+d.hourlyRate) + 'px').style('top', d => y(+d.counts) + 'px');\n\n  // show tooltip on mouseover\n  circles.on('mouseover', function (event, d) {\n    d3.select(this).style('background-color', 'red');\n    container.append('div').attr('class', 'tooltip').style('position', 'absolute').style('left', event.pageX + 10 + 'px').style('top', event.pageY + 10 + 'px').style('background-color', 'white').style('padding', '5px').style('border', '1px solid black').html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n  });\n\n  // hide tooltip on mouseout\n  circles.on('mouseout', function () {\n    d3.select(this).style('background-color', 'gray');\n    container.selectAll('.tooltip').remove();\n  });\n}\n\n// import * as d3 from 'd3';\n\n// export function createScatterplot(svgElement, tooltipElement, data) {\n//   // set the dimensions and margins of the graph\n//   const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n//   const width = 700 - margin.left - margin.right;\n//   const height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the component element\n//   const svg = d3.select(svgElement)\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n//   // Creazione della scala X\n//   const x = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n//     .range([0, width]);\n\n//   // Creazione della scala Y\n//   const y = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.counts) + 5])\n//     .range([height, 0]);\n\n//   // Creazione dell'asse X\n//   const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n//   svg.append('g')\n//     .attr('transform', `translate(0, ${height})`)\n//     .call(xAxis);\n\n//   // Creazione dell'asse Y\n//   const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n//   svg.append('g')\n//     .call(yAxis);\n\n//   // Aggiunta dei punti\n//   const circles = svg.selectAll('circle')\n//     .data(data)\n//     .enter()\n//     .append('circle')\n//     .attr('cx', d => x(+d.hourlyRate))\n//     .attr('cy', d => y(+d.counts))\n//     .attr('r', 5)\n//     .style('fill', 'gray')\n//     .style('stroke', 'darkgray');\n\n//   // Mostra il tooltip con le informazioni del punto\n//   const tooltip = d3.select(tooltipElement)\n//   .style('position', 'absolute')\n//   .style('background-color', 'rgba(0, 0, 0, 0.8)')\n//   .style('color', 'white')\n//   .style('border', '1px solid white')\n//   .style('border-radius', '4px')\n//   .style('padding', '6px')\n//   .style('opacity', 0)\n//   .style('pointer-events', 'none')\n\n//   circles.on('mouseover', function (event, d) {\n//       // Evidenzia il pallino\n//       d3.select(this).style('fill', 'red');\n\n//       // Mostra il tooltip con le informazioni del punto\n//       const xPosition = x(+d.hourlyRate) + margin.left + margin.right ;\n//       const yPosition = y(+d.counts) + height -20;\n\n//         tooltip.transition()\n//         .duration(500)\n//         .style(\"opacity\", 0.9)\n//         .style(\"left\", xPosition + \"px\")\n//         .style(\"top\", yPosition + \"px\");\n\n//       tooltip.html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n\n//       // Aggiungi le linee tratteggiate\n//       svg.append('line')\n//         .attr('x1', x(+d.hourlyRate))\n//         .attr('y1', height)\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'black')\n//         .style('stroke-dasharray', '2,2');\n\n//       svg.append('line')\n//         .attr('x1', 0)\n//         .attr('y1', y(+d.counts))\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'gray')\n//         .style('stroke-dasharray', '2,2');\n//     })\n//     circles.on('mouseout', function () {\n//       // Ripristina il colore grigio per il pallino\n//       d3.select(this).style('fill', 'gray');\n\n//       // Nascondi il tooltip\n//       tooltip.transition()\n//         .duration(500)\n//         .style('opacity', 0);\n\n//       // Rimuovi le linee tratteggiate\n//       svg.selectAll('line').remove();\n//     });\n// }","map":{"version":3,"names":["d3","createScatterplot","divElement","data","margin","top","right","bottom","left","width","height","container","select","style","x","scaleLinear","domain","max","d","hourlyRate","range","y","counts","xAxis","axisBottom","ticks","append","call","yAxis","axisLeft","circles","selectAll","enter","attr","on","event","pageX","pageY","html","jobId","remove"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/Turnover.js"],"sourcesContent":["import * as d3 from 'd3';\n\nexport function createScatterplot(divElement, data) {\n  // set the dimensions and margins of the graph\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n  const width = 700 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n\n  // append a container div to the specified div element\n  const container = d3.select(divElement)\n    .style('position', 'relative')\n    .style('width', width + margin.left + margin.right + 'px')\n    .style('height', height + margin.top + margin.bottom + 'px');\n\n  // create the x scale\n  const x = d3.scaleLinear()\n    .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n    .range([0, width]);\n\n  // create the y scale\n  const y = d3.scaleLinear()\n    .domain([0, d3.max(data, d => +d.counts) + 5])\n    .range([height, 0]);\n\n  // add the x axis\n  const xAxis = d3.axisBottom(x).ticks(5);\n  container.append('div')\n    .style('position', 'absolute')\n    .style('bottom', '0')\n    .style('width', '100%')\n    .style('text-align', 'center')\n    .call(xAxis);\n\n  // add the y axis\n  const yAxis = d3.axisLeft(y).ticks(5);\n  container.append('div')\n    .style('position', 'absolute')\n    .style('left', '0')\n    .style('height', '100%')\n    .style('display', 'flex')\n    .style('align-items', 'center')\n    .call(yAxis);\n\n  // add the data points\n  const circles = container.selectAll('.circle')\n    .data(data)\n    .enter()\n    .append('div')\n    .attr('class', 'circle')\n    .style('position', 'absolute')\n    .style('width', '10px')\n    .style('height', '10px')\n    .style('border-radius', '50%')\n    .style('background-color', 'gray')\n    .style('left', d => x(+d.hourlyRate) + 'px')\n    .style('top', d => y(+d.counts) + 'px');\n\n  // show tooltip on mouseover\n  circles.on('mouseover', function (event, d) {\n    d3.select(this).style('background-color', 'red');\n\n    container.append('div')\n      .attr('class', 'tooltip')\n      .style('position', 'absolute')\n      .style('left', (event.pageX + 10) + 'px')\n      .style('top', (event.pageY + 10) + 'px')\n      .style('background-color', 'white')\n      .style('padding', '5px')\n      .style('border', '1px solid black')\n      .html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n  });\n\n  // hide tooltip on mouseout\n  circles.on('mouseout', function () {\n    d3.select(this).style('background-color', 'gray');\n    container.selectAll('.tooltip').remove();\n  });\n}\n\n\n\n\n\n\n\n// import * as d3 from 'd3';\n\n// export function createScatterplot(svgElement, tooltipElement, data) {\n//   // set the dimensions and margins of the graph\n//   const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n//   const width = 700 - margin.left - margin.right;\n//   const height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the component element\n//   const svg = d3.select(svgElement)\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n//   // Creazione della scala X\n//   const x = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n//     .range([0, width]);\n\n//   // Creazione della scala Y\n//   const y = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.counts) + 5])\n//     .range([height, 0]);\n\n//   // Creazione dell'asse X\n//   const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n//   svg.append('g')\n//     .attr('transform', `translate(0, ${height})`)\n//     .call(xAxis);\n\n//   // Creazione dell'asse Y\n//   const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n//   svg.append('g')\n//     .call(yAxis);\n\n//   // Aggiunta dei punti\n//   const circles = svg.selectAll('circle')\n//     .data(data)\n//     .enter()\n//     .append('circle')\n//     .attr('cx', d => x(+d.hourlyRate))\n//     .attr('cy', d => y(+d.counts))\n//     .attr('r', 5)\n//     .style('fill', 'gray')\n//     .style('stroke', 'darkgray');\n\n//   // Mostra il tooltip con le informazioni del punto\n//   const tooltip = d3.select(tooltipElement)\n//   .style('position', 'absolute')\n//   .style('background-color', 'rgba(0, 0, 0, 0.8)')\n//   .style('color', 'white')\n//   .style('border', '1px solid white')\n//   .style('border-radius', '4px')\n//   .style('padding', '6px')\n//   .style('opacity', 0)\n//   .style('pointer-events', 'none')\n\n\n//   circles.on('mouseover', function (event, d) {\n//       // Evidenzia il pallino\n//       d3.select(this).style('fill', 'red');\n\n//       // Mostra il tooltip con le informazioni del punto\n//       const xPosition = x(+d.hourlyRate) + margin.left + margin.right ;\n//       const yPosition = y(+d.counts) + height -20;\n\n\n\n//         tooltip.transition()\n//         .duration(500)\n//         .style(\"opacity\", 0.9)\n//         .style(\"left\", xPosition + \"px\")\n//         .style(\"top\", yPosition + \"px\");\n\n//       tooltip.html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n\n//       // Aggiungi le linee tratteggiate\n//       svg.append('line')\n//         .attr('x1', x(+d.hourlyRate))\n//         .attr('y1', height)\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'black')\n//         .style('stroke-dasharray', '2,2');\n\n//       svg.append('line')\n//         .attr('x1', 0)\n//         .attr('y1', y(+d.counts))\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'gray')\n//         .style('stroke-dasharray', '2,2');\n//     })\n//     circles.on('mouseout', function () {\n//       // Ripristina il colore grigio per il pallino\n//       d3.select(this).style('fill', 'gray');\n    \n//       // Nascondi il tooltip\n//       tooltip.transition()\n//         .duration(500)\n//         .style('opacity', 0);\n    \n//       // Rimuovi le linee tratteggiate\n//       svg.selectAll('line').remove();\n//     });\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}