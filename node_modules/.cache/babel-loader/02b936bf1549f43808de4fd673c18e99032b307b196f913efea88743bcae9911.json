{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      weekStart: new Date(2023, 4, 1),\n      // 1st May 2023\n      currentWeekIndex: 0,\n      maxTravelTime: 0,\n      yScaleMax: 0\n    };\n  },\n  mounted() {\n    this.drawChart();\n  },\n  methods: {\n    drawChart() {\n      const svg = d3.select(\"#chart\");\n      const width = +svg.attr(\"width\");\n      const height = +svg.attr(\"height\");\n      const chart = svg.append(\"g\").attr(\"transform\", `translate(50,50)`);\n      const parsedData = this.parseData(this.data);\n      const updateChart = () => {\n        const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n        const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n        const currentWeekData = parsedData.filter(d => {\n          return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n        });\n        const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const totalTravelTimes = weekdays.map(day => {\n          const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n          const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n          return {\n            day,\n            totalTravelTime\n          };\n        });\n        const maxTravelTime = d3.max(parsedData, d => d.travelTime);\n        this.maxTravelTime = maxTravelTime;\n        this.yScaleMax = this.maxTravelTime + 30;\n        svg.selectAll(\".bar\").remove();\n        svg.selectAll(\".x-axis\").remove();\n        svg.selectAll(\".y-axis\").remove();\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n        const yTicks = d3.range(0, this.yScaleMax, 30);\n        const y = d3.scaleLinear().domain([0, this.yScaleMax]).range([height, 0]);\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n          const hours = Math.floor(d / 60);\n          const minutes = d % 60;\n          return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n        });\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n        chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n      };\n      this.$watch(\"currentWeekIndex\", () => {\n        updateChart();\n      });\n    },\n    parseData(data) {\n      const parseDate = d3.timeParse(\"%Y-%m-%d\");\n      return data.map(d => {\n        return {\n          startDate: parseDate(d.startDate),\n          travelTime: d.travelTime\n        };\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n    },\n    getCurrentWeekLabel() {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()}`;\n    }\n  }\n};","map":{"version":3,"names":["d3","data","weekStart","Date","currentWeekIndex","maxTravelTime","yScaleMax","mounted","drawChart","methods","svg","select","width","attr","height","chart","append","parsedData","parseData","updateChart","currentWeekStart","getFullYear","getMonth","getDate","currentWeekEnd","currentWeekData","filter","d","startDate","weekdays","totalTravelTimes","map","day","dayTravelTimes","getDay","indexOf","totalTravelTime","sum","travelTime","max","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","Math","floor","minutes","call","enter","bandwidth","$watch","parseDate","timeParse","formatWeekLabel","value","toDateString","getCurrentWeekLabel"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n      <div ref=\"chartContainer\"></div>\n    </div>\n  </template>\n  \n  <script>\nimport * as d3 from \"d3\";\n\nexport default {\n  data() {\n    return {\n      weekStart: new Date(2023, 4, 1), // 1st May 2023\n      currentWeekIndex: 0,\n      maxTravelTime: 0,\n      yScaleMax: 0,\n    };\n  },\n  mounted() {\n    this.drawChart();\n  },\n  methods: {\n    drawChart() {\n      const svg = d3.select(\"#chart\");\n      const width = +svg.attr(\"width\");\n      const height = +svg.attr(\"height\");\n      const chart = svg.append(\"g\").attr(\"transform\", `translate(50,50)`);\n\n      const parsedData = this.parseData(this.data);\n\n      const updateChart = () => {\n        const currentWeekStart = new Date(\n          this.weekStart.getFullYear(),\n          this.weekStart.getMonth(),\n          this.weekStart.getDate() + this.currentWeekIndex * 7\n        );\n        const currentWeekEnd = new Date(\n          currentWeekStart.getFullYear(),\n          currentWeekStart.getMonth(),\n          currentWeekStart.getDate() + 6\n        );\n        const currentWeekData = parsedData.filter((d) => {\n          return (\n            d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd\n          );\n        });\n\n        const weekdays = [\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n          \"Sunday\",\n        ];\n        const totalTravelTimes = weekdays.map((day) => {\n          const dayTravelTimes = currentWeekData.filter(\n            (d) => d.startDate.getDay() === weekdays.indexOf(day)\n          );\n          const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n          return { day, totalTravelTime };\n        });\n\n        const maxTravelTime = d3.max(parsedData, (d) => d.travelTime);\n        this.maxTravelTime = maxTravelTime;\n\n        this.yScaleMax = this.maxTravelTime + 30;\n\n        svg.selectAll(\".bar\").remove();\n        svg.selectAll(\".x-axis\").remove();\n        svg.selectAll(\".y-axis\").remove();\n\n        const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n        const yTicks = d3.range(0, this.yScaleMax, 30);\n        const y = d3.scaleLinear().domain([0, this.yScaleMax]).range([height, 0]);\n\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3\n          .axisLeft(y)\n          .tickValues(yTicks)\n          .tickFormat((d) => {\n            const hours = Math.floor(d / 60);\n            const minutes = d % 60;\n            return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n          });\n\n        chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n\n        chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n        chart\n          .selectAll(\".bar\")\n          .data(totalTravelTimes)\n          .enter()\n          .append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", (d) => x(d.day))\n          .attr(\"y\", (d) => y(d.totalTravelTime))\n          .attr(\"width\", x.bandwidth())\n          .attr(\"height\", (d) => height - y(d.totalTravelTime));\n      };\n\n      this.$watch(\"currentWeekIndex\", () => {\n        updateChart();\n      });\n    },\n    parseData(data) {\n      const parseDate = d3.timeParse(\"%Y-%m-%d\");\n      return data.map((d) => {\n        return {\n          startDate: parseDate(d.startDate),\n          travelTime: d.travelTime,\n        };\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(\n        this.weekStart.getFullYear(),\n        this.weekStart.getMonth(),\n        this.weekStart.getDate() + value * 7\n      );\n      const currentWeekEnd = new Date(\n        currentWeekStart.getFullYear(),\n        currentWeekStart.getMonth(),\n        currentWeekStart.getDate() + 6\n      );\n      return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n    },\n    getCurrentWeekLabel() {\n      const currentWeekStart = new Date(\n        this.weekStart.getFullYear(),\n        this.weekStart.getMonth(),\n        this.weekStart.getDate() + this.currentWeekIndex * 7\n      );\n      const currentWeekEnd = new Date(\n        currentWeekStart.getFullYear(),\n        currentWeekStart.getMonth(),\n        currentWeekStart.getDate() + 6\n      );\n      return `${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()}`;\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}