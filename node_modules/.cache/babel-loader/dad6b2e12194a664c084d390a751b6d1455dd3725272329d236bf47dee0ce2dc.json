{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  data() {\n    return {\n      selectedWeek: 0,\n      weekLabel: '',\n      data: []\n    };\n  },\n  mounted() {\n    this.loadData();\n  },\n  methods: {\n    loadData() {\n      d3.csv('travelDuration.csv', d => {\n        return {\n          date: new Date(d.date),\n          travelDuration: +d.travelDuration\n        };\n      }).then(data => {\n        this.data = data;\n        this.createChart();\n      }).catch(error => {\n        console.error('Error loading data:', error);\n      });\n    },\n    createChart() {\n      // Impostazioni del grafico\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 40\n      };\n      var width = 800 - margin.left - margin.right;\n      var height = 400 - margin.top - margin.bottom;\n\n      // Creazione dello scale per gli assi\n      var x = d3.scaleBand().range([0, width]).padding(0.1);\n      var y = d3.scaleLinear().range([height, 0]);\n\n      // Creazione dell'elemento SVG\n      var svg = d3.select(\"#chart\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      // Funzione per aggiornare il grafico\n      var updateChart = (startDate, endDate) => {\n        // Filtra i dati per la settimana selezionata\n        var filteredData = this.data.filter(function (d) {\n          var date = new Date(d.date);\n          return date >= startDate && date <= endDate;\n        });\n\n        // Calcola la media settimanale\n        var averageDuration = d3.mean(filteredData, function (d) {\n          return d.travelDuration;\n        });\n\n        // Aggiorna il dominio degli assi\n        var weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n        x.domain(weekdays);\n        y.domain([0, d3.max(filteredData, function (d) {\n          return d.travelDuration;\n        })]);\n\n        // Rimuovi eventuali barre precedenti e linea media\n        svg.selectAll(\".bar\").remove();\n        svg.selectAll(\".average-line\").remove();\n\n        // Aggiungi le nuove barre\n        svg.selectAll(\".bar\").data(weekdays).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", function (d) {\n          return x(d);\n        }).attr(\"width\", x.bandwidth()).attr(\"y\", function (d) {\n          var dayData = filteredData.find(function (data) {\n            return weekdays[new Date(data.date).getDay()] === d;\n          });\n          return dayData ? y(dayData.travelDuration) : height;\n        }).attr(\"height\", function (d) {\n          var dayData = filteredData.find(function (data) {\n            return weekdays[new Date(data.date).getDay()] === d;\n          });\n          return dayData ? height - y(dayData.travelDuration) : 0;\n        });\n\n        // Aggiungi la linea della media settimanale\n        svg.append(\"line\").attr(\"class\", \"average-line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", y(averageDuration)).attr(\"y2\", y(averageDuration)).attr(\"stroke\", \"red\").attr(\"stroke-dasharray\", \"4\");\n      };\n\n      // Inizializza il grafico con la prima settimana\n      var initialStartDate = d3.min(this.data, function (d) {\n        return new Date(d.date);\n      });\n      var initialEndDate = d3.timeDay.offset(initialStartDate, 6);\n      updateChart(initialStartDate, initialEndDate);\n\n      // Aggiungi asse x\n      svg.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n\n      // Funzione per formattare la data come \"dd/mm/yyyy\"\n      function formatDate(date) {\n        var day = date.getDate();\n        var month = date.getMonth() + 1;\n        var year = date.getFullYear();\n        return day + \"/\" + month + \"/\" + year;\n      }\n\n      // Aggiorna il grafico quando viene cambiata la settimana\n      this.$watch('selectedWeek', function () {\n        var weekIndex = this.selectedWeek;\n        var startDate = d3.timeMonday.offset(d3.min(this.data, d => d.date), weekIndex);\n        var endDate = d3.timeSunday.ceil(startDate);\n        this.weekLabel = formatDate(startDate) + \" - \" + formatDate(endDate);\n        updateChart(startDate, endDate);\n      });\n    }\n  }\n};","map":{"version":3,"names":["d3","data","selectedWeek","weekLabel","mounted","loadData","methods","csv","d","date","Date","travelDuration","then","createChart","catch","error","console","margin","top","right","bottom","left","width","height","x","scaleBand","range","padding","y","scaleLinear","svg","select","attr","append","updateChart","startDate","endDate","filteredData","filter","averageDuration","mean","weekdays","domain","max","selectAll","remove","enter","bandwidth","dayData","find","getDay","initialStartDate","min","initialEndDate","timeDay","offset","call","axisBottom","formatDate","day","getDate","month","getMonth","year","getFullYear","$watch","weekIndex","timeMonday","timeSunday","ceil"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Hours in traffic</h2>\n    <svg id=\"chart\"></svg>\n    <br>\n    <input type=\"range\" v-model=\"selectedWeek\" min=\"0\" max=\"51\">\n    <label>{{ weekLabel }}</label>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  data() {\n    return {\n      selectedWeek: 0,\n      weekLabel: '',\n      data: []\n    };\n  },\n  mounted() {\n    this.loadData();\n  },\n  methods: {\n    loadData() {\n      d3.csv('travelDuration.csv', (d) => {\n        return {\n          date: new Date(d.date),\n          travelDuration: +d.travelDuration\n        };\n      }).then((data) => {\n        this.data = data;\n        this.createChart();\n      }).catch((error) => {\n        console.error('Error loading data:', error);\n      });\n    },\n    createChart() {\n      // Impostazioni del grafico\n      var margin = { top: 20, right: 20, bottom: 30, left: 40 };\n      var width = 800 - margin.left - margin.right;\n      var height = 400 - margin.top - margin.bottom;\n\n      // Creazione dello scale per gli assi\n      var x = d3.scaleBand()\n        .range([0, width])\n        .padding(0.1);\n\n      var y = d3.scaleLinear()\n        .range([height, 0]);\n\n      // Creazione dell'elemento SVG\n      var svg = d3.select(\"#chart\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      // Funzione per aggiornare il grafico\n      var updateChart = (startDate, endDate) => {\n        // Filtra i dati per la settimana selezionata\n        var filteredData = this.data.filter(function (d) {\n          var date = new Date(d.date);\n          return date >= startDate && date <= endDate;\n        });\n\n        // Calcola la media settimanale\n        var averageDuration = d3.mean(filteredData, function (d) { return d.travelDuration; });\n\n        // Aggiorna il dominio degli assi\n        var weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n        x.domain(weekdays);\n        y.domain([0, d3.max(filteredData, function (d) { return d.travelDuration; })]);\n\n        // Rimuovi eventuali barre precedenti e linea media\n        svg.selectAll(\".bar\").remove();\n        svg.selectAll(\".average-line\").remove();\n\n        // Aggiungi le nuove barre\n        svg.selectAll(\".bar\")\n          .data(weekdays)\n          .enter().append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", function (d) { return x(d); })\n          .attr(\"width\", x.bandwidth())\n          .attr(\"y\", function (d) {\n            var dayData = filteredData.find(function (data) {\n              return weekdays[new Date(data.date).getDay()] === d;\n            });\n            return dayData ? y(dayData.travelDuration) : height;\n          })\n          .attr(\"height\", function (d) {\n            var dayData = filteredData.find(function (data) {\n              return weekdays[new Date(data.date).getDay()] === d;\n            });\n            return dayData ? height - y(dayData.travelDuration) : 0;\n          });\n\n        // Aggiungi la linea della media settimanale\n        svg.append(\"line\")\n          .attr(\"class\", \"average-line\")\n          .attr(\"x1\", 0)\n          .attr(\"x2\", width)\n          .attr(\"y1\", y(averageDuration))\n          .attr(\"y2\", y(averageDuration))\n          .attr(\"stroke\", \"red\")\n          .attr(\"stroke-dasharray\", \"4\");\n      };\n\n      // Inizializza il grafico con la prima settimana\n      var initialStartDate = d3.min(this.data, function (d) { return new Date(d.date); });\n      var initialEndDate = d3.timeDay.offset(initialStartDate, 6);\n      updateChart(initialStartDate, initialEndDate);\n\n      // Aggiungi asse x\n      svg.append(\"g\")\n        .attr(\"class\", \"x-axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n      // Funzione per formattare la data come \"dd/mm/yyyy\"\n      function formatDate(date) {\n        var day = date.getDate();\n        var month = date.getMonth() + 1;\n        var year = date.getFullYear();\n        return day + \"/\" + month + \"/\" + year;\n      }\n\n      // Aggiorna il grafico quando viene cambiata la settimana\n      this.$watch('selectedWeek', function () {\n        var weekIndex = this.selectedWeek;\n        var startDate = d3.timeMonday.offset(d3.min(this.data, d => d.date), weekIndex);\n        var endDate = d3.timeSunday.ceil(startDate);\n        this.weekLabel = formatDate(startDate) + \" - \" + formatDate(endDate);\n        updateChart(startDate, endDate);\n      });\n    }\n  }\n};\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- eslint-disable vue/multi-word-component-names\n<template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <br>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div id=\"bar-chart\"></div>  \n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n\n    <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n    <div ref=\"chartContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nimport { createBarChart } from \"@/assets/CitizenPurchase\";\n\nconst bm = new BuildingMap();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n\n    getSingleEndpoint({ participantId: 2 }, 'FinancialJournal').then((response) => {\n      this.FinancialJournal = response.data.map(d => ({\n        type: \"Feature\",\n        properties: {\n          amount: d.amount,\n          category: d.category,\n          timestamp: d.timestamp,\n          id: d.id,\n        },\n      }));\n\n      // Rimuovi la selezione delle barre precedenti\n      d3.select(\"#bar-chart\").selectAll(\".bar\").remove();\n      createBarChart(this.FinancialJournal);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select('g.apartments')\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}