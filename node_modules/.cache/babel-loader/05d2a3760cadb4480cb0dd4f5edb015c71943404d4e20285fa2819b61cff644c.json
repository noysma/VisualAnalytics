{"ast":null,"code":"import * as d3 from 'd3';\nimport { timeFormat } from 'd3-time-format';\nexport function drawChart(data, chartContainer) {\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = 600 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n  const maxTravelDurationSeconds = d3.max(data, d => +d.travelDuration);\n  const maxTravelDurationHours = maxTravelDurationSeconds / 3600;\n  const maxYValue = maxTravelDurationHours + 10;\n  const svg = d3.select(chartContainer).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n  const xScale = d3.scaleBand().range([0, width]).padding(0.1).domain(data.map(d => getDayOfWeek(d.date)));\n  const yScale = d3.scaleLinear().range([height, 0]).domain([0, maxYValue]);\n  svg.append('g').attr('class', 'x-axis').attr('transform', `translate(0,${height})`).call(d3.axisBottom(xScale));\n  svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n  svg.selectAll('.bar').data(data).enter().append('rect').attr('class', 'bar').attr('x', d => xScale(getDayOfWeek(d.date))).attr('y', d => yScale(+d.travelDuration / 3600)).attr('width', xScale.bandwidth()).attr('height', d => height - yScale(+d.travelDuration / 3600));\n  const weeklyMean = d3.mean(weekData, d => +d.travelDuration / 3600);\n  const meanData = data.map(d => ({\n    date: d.date,\n    mean: weeklyMean\n  }));\n  const line = d3.line().x(d => xScale(getDayOfWeek(d.date)) + xScale.bandwidth() / 2).y(d => yScale(d.mean)).curve(d3.curveMonotoneX);\n  svg.append('path').datum(meanData).attr('class', 'mean-line').attr('d', line);\n}\nexport function updateChart(data, selectedWeek, chartContainer) {\n  const weekData = data.slice(selectedWeek * 7, selectedWeek * 7 + 7);\n  const svg = d3.select(chartContainer).select('svg');\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = svg.attr('width') - margin.left - margin.right;\n  const height = svg.attr('height') - margin.top - margin.bottom;\n  const xScale = d3.scaleBand().range([0, width]).padding(0.1).domain(weekData.map(d => getDayOfWeek(d.date)));\n  const maxTravelDurationMinutes = d3.max(data, d => +d.travelDuration);\n  const maxTravelDurationHours = maxTravelDurationMinutes / 3600;\n  const maxYValue = maxTravelDurationHours + 10;\n  const yScale = d3.scaleLinear().range([height, 0]).domain([0, maxYValue]);\n  svg.select('.x-axis').call(d3.axisBottom(xScale));\n  svg.select('.y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n  const bars = svg.selectAll('.bar').data(weekData, d => d.date);\n  bars.exit().remove();\n  bars.enter().append('rect').attr('class', 'bar').merge(bars).attr('x', d => margin.left + xScale(getDayOfWeek(d.date))).attr('y', d => margin.top + yScale(+d.travelDuration / 3600)).attr('width', xScale.bandwidth()).attr('height', d => height - yScale(+d.travelDuration / 3600));\n  const weeklyMean = d3.mean(data, d => +d.travelDuration / 3600);\n  const meanData = weekData.map(d => ({\n    date: d.date,\n    mean: weeklyMean\n  }));\n  const line = d3.line().x(d => margin.left + xScale(getDayOfWeek(d.date)) + xScale.bandwidth() / 2).y(d => margin.top + yScale(d.mean)).curve(d3.curveMonotoneX);\n  svg.select('.mean-line').datum(meanData).attr('d', line);\n}\nfunction getDayOfWeek(dateString) {\n  const date = new Date(dateString);\n  const formatDayOfWeek = timeFormat('%A');\n  return formatDayOfWeek(date);\n}","map":{"version":3,"names":["d3","timeFormat","drawChart","data","chartContainer","margin","top","right","bottom","left","width","height","maxTravelDurationSeconds","max","d","travelDuration","maxTravelDurationHours","maxYValue","svg","select","append","attr","xScale","scaleBand","range","padding","domain","map","getDayOfWeek","date","yScale","scaleLinear","call","axisBottom","axisLeft","ticks","tickFormat","format","selectAll","enter","bandwidth","weeklyMean","mean","weekData","meanData","line","x","y","curve","curveMonotoneX","datum","updateChart","selectedWeek","slice","maxTravelDurationMinutes","bars","exit","remove","merge","dateString","Date","formatDayOfWeek"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { timeFormat } from 'd3-time-format';\n\nexport function drawChart(data, chartContainer) {\n  const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n  const width = 600 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n\n  const maxTravelDurationSeconds = d3.max(data, (d) => +d.travelDuration);\n  const maxTravelDurationHours = maxTravelDurationSeconds / 3600 ;\n  const maxYValue = maxTravelDurationHours + 10;\n\n  const svg = d3\n    .select(chartContainer)\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', `translate(${margin.left},${margin.top})`);\n\n  const xScale = d3\n    .scaleBand()\n    .range([0, width])\n    .padding(0.1)\n    .domain(data.map((d) => getDayOfWeek(d.date)));\n\n  const yScale = d3\n    .scaleLinear()\n    .range([height, 0])\n    .domain([0, maxYValue]);\n\n  svg\n    .append('g')\n    .attr('class', 'x-axis')\n    .attr('transform', `translate(0,${height})`)\n    .call(d3.axisBottom(xScale));\n\n  svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n  svg\n    .selectAll('.bar')\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr('class', 'bar')\n    .attr('x', (d) => xScale(getDayOfWeek(d.date)))\n    .attr('y', (d) => yScale(+d.travelDuration / 3600))\n    .attr('width', xScale.bandwidth())\n    .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n\n    const weeklyMean = d3.mean(weekData, (d) => +d.travelDuration / 3600);\n    const meanData = data.map((d) => ({\n    date: d.date,\n    mean: weeklyMean\n  }));\n\n  const line = d3.line()\n    .x((d) => xScale(getDayOfWeek(d.date)) + xScale.bandwidth() / 2)\n    .y((d) => yScale(d.mean))\n    .curve(d3.curveMonotoneX);\n\n  svg.append('path')\n    .datum(meanData)\n    .attr('class', 'mean-line')\n    .attr('d', line);\n}\n\nexport function updateChart(data, selectedWeek, chartContainer) {\n  const weekData = data.slice(selectedWeek * 7, selectedWeek * 7 + 7);\n  const svg = d3.select(chartContainer).select('svg');\n\n  const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n  const width = svg.attr('width') - margin.left - margin.right;\n  const height = svg.attr('height') - margin.top - margin.bottom;\n\n  const xScale = d3\n    .scaleBand()\n    .range([0, width])\n    .padding(0.1)\n    .domain(weekData.map((d) => getDayOfWeek(d.date)));\n\n  const maxTravelDurationMinutes = d3.max(data, (d) => +d.travelDuration);\n  const maxTravelDurationHours = maxTravelDurationMinutes / 3600;\n  const maxYValue = maxTravelDurationHours + 10;\n\n  const yScale = d3\n    .scaleLinear()\n    .range([height, 0])\n    .domain([0, maxYValue]);\n\n  svg.select('.x-axis').call(d3.axisBottom(xScale));\n  svg.select('.y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n  const bars = svg.selectAll('.bar').data(weekData, (d) => d.date);\n\n  bars.exit().remove();\n\n  bars\n    .enter()\n    .append('rect')\n    .attr('class', 'bar')\n    .merge(bars)\n    .attr('x', (d) => margin.left + xScale(getDayOfWeek(d.date)))\n    .attr('y', (d) => margin.top + yScale(+d.travelDuration / 3600 ))\n    .attr('width', xScale.bandwidth())\n    .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n\n  const weeklyMean = d3.mean(data, (d) => +d.travelDuration / 3600);\n  const meanData = weekData.map((d) => ({\n    date: d.date,\n    mean: weeklyMean\n  }));\n\n  const line = d3.line()\n    .x((d) => margin.left + xScale(getDayOfWeek(d.date)) + xScale.bandwidth() / 2)\n    .y((d) => margin.top + yScale(d.mean))\n    .curve(d3.curveMonotoneX);\n\n  svg.select('.mean-line')\n    .datum(meanData)\n    .attr('d', line);\n}\n\nfunction getDayOfWeek(dateString) {\n  const date = new Date(dateString);\n  const formatDayOfWeek = timeFormat('%A');\n  return formatDayOfWeek(date);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}