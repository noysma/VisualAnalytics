{"ast":null,"code":"import * as d3 from \"d3\";\nfunction TrafficPlot(data) {\n  // Parsing delle date e calcolo della durata dei viaggi in minuti\n  const parsedData = data.map(d => {\n    const startDate = new Date(d.travelStartTime);\n    const endDate = new Date(d.travelEndTime);\n    const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n    return {\n      startDate,\n      endDate,\n      travelTime\n    };\n  });\n\n  // Calcola il totale delle settimane\n  const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n  const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n  const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n  this.totalWeeks = totalWeeks;\n  this.weekStart = weekStart;\n\n  // Crea il grafico utilizzando D3\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = 800 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n  const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n  const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n  // Funzione per aggiornare il grafico in base alla settimana selezionata\n  const updateChart = () => {\n    const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n    const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n    const currentWeekData = parsedData.filter(d => {\n      return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n    });\n\n    // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n    const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n    this.totalTravelTime = totalTravelTime;\n    const totalTravelTimes = weekdays.map(day => {\n      const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n      const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n      return {\n        day,\n        totalTravelTime\n      };\n    });\n\n    // Rimuovi il vecchio grafico\n    svg.selectAll(\".bar\").remove();\n    svg.selectAll(\".x-axis\").remove();\n    svg.selectAll(\".y-axis\").remove();\n\n    // Scala per gli assi x e y\n    const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n    const yTicks = d3.range(0, this.maxTravelTime + 600, 600); // Utilizza this.maxTravelTime come valore massimo per l'asse y\n    const y = d3.scaleLinear().domain([0, this.maxTravelTime + 600]).range([height, 0]);\n\n    // Creazione degli assi x e y\n    const xAxis = d3.axisBottom(x);\n    const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n      const hours = Math.floor(d / 60); // Calcola le ore\n      return `${hours}`; // Formatta l'etichetta come \"hh:00\"\n    });\n\n    // Aggiungi gli assi al grafico\n    chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n    chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n    // Crea le barre del grafico\n    chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n  };\n\n  // Calcola il valore massimo della durata del viaggio su tutte le settimane\n  const maxTravelTime = d3.max(parsedData, d => d.travelTime);\n  this.maxTravelTime = maxTravelTime;\n\n  // Aggiorna il grafico iniziale\n  updateChart();\n\n  // Aggiorna il grafico quando viene cambiata la settimana selezionata\n  this.$watch(\"currentWeekIndex\", () => {\n    updateChart();\n  });\n}\nexport { TrafficPlot };","map":{"version":3,"names":["d3","TrafficPlot","data","parsedData","map","d","startDate","Date","travelStartTime","endDate","travelEndTime","travelTime","weekStart","getFullYear","getMonth","getDate","getDay","weekEnd","length","totalWeeks","Math","ceil","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","updateChart","currentWeekStart","currentWeekIndex","currentWeekEnd","currentWeekData","filter","weekdays","totalTravelTime","reduce","total","totalTravelTimes","day","dayTravelTimes","indexOf","sum","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","maxTravelTime","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","floor","call","enter","bandwidth","max","$watch"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["import * as d3 from \"d3\";\n\nfunction TrafficPlot(data) {\n\n    // Parsing delle date e calcolo della durata dei viaggi in minuti\n    const parsedData = data.map((d) => {\n      const startDate = new Date(d.travelStartTime);\n      const endDate = new Date(d.travelEndTime);\n      const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n      return { startDate, endDate, travelTime };\n    });\n\n    // Calcola il totale delle settimane\n    const weekStart = new Date(\n      parsedData[0].startDate.getFullYear(),\n      parsedData[0].startDate.getMonth(),\n      parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay()\n    );\n    const weekEnd = new Date(\n      parsedData[parsedData.length - 1].startDate.getFullYear(),\n      parsedData[parsedData.length - 1].startDate.getMonth(),\n      parsedData[parsedData.length - 1].startDate.getDate() + 6\n    );\n    const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n    this.totalWeeks = totalWeeks;\n    this.weekStart = weekStart;\n\n    // Crea il grafico utilizzando D3\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    const svg = d3\n      .select(this.$refs.chartContainer)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n    const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Funzione per aggiornare il grafico in base alla settimana selezionata\n    const updateChart = () => {\n      const currentWeekStart = new Date(\n        this.weekStart.getFullYear(),\n        this.weekStart.getMonth(),\n        this.weekStart.getDate() + this.currentWeekIndex * 7\n      );\n      const currentWeekEnd = new Date(\n        currentWeekStart.getFullYear(),\n        currentWeekStart.getMonth(),\n        currentWeekStart.getDate() + 6\n      );\n      const currentWeekData = parsedData.filter((d) => {\n        return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n      });\n\n      // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n      const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n      const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n      this.totalTravelTime = totalTravelTime;\n      const totalTravelTimes = weekdays.map((day) => {\n        const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n        const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n        return { day, totalTravelTime };\n      });\n\n      // Rimuovi il vecchio grafico\n      svg.selectAll(\".bar\").remove();\n      svg.selectAll(\".x-axis\").remove();\n      svg.selectAll(\".y-axis\").remove();\n\n      // Scala per gli assi x e y\n      const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n      const yTicks = d3.range(0, this.maxTravelTime + 600, 600); // Utilizza this.maxTravelTime come valore massimo per l'asse y\n      const y = d3.scaleLinear().domain([0, this.maxTravelTime + 600]).range([height, 0]);\n\n      // Creazione degli assi x e y\n      const xAxis = d3.axisBottom(x);\n      const yAxis = d3\n        .axisLeft(y)\n        .tickValues(yTicks)\n        .tickFormat((d) => {\n          const hours = Math.floor(d / 60); // Calcola le ore\n          return `${hours}`; // Formatta l'etichetta come \"hh:00\"\n        });\n\n      // Aggiungi gli assi al grafico\n      chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n      chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n      // Crea le barre del grafico\n      chart\n        .selectAll(\".bar\")\n        .data(totalTravelTimes)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) => x(d.day))\n        .attr(\"y\", (d) => y(d.totalTravelTime))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"height\", (d) => height - y(d.totalTravelTime));\n    };\n\n    // Calcola il valore massimo della durata del viaggio su tutte le settimane\n    const maxTravelTime = d3.max(parsedData, (d) => d.travelTime);\n    this.maxTravelTime = maxTravelTime;\n\n    // Aggiorna il grafico iniziale\n    updateChart();\n\n    // Aggiorna il grafico quando viene cambiata la settimana selezionata\n    this.$watch(\"currentWeekIndex\", () => {\n      updateChart();\n    });\n}\n\nexport { TrafficPlot };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}