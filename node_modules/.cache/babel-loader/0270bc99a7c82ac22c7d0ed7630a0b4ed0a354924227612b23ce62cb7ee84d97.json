{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BuildingMap\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: []\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n    // DRAW APARTMENTS\n    getSingleEndpoint({}, 'Apartments').then(response => {\n      this.apartments = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          numberOfRooms: d.numberOfRooms,\n          apartmentId: d.apartmentId,\n          buildingId: d.buildingId,\n          rentalCost: d.rentalCost,\n          maxOccupancy: d.maxOccupancy\n        }\n      }));\n      this.drawApt();\n    });\n    // DRAW PUBS\n    getSingleEndpoint({}, 'Pubs').then(response => {\n      this.pubs = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          pubId: d.pubId,\n          hourlyCost: d.hourlyCost,\n          maxOccupancy: d.maxOccupancy,\n          buildingId: d.buildingId\n        }\n      }));\n      this.drawPub();\n    });\n    // DRAW RESTAURANTS\n    getSingleEndpoint({}, 'Restaurants').then(response => {\n      this.restaurants = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          restaurantId: d.restaurantId,\n          maxOccupancy: d.maxOccupancy,\n          foodCost: d.foodCost,\n          buildingId: d.buildingId\n        }\n      }));\n      this.drawRestaurants();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n      bl.color(bm.color());\n      d3.select(this.$refs.map).select('g.legend').call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select('g.apartments').datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select('g.pubs').datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select('g.restaurants').datum(this.restaurants).call(rest, bm.extent());\n    }\n  }\n};\n\n// Definisci le dimensioni del diagramma\nvar width = 800;\nvar height = 600;\n\n// Seleziona il contenitore SVG\nvar svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\n// Definisci la scala di colori\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\n\n// Definisci la funzione di formattazione dei numeri\nvar format = d3.format(\",.0f\");\n\n// Prepara i dati\nvar data = {\n  \"nodes\": [{\n    \"name\": \"Lavoro\"\n  }, {\n    \"name\": \"Casa\"\n  }, {\n    \"name\": \"Spesa\"\n  }, {\n    \"name\": \"Svago\"\n  }],\n  \"links\": [{\n    \"source\": 0,\n    \"target\": 1,\n    \"value\": 10\n  }, {\n    \"source\": 0,\n    \"target\": 2,\n    \"value\": 5\n  }, {\n    \"source\": 0,\n    \"target\": 3,\n    \"value\": 3\n  }, {\n    \"source\": 1,\n    \"target\": 2,\n    \"value\": 2\n  }, {\n    \"source\": 1,\n    \"target\": 3,\n    \"value\": 4\n  }, {\n    \"source\": 2,\n    \"target\": 3,\n    \"value\": 1\n  }]\n};\n\n// Crea il layout del diagramma\nvar sankeyLayout = d3.sankey().nodeWidth(15).nodePadding(10).size([width, height]);\nvar sankeyData = sankeyLayout(data);\n\n// Disegna i nodi e le linee\nvar node = svg.append(\"g\").selectAll(\".node\").data(sankeyData.nodes).enter().append(\"rect\").attr(\"class\", \"node\").attr(\"x\", function (d) {\n  return d.x0;\n}).attr(\"y\", function (d) {\n  return d.y0;\n}).attr(\"height\", function (d) {\n  return d.y1 - d.y0;\n}).attr(\"width\", function (d) {\n  return d.x1 - d.x0;\n}).style(\"fill\", function (d) {\n  return color(d.name.replace(/ .*/, \"\"));\n});\nvar link = svg.append(\"g\").selectAll(\".link\").data(sankeyData.links).enter().append(\"path\").attr(\"class\", \"link\").attr(\"d\", d3.sankeyLinkHorizontal()).attr(\"stroke-width\", function (d) {\n  return Math.max(1, d.width);\n}).style(\"stroke\", function (d) {\n  return color(d.source.name.replace(/ .*/, \"\"));\n}).sort(function (a, b) {\n  return b.width - a.width;\n});\n\n// Aggiungi interattività\nnode.append(\"title\").text(function (d) {\n  return d.name + \"\\n\" + format(d.value);\n});\nlink.append(\"title\").text(function (d) {\n  return d.source.name + \" → \" + d.target.name + \"\\n\" + format(d.value);\n});","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","name","components","data","buildings","apartments","pubs","restaurants","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","methods","select","$refs","datum","call","color","extent","width","height","svg","append","attr","scaleOrdinal","schemeCategory10","format","sankeyLayout","sankey","nodeWidth","nodePadding","size","sankeyData","node","selectAll","nodes","enter","x0","y0","y1","x1","style","replace","link","links","sankeyLinkHorizontal","Math","max","source","sort","a","b","text","value","target"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-brand href=\"#\">Vast Challenge 2022</b-navbar-brand>\n      <b-navbar-nav>\n        <b-nav-item href=\"#\">Challenge #1</b-nav-item>\n        <b-nav-item href=\"#\">Challenge #2</b-nav-item>\n        <b-nav-item href=\"#\">Challenge #3</b-nav-item>\n      </b-navbar-nav>\n    </b-navbar>\n\n    <b-container id=\"app\">\n      <b-row>\n        <b-col>\n          <div id=\"map\">\n              <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                  <g class=\"buildings\"></g>\n                  <g class=\"legend\"></g>\n                  <g class=\"apartments\"></g>\n                  <g class=\"pubs\"></g>\n                  <g class=\"restaurants\"></g>\n              </svg>\n          </div>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport {getSingleEndpoint} from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport {BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant} from \"@/assets/BuildingMap\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data(){\n      return {\n          buildings: [],\n          apartments: [],\n          pubs: [],\n          restaurants: [],\n      }\n  },\n  mounted(){\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n        this.buildings = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                buildingId: d.buildingId,\n                buildingType: d.buildingType,\n                maxOccupancy: d.maxOccupancy,\n                units: d.units,\n            },\n        }));\n        this.drawBuildings();\n    });\n    // DRAW APARTMENTS\n    getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                numberOfRooms: d.numberOfRooms,\n                apartmentId: d.apartmentId,\n                buildingId: d.buildingId,\n                rentalCost: d.rentalCost,\n                maxOccupancy: d.maxOccupancy,\n            },\n        }));\n        this.drawApt();      \n    });\n    // DRAW PUBS\n    getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                pubId: d.pubId,\n                hourlyCost: d.hourlyCost,\n                maxOccupancy: d.maxOccupancy,\n                buildingId: d.buildingId,\n            },\n        }));\n        this.drawPub();\n    });\n    // DRAW RESTAURANTS\n    getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex'))\n            .toGeoJSON(),\n            properties:{\n                restaurantId: d.restaurantId,\n                maxOccupancy: d.maxOccupancy,\n                foodCost: d.foodCost,\n                buildingId: d.buildingId,\n            },\n        }));\n        this.drawRestaurants();\n    });                            \n  },\n  methods:{\n      drawBuildings(){\n        d3.select(this.$refs.map).select('g.buildings')\n            .datum(this.buildings)\n            .call(bm);\n\n        bl.color(bm.color());\n\n        d3.select(this.$refs.map).select('g.legend')\n            .call(bl);\n      },\n      drawApt(){\n        d3.select(this.$refs.map).select('g.apartments')\n          .datum(this.apartments)\n          .call(apt, bm.extent())\n      },\n      drawPub(){\n        d3.select(this.$refs.map).select('g.pubs')\n          .datum(this.pubs)\n          .call(pub, bm.extent())\n      },\n      drawRestaurants(){\n        d3.select(this.$refs.map).select('g.restaurants')\n          .datum(this.restaurants)\n          .call(rest, bm.extent())    \n      } \n  }\n}\n\n\n// Definisci le dimensioni del diagramma\nvar width = 800;\nvar height = 600;\n\n// Seleziona il contenitore SVG\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n// Definisci la scala di colori\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\n\n// Definisci la funzione di formattazione dei numeri\nvar format = d3.format(\",.0f\");\n\n// Prepara i dati\nvar data = {\n  \"nodes\": [\n    {\"name\":\"Lavoro\"},\n    {\"name\":\"Casa\"},\n    {\"name\":\"Spesa\"},\n    {\"name\":\"Svago\"}\n  ],\n  \"links\": [\n    {\"source\":0,\"target\":1,\"value\":10},\n    {\"source\":0,\"target\":2,\"value\":5},\n    {\"source\":0,\"target\":3,\"value\":3},\n    {\"source\":1,\"target\":2,\"value\":2},\n    {\"source\":1,\"target\":3,\"value\":4},\n    {\"source\":2,\"target\":3,\"value\":1}\n  ]\n};\n\n// Crea il layout del diagramma\nvar sankeyLayout = d3.sankey()\n    .nodeWidth(15)\n    .nodePadding(10)\n    .size([width, height]);\n\nvar sankeyData = sankeyLayout(data);\n\n// Disegna i nodi e le linee\nvar node = svg.append(\"g\")\n  .selectAll(\".node\")\n  .data(sankeyData.nodes)\n  .enter().append(\"rect\")\n    .attr(\"class\", \"node\")\n    .attr(\"x\", function(d) { return d.x0; })\n    .attr(\"y\", function(d) { return d.y0; })\n    .attr(\"height\", function(d) { return d.y1 - d.y0; })\n    .attr(\"width\", function(d) { return d.x1 - d.x0; })\n    .style(\"fill\", function(d) { return color(d.name.replace(/ .*/, \"\")); });\n\nvar link = svg.append(\"g\")\n  .selectAll(\".link\")\n  .data(sankeyData.links)\n  .enter().append(\"path\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", d3.sankeyLinkHorizontal())\n    .attr(\"stroke-width\", function(d) { return Math.max(1, d.width); })\n    .style(\"stroke\", function(d) { return color(d.source.name.replace(/ .*/, \"\")); })\n    .sort(function(a, b) { return b.width -a.width; });\n\n// Aggiungi interattività\nnode.append(\"title\")\n  .text(function(d) { return d.name + \"\\n\" + format(d.value); });\n\nlink.append(\"title\")\n  .text(function(d) { return d.source.name + \" → \" + d.target.name + \"\\n\" + format(d.value); });\n\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 50px;\n}\n\nsvg g.buildings{\n    fill-opacity: 0.3;\n    stroke: grey;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}