{"ast":null,"code":"import VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      svg: null,\n      // Add svg property to store the SVG element\n      chart: null // Add chart property to store the chart group\n    };\n  },\n\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 1\n      }, \"TravelJournal\").then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Calcola il totale delle settimane\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        this.svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        this.chart = this.svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Funzione per aggiornare il grafico in base alla settimana selezionata\n        const updateChart = () => {\n          const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter(d => {\n            return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n          });\n\n          // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n\n          // Rimuovi il vecchio grafico\n          this.chart.selectAll(\".bar\").remove();\n          this.chart.selectAll(\".x-axis\").remove();\n          this.chart.selectAll(\".y-axis\").remove();\n\n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 600, 600); // Genera intervalli di 10 ore (600 minuti) per l'asse y\n          const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 600]).range([height, 0]);\n\n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60); // Calcola le ore\n            return `${hours}`; // Formatta l'etichetta come \"hh:00\"\n          });\n\n          // Aggiungi gli assi al grafico\n          this.chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n          this.chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n          // Crea le barre del grafico\n          this.chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n        };\n\n        // Aggiorna il grafico iniziale\n        updateChart();\n\n        // Aggiorna il grafico quando viene cambiata la settimana selezionata\n        this.$watch(\"currentWeekIndex\", () => {\n          updateChart();\n        });\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n    },\n    getCurrentWeekLabel() {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      return `${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()}`;\n    }\n  }\n};","map":{"version":3,"names":["VueSlider","getSingleEndpoint","d3","components","data","currentWeekIndex","totalWeeks","travelJournal","weekStart","svg","chart","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","getFullYear","getMonth","getDate","getDay","weekEnd","length","Math","ceil","margin","top","right","bottom","left","width","height","select","$refs","chartContainer","append","attr","updateChart","currentWeekStart","currentWeekEnd","currentWeekData","filter","weekdays","totalTravelTimes","day","dayTravelTimes","indexOf","totalTravelTime","sum","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","max","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","floor","call","enter","bandwidth","$watch","formatWeekLabel","value","toDateString","getCurrentWeekLabel"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n      <div ref=\"chartContainer\"></div>\n    </div>\n  </template>\n  \n  <script>\n  import VueSlider from 'vue-slider-component';\n  import 'vue-slider-component/theme/default.css';\n  import { getSingleEndpoint } from \"../assets/apiConnector\";\n  import * as d3 from \"d3\";\n  \n  export default {\n    components: {\n      VueSlider,\n    },\n    data() {\n      return {\n        currentWeekIndex: 0,\n        totalWeeks: 0,\n        travelJournal: [],\n        weekStart: null,\n        svg: null, // Add svg property to store the SVG element\n        chart: null, // Add chart property to store the chart group\n      };\n    },\n    mounted() {\n      this.createChart();\n    },\n    methods: {\n      createChart() {\n        getSingleEndpoint({ participantId: 1 }, \"TravelJournal\").then((response) => {\n          this.travelJournal = response.data.map((d) => ({\n            type: \"Feature\",\n            properties: {\n              travelStartTime: d.travelStartTime,\n              travelStartLocationId: d.travelStartLocationId,\n              travelEndLocationId: d.travelEndLocationId,\n              checkInTime: d.checkInTime,\n              checkOutTime: d.checkOutTime,\n              endingBalance: d.endingBalance,\n              travelEndTime: d.travelEndTime,\n              participantId: d.participantId,\n              purpose: d.purpose,\n              startingBalance: d.startingBalance,\n              id: d.id,\n            },\n          }));\n          const data = response.data;\n  \n          // Parsing delle date e calcolo della durata dei viaggi in minuti\n          const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n          });\n  \n          // Calcola il totale delle settimane\n          const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n          const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n          const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n          this.totalWeeks = totalWeeks;\n          this.weekStart = weekStart;\n  \n          // Crea il grafico utilizzando D3\n          const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n          const width = 800 - margin.left - margin.right;\n          const height = 400 - margin.top - margin.bottom;\n  \n          this.svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n  \n          this.chart = this.svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n          // Funzione per aggiornare il grafico in base alla settimana selezionata\n          const updateChart = () => {\n            const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n            const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n            const currentWeekData = parsedData.filter((d) => {\n              return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n            });\n  \n            // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n            const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n            const totalTravelTimes = weekdays.map((day) => {\n              const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n              const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n              return { day, totalTravelTime };\n            });\n  \n            // Rimuovi il vecchio grafico\n            this.chart.selectAll(\".bar\").remove();\n            this.chart.selectAll(\".x-axis\").remove();\n            this.chart.selectAll(\".y-axis\").remove();\n  \n            // Scala per gli assi x e y\n            const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n  \n            const yTicks = d3.range(0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 600, 600); // Genera intervalli di 10 ore (600 minuti) per l'asse y\n            const y = d3\n              .scaleLinear()\n              .domain([0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 600])\n              .range([height, 0]);\n  \n            // Creazione degli assi x e y\n            const xAxis = d3.axisBottom(x);\n            const yAxis = d3\n              .axisLeft(y)\n              .tickValues(yTicks)\n              .tickFormat((d) => {\n                const hours = Math.floor(d / 60); // Calcola le ore\n                return `${hours}`; // Formatta l'etichetta come \"hh:00\"\n              });\n  \n            // Aggiungi gli assi al grafico\n            this.chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n  \n            this.chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n  \n            // Crea le barre del grafico\n            this.chart\n              .selectAll(\".bar\")\n              .data(totalTravelTimes)\n              .enter()\n              .append(\"rect\")\n              .attr(\"class\", \"bar\")\n              .attr(\"x\", (d) => x(d.day))\n              .attr(\"y\", (d) => y(d.totalTravelTime))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"height\", (d) => height - y(d.totalTravelTime));\n          };\n  \n          // Aggiorna il grafico iniziale\n          updateChart();\n  \n          // Aggiorna il grafico quando viene cambiata la settimana selezionata\n          this.$watch(\"currentWeekIndex\", () => {\n            updateChart();\n          });\n        });\n      },\n      formatWeekLabel(value) {\n        const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (value * 7));\n        const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n        return `Week ${value + 1} (${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()})`;\n      },\n      getCurrentWeekLabel() {\n        const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n        const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n        return `${currentWeekStart.toDateString()} - ${currentWeekEnd.toDateString()}`;\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  p {\n    margin-bottom: 10px;\n  }\n  </style>\n  \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}