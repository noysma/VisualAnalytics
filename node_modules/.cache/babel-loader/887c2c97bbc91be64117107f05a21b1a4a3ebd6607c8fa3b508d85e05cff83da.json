{"ast":null,"code":"import * as d3 from 'd3';\nfunction BusiestArea() {\n  const color = \"#ffffff\"; // White color for non-residential buildings\n  let extent;\n  function me(selection) {\n    const data = selection.datum();\n    extent = {\n      type: \"GeometryCollection\",\n      geometries: data.map(d => d.geometry)\n    };\n    const projection = d3.geoIdentity().reflectY(true).fitSize([650, 650], extent);\n    const path = d3.geoPath().projection(projection);\n    selection.selectAll(\"path\").data(data).join(\"path\").attr(\"d\", path).attr(\"fill\", color).attr(\"stroke\", \"grey\").attr(\"stroke-width\", 0.5);\n    d3.csv(\"weekdays.csv\").then(weekdayData => {\n      const parsedWeekdayData = weekdayData.map(d => {\n        const coordinates = d.currentLocation.replace(\"POINT (\", \"\").replace(\")\", \"\").split(\" \");\n        return {\n          geometry: {\n            type: \"Point\",\n            coordinates: [parseFloat(coordinates[0]), parseFloat(coordinates[1])]\n          },\n          count: parseInt(d.count)\n        };\n      });\n      selection.selectAll(\".weekday-circle\").data(parsedWeekdayData).join(\"circle\").attr(\"class\", \"weekday-circle\").attr(\"cx\", d => projection(d.geometry.coordinates)[0]).attr(\"cy\", d => projection(d.geometry.coordinates)[1]).attr(\"r\", d => d.count * 0.09).attr(\"fill\", \"red\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"visibility\", \"hidden\");\n    });\n    d3.csv(\"weekends.csv\").then(weekendData => {\n      const parsedWeekendData = weekendData.map(d => {\n        const coordinates = d.currentLocation.replace(\"POINT (\", \"\").replace(\")\", \"\").split(\" \");\n        return {\n          geometry: {\n            type: \"Point\",\n            coordinates: [parseFloat(coordinates[0]), parseFloat(coordinates[1])]\n          },\n          count: parseInt(d.count)\n        };\n      });\n      selection.selectAll(\".weekend-circle\").data(parsedWeekendData).join(\"circle\").attr(\"class\", \"weekend-circle\").attr(\"cx\", d => projection(d.geometry.coordinates)[0]).attr(\"cy\", d => projection(d.geometry.coordinates)[1]).attr(\"r\", d => d.count * 0.09).attr(\"fill\", \"#0079FF\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"visibility\", \"hidden\");\n    });\n  }\n  me.color = function () {\n    return color;\n  };\n  me.extent = function () {\n    return extent;\n  };\n  return me;\n}\nexport { BusiestArea };","map":{"version":3,"names":["d3","BusiestArea","color","extent","me","selection","data","datum","type","geometries","map","d","geometry","projection","geoIdentity","reflectY","fitSize","path","geoPath","selectAll","join","attr","csv","then","weekdayData","parsedWeekdayData","coordinates","currentLocation","replace","split","parseFloat","count","parseInt","style","weekendData","parsedWeekendData"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/BusiestArea.js"],"sourcesContent":["import * as d3 from 'd3';\n\nfunction BusiestArea() {\n  const color = \"#ffffff\"; // White color for non-residential buildings\n  let extent;\n\n  function me(selection) {\n    const data = selection.datum(); \n\n    extent = {\n      type: \"GeometryCollection\",\n      geometries: data.map((d) => d.geometry),\n    };\n\n    const projection = d3.geoIdentity().reflectY(true).fitSize([650, 650], extent);\n\n    const path = d3.geoPath().projection(projection);\n\n    selection\n      .selectAll(\"path\")\n      .data(data)\n      .join(\"path\")\n      .attr(\"d\", path)\n      .attr(\"fill\", color)\n      .attr(\"stroke\", \"grey\")\n      .attr(\"stroke-width\", 0.5);\n\n    d3.csv(\"weekdays.csv\").then((weekdayData) => {\n      const parsedWeekdayData = weekdayData.map((d) => {\n        const coordinates = d.currentLocation\n          .replace(\"POINT (\", \"\")\n          .replace(\")\", \"\")\n          .split(\" \");\n\n        return {\n          geometry: {\n            type: \"Point\",\n            coordinates: [parseFloat(coordinates[0]), parseFloat(coordinates[1])],\n          },\n          count: parseInt(d.count),\n        };\n      });\n\n      selection\n        .selectAll(\".weekday-circle\")\n        .data(parsedWeekdayData)\n        .join(\"circle\")\n        .attr(\"class\", \"weekday-circle\")\n        .attr(\"cx\", (d) => projection(d.geometry.coordinates)[0])\n        .attr(\"cy\", (d) => projection(d.geometry.coordinates)[1])\n        .attr(\"r\", (d) => d.count * 0.09)\n        .attr(\"fill\", \"red\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 1)\n        .style(\"visibility\", \"hidden\");\n    });\n\n    d3.csv(\"weekends.csv\").then((weekendData) => {\n      const parsedWeekendData = weekendData.map((d) => {\n        const coordinates = d.currentLocation\n          .replace(\"POINT (\", \"\")\n          .replace(\")\", \"\")\n          .split(\" \");\n\n        return {\n          geometry: {\n            type: \"Point\",\n            coordinates: [parseFloat(coordinates[0]), parseFloat(coordinates[1])],\n          },\n          count: parseInt(d.count),\n        };\n      });\n\n      selection\n        .selectAll(\".weekend-circle\")\n        .data(parsedWeekendData)\n        .join(\"circle\")\n        .attr(\"class\", \"weekend-circle\")\n        .attr(\"cx\", (d) => projection(d.geometry.coordinates)[0])\n        .attr(\"cy\", (d) => projection(d.geometry.coordinates)[1])\n        .attr(\"r\", (d) => d.count * 0.09)\n        .attr(\"fill\", \"#0079FF\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 1)\n        .style(\"visibility\", \"hidden\");\n    });\n  }\n\n  me.color = function () {\n    return color;\n  };\n\n  me.extent = function () {\n    return extent;\n  };\n\n  return me;\n}\n\nexport { BusiestArea };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}