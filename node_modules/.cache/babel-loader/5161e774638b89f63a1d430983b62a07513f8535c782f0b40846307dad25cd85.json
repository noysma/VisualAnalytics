{"ast":null,"code":"import * as d3 from 'd3';\nexport function createScatterplot(svgElement, data) {\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  };\n  const width = 700 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n  const svg = d3.select(svgElement).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n  const x = d3.scaleLinear().domain([0, d3.max(data, d => +d.hourlyRate) + 10]).range([0, width]);\n  const y = d3.scaleLinear().domain([0, d3.max(data, d => +d.counts) + 5]).range([height, 0]);\n  const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n  svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n  const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n  svg.append('g').call(yAxis);\n  const circles = svg.selectAll('circle').data(data).enter().append('circle').attr('cx', d => x(+d.hourlyRate)).attr('cy', d => y(+d.counts)).attr('r', 5).style('fill', 'gray').style('stroke', 'darkgray');\n  const tooltip = svg.append('g').attr('class', 'tooltip').style('display', 'none');\n  tooltip.append('rect').attr('width', 120).attr('height', 60).attr('fill', 'rgba(0, 0, 0, 0.8)').attr('rx', 4).attr('ry', 4).style('pointer-events', 'none');\n  tooltip.append('text').attr('x', 10).attr('y', 20).style('fill', 'white').style('font-size', '12px').text('');\n  circles.on('mouseover', function (event, d) {\n    d3.select(this).style('fill', 'red');\n    const xPosition = x(+d.hourlyRate) + margin.left + margin.right;\n    const yPosition = y(+d.counts) + height - 20;\n    tooltip.attr('transform', `translate(${xPosition}, ${yPosition})`).style('display', 'block');\n    tooltip.select('text').text(`Job ID: ${d.jobId}\\nTurnover: ${d.counts}\\nHourly wage: ${d.hourlyRate}`);\n  });\n  circles.on('mouseout', function () {\n    d3.select(this).style('fill', 'gray');\n    tooltip.style('display', 'none');\n  });\n}\n\n// import * as d3 from 'd3';\n\n// export function createScatterplot(svgElement, tooltipElement, data) {\n//   // set the dimensions and margins of the graph\n//   const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n//   const width = 700 - margin.left - margin.right;\n//   const height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the component element\n//   const svg = d3.select(svgElement)\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n//   // Creazione della scala X\n//   const x = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n//     .range([0, width]);\n\n//   // Creazione della scala Y\n//   const y = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.counts) + 5])\n//     .range([height, 0]);\n\n//   // Creazione dell'asse X\n//   const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n//   svg.append('g')\n//     .attr('transform', `translate(0, ${height})`)\n//     .call(xAxis);\n\n//   // Creazione dell'asse Y\n//   const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n//   svg.append('g')\n//     .call(yAxis);\n\n//   // Aggiunta dei punti\n//   const circles = svg.selectAll('circle')\n//     .data(data)\n//     .enter()\n//     .append('circle')\n//     .attr('cx', d => x(+d.hourlyRate))\n//     .attr('cy', d => y(+d.counts))\n//     .attr('r', 5)\n//     .style('fill', 'gray')\n//     .style('stroke', 'darkgray');\n\n//   // Mostra il tooltip con le informazioni del punto\n//   const tooltip = d3.select(tooltipElement)\n//   .style('position', 'absolute')\n//   .style('background-color', 'rgba(0, 0, 0, 0.8)')\n//   .style('color', 'white')\n//   .style('border', '1px solid white')\n//   .style('border-radius', '4px')\n//   .style('padding', '6px')\n//   .style('opacity', 0)\n//   .style('pointer-events', 'none')\n\n//   circles.on('mouseover', function (event, d) {\n//       // Evidenzia il pallino\n//       d3.select(this).style('fill', 'red');\n\n//       // Mostra il tooltip con le informazioni del punto\n//       const xPosition = x(+d.hourlyRate) + margin.left + margin.right ;\n//       const yPosition = y(+d.counts) + height -20;\n\n//         tooltip.transition()\n//         .duration(500)\n//         .style(\"opacity\", 0.9)\n//         .style(\"left\", xPosition + \"px\")\n//         .style(\"top\", yPosition + \"px\");\n\n//       tooltip.html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n\n//       // Aggiungi le linee tratteggiate\n//       svg.append('line')\n//         .attr('x1', x(+d.hourlyRate))\n//         .attr('y1', height)\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'black')\n//         .style('stroke-dasharray', '2,2');\n\n//       svg.append('line')\n//         .attr('x1', 0)\n//         .attr('y1', y(+d.counts))\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'gray')\n//         .style('stroke-dasharray', '2,2');\n//     })\n//     circles.on('mouseout', function () {\n//       // Ripristina il colore grigio per il pallino\n//       d3.select(this).style('fill', 'gray');\n\n//       // Nascondi il tooltip\n//       tooltip.transition()\n//         .duration(500)\n//         .style('opacity', 0);\n\n//       // Rimuovi le linee tratteggiate\n//       svg.selectAll('line').remove();\n//     });\n// }","map":{"version":3,"names":["d3","createScatterplot","svgElement","data","margin","top","right","bottom","left","width","height","svg","select","attr","append","x","scaleLinear","domain","max","d","hourlyRate","range","y","counts","xAxis","axisBottom","tickValues","call","yAxis","axisLeft","circles","selectAll","enter","style","tooltip","text","on","event","xPosition","yPosition","jobId"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/Turnover.js"],"sourcesContent":["import * as d3 from 'd3';\n\nexport function createScatterplot(svgElement, data) {\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n  const width = 700 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n\n  const svg = d3.select(svgElement)\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n  const x = d3.scaleLinear()\n    .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n    .range([0, width]);\n\n  const y = d3.scaleLinear()\n    .domain([0, d3.max(data, d => +d.counts) + 5])\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n  svg.append('g')\n    .attr('transform', `translate(0, ${height})`)\n    .call(xAxis);\n\n  const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n  svg.append('g')\n    .call(yAxis);\n\n  const circles = svg.selectAll('circle')\n    .data(data)\n    .enter()\n    .append('circle')\n    .attr('cx', d => x(+d.hourlyRate))\n    .attr('cy', d => y(+d.counts))\n    .attr('r', 5)\n    .style('fill', 'gray')\n    .style('stroke', 'darkgray');\n\n  const tooltip = svg.append('g')\n    .attr('class', 'tooltip')\n    .style('display', 'none');\n\n  tooltip.append('rect')\n    .attr('width', 120)\n    .attr('height', 60)\n    .attr('fill', 'rgba(0, 0, 0, 0.8)')\n    .attr('rx', 4)\n    .attr('ry', 4)\n    .style('pointer-events', 'none');\n\n  tooltip.append('text')\n    .attr('x', 10)\n    .attr('y', 20)\n    .style('fill', 'white')\n    .style('font-size', '12px')\n    .text('');\n\n  circles.on('mouseover', function (event, d) {\n    d3.select(this).style('fill', 'red');\n\n    const xPosition = x(+d.hourlyRate) + margin.left + margin.right;\n    const yPosition = y(+d.counts) + height - 20;\n\n    tooltip.attr('transform', `translate(${xPosition}, ${yPosition})`)\n      .style('display', 'block');\n    \n    tooltip.select('text')\n      .text(`Job ID: ${d.jobId}\\nTurnover: ${d.counts}\\nHourly wage: ${d.hourlyRate}`);\n  });\n\n  circles.on('mouseout', function () {\n    d3.select(this).style('fill', 'gray');\n    tooltip.style('display', 'none');\n  });\n}\n\n\n\n\n\n\n\n\n// import * as d3 from 'd3';\n\n// export function createScatterplot(svgElement, tooltipElement, data) {\n//   // set the dimensions and margins of the graph\n//   const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n//   const width = 700 - margin.left - margin.right;\n//   const height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the component element\n//   const svg = d3.select(svgElement)\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n//   // Creazione della scala X\n//   const x = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n//     .range([0, width]);\n\n//   // Creazione della scala Y\n//   const y = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.counts) + 5])\n//     .range([height, 0]);\n\n//   // Creazione dell'asse X\n//   const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n//   svg.append('g')\n//     .attr('transform', `translate(0, ${height})`)\n//     .call(xAxis);\n\n//   // Creazione dell'asse Y\n//   const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n//   svg.append('g')\n//     .call(yAxis);\n\n//   // Aggiunta dei punti\n//   const circles = svg.selectAll('circle')\n//     .data(data)\n//     .enter()\n//     .append('circle')\n//     .attr('cx', d => x(+d.hourlyRate))\n//     .attr('cy', d => y(+d.counts))\n//     .attr('r', 5)\n//     .style('fill', 'gray')\n//     .style('stroke', 'darkgray');\n\n//   // Mostra il tooltip con le informazioni del punto\n//   const tooltip = d3.select(tooltipElement)\n//   .style('position', 'absolute')\n//   .style('background-color', 'rgba(0, 0, 0, 0.8)')\n//   .style('color', 'white')\n//   .style('border', '1px solid white')\n//   .style('border-radius', '4px')\n//   .style('padding', '6px')\n//   .style('opacity', 0)\n//   .style('pointer-events', 'none')\n\n\n//   circles.on('mouseover', function (event, d) {\n//       // Evidenzia il pallino\n//       d3.select(this).style('fill', 'red');\n\n//       // Mostra il tooltip con le informazioni del punto\n//       const xPosition = x(+d.hourlyRate) + margin.left + margin.right ;\n//       const yPosition = y(+d.counts) + height -20;\n\n\n\n//         tooltip.transition()\n//         .duration(500)\n//         .style(\"opacity\", 0.9)\n//         .style(\"left\", xPosition + \"px\")\n//         .style(\"top\", yPosition + \"px\");\n\n//       tooltip.html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n\n//       // Aggiungi le linee tratteggiate\n//       svg.append('line')\n//         .attr('x1', x(+d.hourlyRate))\n//         .attr('y1', height)\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'black')\n//         .style('stroke-dasharray', '2,2');\n\n//       svg.append('line')\n//         .attr('x1', 0)\n//         .attr('y1', y(+d.counts))\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'gray')\n//         .style('stroke-dasharray', '2,2');\n//     })\n//     circles.on('mouseout', function () {\n//       // Ripristina il colore grigio per il pallino\n//       d3.select(this).style('fill', 'gray');\n    \n//       // Nascondi il tooltip\n//       tooltip.transition()\n//         .duration(500)\n//         .style('opacity', 0);\n    \n//       // Rimuovi le linee tratteggiate\n//       svg.selectAll('line').remove();\n//     });\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}