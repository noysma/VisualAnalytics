{"ast":null,"code":"import * as d3 from 'd3';\nimport { timeFormat } from 'd3-time-format';\nexport function drawChart(data, chartContainer) {\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = 600 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n  const maxTravelDurationSeconds = d3.max(data, d => +d.travelDuration);\n  const maxTravelDurationHours = maxTravelDurationSeconds / 3600;\n  const maxYValue = maxTravelDurationHours + 10;\n  const svg = d3.select(chartContainer).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n  const xScale = d3.scaleBand().range([0, width]).padding(0.1).domain(data.map(d => getDayOfWeek(d.date)));\n  const yScale = d3.scaleLinear().range([height, 0]).domain([0, maxYValue]);\n  svg.append('g').attr('class', 'x-axis').attr('transform', `translate(0,${height})`).call(d3.axisBottom(xScale));\n  svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n  svg.selectAll('.bar').data(data).enter().append('rect').attr('class', 'bar').attr('x', d => xScale(getDayOfWeek(d.date))).attr('y', d => yScale(+d.travelDuration / 3600)).attr('width', xScale.bandwidth()).attr('height', d => height - yScale(+d.travelDuration / 3600));\n  const filteredData = data.filter(d => +d.travelDuration > 0);\n  const averageDuration = d3.mean(filteredData, d => +d.travelDuration / 3600);\n  svg.append('line').attr('class', 'average-line').attr('x1', 0).attr('y1', yScale(averageDuration)).attr('x2', width).attr('y2', yScale(averageDuration)).style('stroke', 'red').style('stroke-width', 2).style('stroke-dasharray', '5 5');\n  svg.append('text').attr('class', 'average-label').attr('x', width + margin.right).attr('y', yScale(averageDuration)).attr('dx', 5).attr('dy', -5).style('text-anchor', 'start').style('font-size', '12px').text(`Avg ${averageDuration.toFixed(2)} hours`);\n}\nfunction getDayOfWeek(dateString) {\n  const date = new Date(dateString);\n  const formatDayOfWeek = timeFormat('%A');\n  return formatDayOfWeek(date);\n}\n\n// import * as d3 from 'd3';\n// import { timeFormat } from 'd3-time-format';\n\n// export function drawChart(data, chartContainer) {\n//   const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n//   const width = 600 - margin.left - margin.right;\n//   const height = 400 - margin.top - margin.bottom;\n\n//   const maxTravelDurationSeconds = d3.max(data, (d) => +d.travelDuration);\n//   const maxTravelDurationHours = maxTravelDurationSeconds / 3600 ;\n//   const maxYValue = maxTravelDurationHours + 10;\n\n//   const svg = d3\n//     .select(chartContainer)\n//     .append('svg')\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//   const xScale = d3\n//     .scaleBand()\n//     .range([0, width])\n//     .padding(0.1)\n//     .domain(data.map((d) => getDayOfWeek(d.date)));\n\n//   const yScale = d3\n//     .scaleLinear()\n//     .range([height, 0])\n//     .domain([0, maxYValue]);\n\n//   svg\n//     .append('g')\n//     .attr('class', 'x-axis')\n//     .attr('transform', `translate(0,${height})`)\n//     .call(d3.axisBottom(xScale));\n\n//   svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n//   svg\n//     .selectAll('.bar')\n//     .data(data)\n//     .enter()\n//     .append('rect')\n//     .attr('class', 'bar')\n//     .attr('x', (d) => xScale(getDayOfWeek(d.date)))\n//     .attr('y', (d) => yScale(+d.travelDuration / 3600))\n//     .attr('width', xScale.bandwidth())\n//     .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n// }\n\n// export function updateChart(data, selectedWeek, chartContainer) {\n//   const weekData = data.slice(selectedWeek * 7, selectedWeek * 7 + 7);\n//   const svg = d3.select(chartContainer).select('svg');\n\n//   const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n//   const width = svg.attr('width') - margin.left - margin.right;\n//   const height = svg.attr('height') - margin.top - margin.bottom;\n\n//   const xScale = d3\n//     .scaleBand()\n//     .range([0, width])\n//     .padding(0.1)\n//     .domain(weekData.map((d) => getDayOfWeek(d.date)));\n\n//   const maxTravelDurationMinutes = d3.max(data, (d) => +d.travelDuration);\n//   const maxTravelDurationHours = maxTravelDurationMinutes / 3600;\n//   const maxYValue = maxTravelDurationHours + 10;\n\n//   const yScale = d3\n//     .scaleLinear()\n//     .range([height, 0])\n//     .domain([0, maxYValue]);\n\n//   svg.select('.x-axis').call(d3.axisBottom(xScale));\n//   svg.select('.y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n//   const bars = svg.selectAll('.bar').data(weekData, (d) => d.date);\n\n//   bars.exit().remove();\n\n//   bars\n//     .enter()\n//     .append('rect')\n//     .attr('class', 'bar')\n//     .merge(bars)\n//     .attr('x', (d) => margin.left + xScale(getDayOfWeek(d.date)))\n//     .attr('y', (d) => margin.top + yScale(+d.travelDuration / 3600 ))\n//     .attr('width', xScale.bandwidth())\n//     .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n// }\n\n// function getDayOfWeek(dateString) {\n//   const date = new Date(dateString);\n//   const formatDayOfWeek = timeFormat('%A');\n//   return formatDayOfWeek(date);\n// }","map":{"version":3,"names":["d3","timeFormat","drawChart","data","chartContainer","margin","top","right","bottom","left","width","height","maxTravelDurationSeconds","max","d","travelDuration","maxTravelDurationHours","maxYValue","svg","select","append","attr","xScale","scaleBand","range","padding","domain","map","getDayOfWeek","date","yScale","scaleLinear","call","axisBottom","axisLeft","ticks","tickFormat","format","selectAll","enter","bandwidth","filteredData","filter","averageDuration","mean","style","text","toFixed","dateString","Date","formatDayOfWeek"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { timeFormat } from 'd3-time-format';\n\nexport function drawChart(data, chartContainer) {\n  const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n  const width = 600 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n\n  const maxTravelDurationSeconds = d3.max(data, (d) => +d.travelDuration);\n  const maxTravelDurationHours = maxTravelDurationSeconds / 3600;\n  const maxYValue = maxTravelDurationHours + 10;\n\n  const svg = d3\n    .select(chartContainer)\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', `translate(${margin.left},${margin.top})`);\n\n  const xScale = d3\n    .scaleBand()\n    .range([0, width])\n    .padding(0.1)\n    .domain(data.map((d) => getDayOfWeek(d.date)));\n\n  const yScale = d3\n    .scaleLinear()\n    .range([height, 0])\n    .domain([0, maxYValue]);\n\n  svg\n    .append('g')\n    .attr('class', 'x-axis')\n    .attr('transform', `translate(0,${height})`)\n    .call(d3.axisBottom(xScale));\n\n  svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n  svg\n    .selectAll('.bar')\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr('class', 'bar')\n    .attr('x', (d) => xScale(getDayOfWeek(d.date)))\n    .attr('y', (d) => yScale(+d.travelDuration / 3600))\n    .attr('width', xScale.bandwidth())\n    .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n\n  const filteredData = data.filter((d) => +d.travelDuration > 0);\n  const averageDuration = d3.mean(filteredData, (d) => +d.travelDuration / 3600);\n\n  svg\n    .append('line')\n    .attr('class', 'average-line')\n    .attr('x1', 0)\n    .attr('y1', yScale(averageDuration))\n    .attr('x2', width)\n    .attr('y2', yScale(averageDuration))\n    .style('stroke', 'red')\n    .style('stroke-width', 2)\n    .style('stroke-dasharray', '5 5');\n\n  svg\n    .append('text')\n    .attr('class', 'average-label')\n    .attr('x', width + margin.right)\n    .attr('y', yScale(averageDuration))\n    .attr('dx', 5)\n    .attr('dy', -5)\n    .style('text-anchor', 'start')\n    .style('font-size', '12px')\n    .text(`Avg ${averageDuration.toFixed(2)} hours`);\n}\n\n\nfunction getDayOfWeek(dateString) {\n  const date = new Date(dateString);\n  const formatDayOfWeek = timeFormat('%A');\n  return formatDayOfWeek(date);\n}\n\n\n\n\n\n\n// import * as d3 from 'd3';\n// import { timeFormat } from 'd3-time-format';\n\n// export function drawChart(data, chartContainer) {\n//   const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n//   const width = 600 - margin.left - margin.right;\n//   const height = 400 - margin.top - margin.bottom;\n\n//   const maxTravelDurationSeconds = d3.max(data, (d) => +d.travelDuration);\n//   const maxTravelDurationHours = maxTravelDurationSeconds / 3600 ;\n//   const maxYValue = maxTravelDurationHours + 10;\n\n//   const svg = d3\n//     .select(chartContainer)\n//     .append('svg')\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//   const xScale = d3\n//     .scaleBand()\n//     .range([0, width])\n//     .padding(0.1)\n//     .domain(data.map((d) => getDayOfWeek(d.date)));\n\n//   const yScale = d3\n//     .scaleLinear()\n//     .range([height, 0])\n//     .domain([0, maxYValue]);\n\n//   svg\n//     .append('g')\n//     .attr('class', 'x-axis')\n//     .attr('transform', `translate(0,${height})`)\n//     .call(d3.axisBottom(xScale));\n\n//   svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n//   svg\n//     .selectAll('.bar')\n//     .data(data)\n//     .enter()\n//     .append('rect')\n//     .attr('class', 'bar')\n//     .attr('x', (d) => xScale(getDayOfWeek(d.date)))\n//     .attr('y', (d) => yScale(+d.travelDuration / 3600))\n//     .attr('width', xScale.bandwidth())\n//     .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n// }\n\n// export function updateChart(data, selectedWeek, chartContainer) {\n//   const weekData = data.slice(selectedWeek * 7, selectedWeek * 7 + 7);\n//   const svg = d3.select(chartContainer).select('svg');\n\n//   const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n//   const width = svg.attr('width') - margin.left - margin.right;\n//   const height = svg.attr('height') - margin.top - margin.bottom;\n\n//   const xScale = d3\n//     .scaleBand()\n//     .range([0, width])\n//     .padding(0.1)\n//     .domain(weekData.map((d) => getDayOfWeek(d.date)));\n\n//   const maxTravelDurationMinutes = d3.max(data, (d) => +d.travelDuration);\n//   const maxTravelDurationHours = maxTravelDurationMinutes / 3600;\n//   const maxYValue = maxTravelDurationHours + 10;\n\n//   const yScale = d3\n//     .scaleLinear()\n//     .range([height, 0])\n//     .domain([0, maxYValue]);\n\n//   svg.select('.x-axis').call(d3.axisBottom(xScale));\n//   svg.select('.y-axis').call(d3.axisLeft(yScale).ticks(10).tickFormat(d3.format('d')));\n\n//   const bars = svg.selectAll('.bar').data(weekData, (d) => d.date);\n\n//   bars.exit().remove();\n\n//   bars\n//     .enter()\n//     .append('rect')\n//     .attr('class', 'bar')\n//     .merge(bars)\n//     .attr('x', (d) => margin.left + xScale(getDayOfWeek(d.date)))\n//     .attr('y', (d) => margin.top + yScale(+d.travelDuration / 3600 ))\n//     .attr('width', xScale.bandwidth())\n//     .attr('height', (d) => height - yScale(+d.travelDuration / 3600));\n// }\n\n// function getDayOfWeek(dateString) {\n//   const date = new Date(dateString);\n//   const formatDayOfWeek = timeFormat('%A');\n//   return formatDayOfWeek(date);\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}