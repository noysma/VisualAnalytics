{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      isCollapsed: false,\n      // Stato del primo box collassabile\n      isCollapsed2: false // Stato del secondo box collassabile\n    };\n  },\n\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then(response => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy\n          }\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select('g.legend').call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select('g.apartments').datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select('g.pubs').datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select('g.restaurants').datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      const pubsGroup = d3.select(this.$refs.map).select('g.pubs');\n      const isHidden = pubsGroup.classed('hidden');\n      pubsGroup.classed('hidden', !isHidden);\n    },\n    toggleRestaurants() {\n      const restaurantsGroup = d3.select(this.$refs.map).select('g.restaurants');\n      const isHidden = restaurantsGroup.classed('hidden');\n      restaurantsGroup.classed('hidden', !isHidden);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","name","components","data","buildings","apartments","pubs","restaurants","isCollapsed","isCollapsed2","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","methods","select","$refs","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","pubsGroup","isHidden","classed","toggleRestaurants","restaurantsGroup"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<template>\n  <div id=\"vc2\">\n    <div class=\"container\">\n      <h1>Challenge 2: Patterns of Life</h1>\n      <p>\n        Considers the patterns of daily life throughout the city. \n        You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n      </p>\n      \n      <b-collapse v-model=\"isCollapsed\" class=\"mb-3\">\n        <b-button block variant=\"light\" size=\"sm\" slot=\"trigger\">\n          Question 1\n        </b-button>\n        <b-collapse-body>\n          <b-card>\n            <p>Answer this question</p>\n            <!-- Tutto ciò che c'è dopo il <p> e prima della fine di </b-card> -->\n          </b-card>\n        </b-collapse-body>\n      </b-collapse>\n      \n      <!-- Altri box collassabili -->\n      <b-collapse v-model=\"isCollapsed2\" class=\"mb-3\">\n        <b-button block variant=\"light\" size=\"sm\" slot=\"trigger\">\n          Question 2\n        </b-button>\n        <b-collapse-body>\n          <b-card>\n            <p>Answer this question</p>\n            <!-- Tutto ciò che c'è dopo il <p> e prima della fine di </b-card> -->\n          </b-card>\n        </b-collapse-body>\n      </b-collapse>\n      \n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <b-button size=\"sm\" @click=\"togglePubs\" style=\"background-color: #0700C5\">Pubs</b-button>\n            <b-button size=\"sm\" @click=\"toggleRestaurants\" style=\"background-color: #FF06FA\">Restaurants</b-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <svg width=\"100%\" height=\"700px\" ref=\"map\">\n      <g class=\"buildings\"></g>\n      <g class=\"legend\"></g>\n      <g class=\"apartments\"></g>\n      <g class=\"pubs hidden\"></g>\n      <g class=\"restaurants hidden\"></g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      isCollapsed: false, // Stato del primo box collassabile\n      isCollapsed2: false, // Stato del secondo box collassabile\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map)\n        .select('g.legend')\n        .call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select('g.apartments')\n        .datum(this.apartments)\n        .call(apt, bm.extent())\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent())\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent())\n    },\n    togglePubs() {\n      const pubsGroup = d3.select(this.$refs.map).select('g.pubs');\n      const isHidden = pubsGroup.classed('hidden');\n      pubsGroup.classed('hidden', !isHidden);\n    },\n    toggleRestaurants() {\n      const restaurantsGroup = d3.select(this.$refs.map).select('g.restaurants');\n      const isHidden = restaurantsGroup.classed('hidden');\n      restaurantsGroup.classed('hidden', !isHidden);\n    }\n  }\n}\n</script>\n\n<style>\n#vc2 {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n}\n\n.hidden {\n  display: none;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}