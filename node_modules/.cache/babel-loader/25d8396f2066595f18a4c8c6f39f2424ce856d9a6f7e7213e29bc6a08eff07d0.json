{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nimport { createBarChart } from \"@/assets/CitizenPurchase\";\nconst bm = new BuildingMap();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: {\n          active: false,\n          maxHeight: null\n        },\n        2: {\n          active: false,\n          maxHeight: null\n        },\n        3: {\n          active: false,\n          maxHeight: null\n        },\n        4: {\n          active: false,\n          maxHeight: null\n        }\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: []\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then(response => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy\n          }\n        }));\n        this.drawApt();\n      });\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n    getSingleEndpoint({\n      participantId: 2\n    }, 'FinancialJournal').then(response => {\n      this.FinancialJournal = response.data.map(d => ({\n        type: \"Feature\",\n        properties: {\n          amount: d.amount,\n          category: d.category,\n          timestamp: d.timestamp,\n          id: d.id\n        }\n      }));\n\n      // Rimuovi la selezione delle barre precedenti\n      d3.select(\"#bar-chart\").selectAll(\".bar\").remove();\n      createBarChart(this.FinancialJournal);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select('g.apartments').datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select('g.pubs').datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select('g.restaurants').datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      const pubsGroup = d3.select(this.$refs.map).select('g.pubs');\n      const isHidden = pubsGroup.classed('hidden');\n      pubsGroup.classed('hidden', !isHidden);\n    },\n    toggleRestaurants() {\n      const restaurantsGroup = d3.select(this.$refs.map).select('g.restaurants');\n      const isHidden = restaurantsGroup.classed('hidden');\n      restaurantsGroup.classed('hidden', !isHidden);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","wkx","require","d3","BuildingMap","BuildingApt","BuildingPub","BuildingRestaurant","createBarChart","bm","apt","pub","rest","name","components","data","panels","active","maxHeight","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","FinancialJournal","mounted","then","response","map","d","type","geometry","Geometry","parse","Buffer","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","participantId","amount","category","timestamp","id","select","selectAll","remove","methods","toggleAccordion","section","$refs","datum","call","extent","togglePubs","pubsGroup","isHidden","classed","toggleRestaurants","restaurantsGroup"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n        <svg width=\"100%\" height=\"700px\" ref=\"map\">\n          <g class=\"buildings\"></g>\n          <g class=\"legend\"></g>\n          <g class=\"apartments\"></g>\n          <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n          <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n          <g class=\"pubs hidden\"></g>\n          <g class=\"restaurants hidden\"></g>\n        </svg>   </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div id=\"bar-chart\"></div>  \n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n\n    <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n    <div ref=\"chartContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nimport { createBarChart } from \"@/assets/CitizenPurchase\";\n\n\nconst bm = new BuildingMap();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\nname: 'App',\ncomponents: {},\n    data() {\n        return {\n          panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n        buildings: [],\n        apartments: [],\n        pubs: [],\n        restaurants: [],\n        pubsActive: false,\n        restaurantsActive: false,\n        FinancialJournal: [],\n        }\n    },\n    mounted() {\n        // DRAW THE MAP\n        getSingleEndpoint({}, 'Buildings').then((response) => {\n        this.buildings = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n            properties: {\n            buildingId: d.buildingId,\n            buildingType: d.buildingType,\n            maxOccupancy: d.maxOccupancy,\n            units: d.units,\n            },\n        }));\n\n        // DRAW APARTMENTS\n        getSingleEndpoint({}, 'Apartments').then((response) => {\n            this.apartments = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n            properties: {\n                numberOfRooms: d.numberOfRooms,\n                apartmentId: d.apartmentId,\n                buildingId: d.buildingId,\n                rentalCost: d.rentalCost,\n                maxOccupancy: d.maxOccupancy,\n            },\n            }));\n            this.drawApt();\n        });\n\n        // DRAW PUBS\n        getSingleEndpoint({}, 'Pubs').then((response) => {\n            this.pubs = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n            properties: {\n                pubId: d.pubId,\n                hourlyCost: d.hourlyCost,\n                maxOccupancy: d.maxOccupancy,\n                buildingId: d.buildingId,\n            },\n            }));\n            this.drawPub();\n        });\n\n        // DRAW RESTAURANTS\n        getSingleEndpoint({}, 'Restaurants').then((response) => {\n            this.restaurants = response.data.map(d => ({\n            type: \"Feature\",\n            geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n            properties: {\n                restaurantId: d.restaurantId,\n                maxOccupancy: d.maxOccupancy,\n                foodCost: d.foodCost,\n                buildingId: d.buildingId,\n            },\n            }));\n            this.drawRestaurants();\n        });\n        this.drawBuildings();\n        });\n\n        getSingleEndpoint({ participantId: 2 }, 'FinancialJournal').then((response) => {\n            this.FinancialJournal = response.data.map(d => ({\n            type: \"Feature\",\n            properties: {\n                amount: d.amount,\n                category: d.category,\n                timestamp: d.timestamp,\n                id: d.id,\n            },\n            }));\n            \n            // Rimuovi la selezione delle barre precedenti\n            d3.select(\"#bar-chart\").selectAll(\".bar\").remove();\n            createBarChart(this.FinancialJournal);\n        });\n    },\n    methods: {\n      toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n        drawBuildings() {\n        d3.select(this.$refs.map)\n            .select('g.buildings')\n            .datum(this.buildings)\n            .call(bm);\n        },\n        drawApt() {\n        d3.select(this.$refs.map)\n            .select('g.apartments')\n            .datum(this.apartments)\n            .call(apt, bm.extent());\n        },\n        drawPub() {\n        d3.select(this.$refs.map)\n            .select('g.pubs')\n            .datum(this.pubs)\n            .call(pub, bm.extent());\n        },\n        drawRestaurants() {\n        d3.select(this.$refs.map)\n            .select('g.restaurants')\n            .datum(this.restaurants)\n            .call(rest, bm.extent());\n        },\n        togglePubs() {\n        const pubsGroup = d3.select(this.$refs.map).select('g.pubs');\n        const isHidden = pubsGroup.classed('hidden');\n        pubsGroup.classed('hidden', !isHidden);\n        },\n        toggleRestaurants() {\n        const restaurantsGroup = d3.select(this.$refs.map).select('g.restaurants');\n        const isHidden = restaurantsGroup.classed('hidden');\n        restaurantsGroup.classed('hidden', !isHidden);\n        },        \n    }\n    }\n</script>\n\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title{\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px; \n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px; \n  border-radius: 20px;\n}\n\n.active, .accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n#map {\nmargin-top: 50px;\nposition: relative;\n}\n\nsvg g.buildings {\nfill-opacity: 0.3;\nstroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba; \n}\n\n.button-container .restButton {\n  background-color: #ff06fa; \n}\n\n.button-container .active {\n  opacity: 1;\n}\n.hidden {\n  display: none;\n}\n\n</style> "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}