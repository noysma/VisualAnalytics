{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data() {\n    return {\n      travelData: [{\n        day: 'Monday',\n        duration: 120\n      }, {\n        day: 'Tuesday',\n        duration: 90\n      }, {\n        day: 'Wednesday',\n        duration: 180\n      }, {\n        day: 'Thursday',\n        duration: 150\n      }, {\n        day: 'Friday',\n        duration: 200\n      }, {\n        day: 'Saturday',\n        duration: 160\n      }, {\n        day: 'Sunday',\n        duration: 110\n      }],\n      selectedWeek: 0\n    };\n  },\n  computed: {\n    weeks() {\n      // Divide il tuo array di dati in settimane\n      const weeks = [];\n      const daysPerWeek = 7;\n      for (let i = 0; i < this.travelData.length; i += daysPerWeek) {\n        weeks.push(this.travelData.slice(i, i + daysPerWeek));\n      }\n      return weeks;\n    }\n  },\n  mounted() {\n    this.drawChart();\n  },\n  watch: {\n    selectedWeek() {\n      this.drawChart();\n    }\n  },\n  methods: {\n    drawChart() {\n      const weekData = this.weeks[this.selectedWeek];\n\n      // Rimuovi il grafico precedente prima di ridisegnarlo\n      d3.select(this.$refs.chart).selectAll('*').remove();\n\n      // Imposta le dimensioni del grafico\n      const width = 400;\n      const height = 300;\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 40,\n        left: 40\n      };\n      const chartWidth = width - margin.left - margin.right;\n      const chartHeight = height - margin.top - margin.bottom;\n\n      // Crea la scala per l'asse x (giorni della settimana)\n      const xScale = d3.scaleBand().domain(weekData.map(d => d.day)).range([0, chartWidth]).padding(0.1);\n\n      // Crea la scala per l'asse y (durata del viaggio in ore)\n      const yScale = d3.scaleLinear().domain([0, d3.max(weekData, d => d.duration / 60)]).range([chartHeight, 0]);\n\n      // Crea l'elemento SVG\n      const svg = d3.select(this.$refs.chart).append('svg').attr('width', width).attr('height', height);\n\n      // Aggiungi il contenitore del grafico con margine\n      const chart = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Crea le barre del grafico\n      chart.selectAll('.bar').data(weekData).enter().append('rect').attr('class', 'bar').attr('x', d => xScale(d.day)).attr('y', d => yScale(d.duration / 60)).attr('width', xScale.bandwidth()).attr('height', d => chartHeight - yScale(d.duration / 60));\n\n      // Aggiungi l'asse x\n      chart.append('g').attr('transform', `translate(0, ${chartHeight})`).call(d3.axisBottom(xScale));\n\n      // Aggiungi l'asse y\n      chart.append('g').call(d3.axisLeft(yScale));\n\n      // Aggiungi etichette sull'asse x\n      chart.selectAll('.x-label').data(weekData).enter().append('text').attr('class', 'x-label').attr('x', d => xScale(d.day) + xScale.bandwidth() / 2).attr('y', chartHeight + 20).attr('text-anchor', 'middle').text(d => d.day);\n\n      // Aggiungi etichette sull'asse y\n      chart.append('text').attr('class', 'y-label').attr('x', -margin.left).attr('y', -10).attr('text-anchor', 'start').text('Duration (hours)');\n    },\n    formatWeek(weekIndex) {\n      // Formatta la settimana visualizzata per mostrare la data\n      const startDate = new Date(2023, 0, 1 + weekIndex * 7);\n      const endDate = new Date(2023, 0, 7 + weekIndex * 7);\n      const options = {\n        day: 'numeric',\n        month: 'long'\n      };\n      return `${startDate.toLocaleDateString('en-US', options)} - ${endDate.toLocaleDateString('en-US', options)}`;\n    }\n  }\n};","map":{"version":3,"names":["d3","data","travelData","day","duration","selectedWeek","computed","weeks","daysPerWeek","i","length","push","slice","mounted","drawChart","watch","methods","weekData","select","$refs","chart","selectAll","remove","width","height","margin","top","right","bottom","left","chartWidth","chartHeight","xScale","scaleBand","domain","map","d","range","padding","yScale","scaleLinear","max","svg","append","attr","enter","bandwidth","call","axisBottom","axisLeft","text","formatWeek","weekIndex","startDate","Date","endDate","options","month","toLocaleDateString"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"chart\"></div>\n    <div>\n      <input type=\"range\" v-model=\"selectedWeek\" :min=\"0\" :max=\"weeks.length - 1\" />\n      {{ formatWeek(selectedWeek) }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  data() {\n    return {\n      travelData: [\n        { day: 'Monday', duration: 120 },\n        { day: 'Tuesday', duration: 90 },\n        { day: 'Wednesday', duration: 180 },\n        { day: 'Thursday', duration: 150 },\n        { day: 'Friday', duration: 200 },\n        { day: 'Saturday', duration: 160 },\n        { day: 'Sunday', duration: 110 },\n      ],\n      selectedWeek: 0,\n    };\n  },\n  computed: {\n    weeks() {\n      // Divide il tuo array di dati in settimane\n      const weeks = [];\n      const daysPerWeek = 7;\n      for (let i = 0; i < this.travelData.length; i += daysPerWeek) {\n        weeks.push(this.travelData.slice(i, i + daysPerWeek));\n      }\n      return weeks;\n    },\n  },\n  mounted() {\n    this.drawChart();\n  },\n  watch: {\n    selectedWeek() {\n      this.drawChart();\n    },\n  },\n  methods: {\n    drawChart() {\n      const weekData = this.weeks[this.selectedWeek];\n\n      // Rimuovi il grafico precedente prima di ridisegnarlo\n      d3.select(this.$refs.chart).selectAll('*').remove();\n\n      // Imposta le dimensioni del grafico\n      const width = 400;\n      const height = 300;\n      const margin = { top: 20, right: 20, bottom: 40, left: 40 };\n      const chartWidth = width - margin.left - margin.right;\n      const chartHeight = height - margin.top - margin.bottom;\n\n      // Crea la scala per l'asse x (giorni della settimana)\n      const xScale = d3\n        .scaleBand()\n        .domain(weekData.map((d) => d.day))\n        .range([0, chartWidth])\n        .padding(0.1);\n\n      // Crea la scala per l'asse y (durata del viaggio in ore)\n      const yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(weekData, (d) => d.duration / 60)])\n        .range([chartHeight, 0]);\n\n      // Crea l'elemento SVG\n      const svg = d3\n        .select(this.$refs.chart)\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height);\n\n      // Aggiungi il contenitore del grafico con margine\n      const chart = svg\n        .append('g')\n        .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Crea le barre del grafico\n      chart\n        .selectAll('.bar')\n        .data(weekData)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', (d) => xScale(d.day))\n        .attr('y', (d) => yScale(d.duration / 60))\n        .attr('width', xScale.bandwidth())\n        .attr('height', (d) => chartHeight - yScale(d.duration / 60));\n\n      // Aggiungi l'asse x\n      chart\n        .append('g')\n        .attr('transform', `translate(0, ${chartHeight})`)\n        .call(d3.axisBottom(xScale));\n\n      // Aggiungi l'asse y\n      chart.append('g').call(d3.axisLeft(yScale));\n\n      // Aggiungi etichette sull'asse x\n      chart\n        .selectAll('.x-label')\n        .data(weekData)\n        .enter()\n        .append('text')\n        .attr('class', 'x-label')\n        .attr('x', (d) => xScale(d.day) + xScale.bandwidth() / 2)\n        .attr('y', chartHeight + 20)\n        .attr('text-anchor', 'middle')\n        .text((d) => d.day);\n\n      // Aggiungi etichette sull'asse y\n      chart\n        .append('text')\n        .attr('class', 'y-label')\n        .attr('x', -margin.left)\n        .attr('y', -10)\n        .attr('text-anchor', 'start')\n        .text('Duration (hours)');\n    },\n    formatWeek(weekIndex) {\n      // Formatta la settimana visualizzata per mostrare la data\n      const startDate = new Date(2023, 0, 1 + weekIndex * 7);\n      const endDate = new Date(2023, 0, 7 + weekIndex * 7);\n      const options = { day: 'numeric', month: 'long' };\n      return `${startDate.toLocaleDateString('en-US', options)} - ${endDate.toLocaleDateString(\n        'en-US',\n        options\n      )}`;\n    },\n  },\n};\n</script>\n\n<style scoped>\nsvg {\n  background-color: #f5f5f5;\n}\n\n.bar {\n  fill: steelblue;\n}\n</style>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- eslint-disable vue/multi-word-component-names\n<template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <br>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div id=\"bar-chart\"></div>  \n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n\n    <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n    <div ref=\"chartContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nimport { createBarChart } from \"@/assets/CitizenPurchase\";\n\nconst bm = new BuildingMap();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n\n    getSingleEndpoint({ participantId: 2 }, 'FinancialJournal').then((response) => {\n      this.FinancialJournal = response.data.map(d => ({\n        type: \"Feature\",\n        properties: {\n          amount: d.amount,\n          category: d.category,\n          timestamp: d.timestamp,\n          id: d.id,\n        },\n      }));\n\n      // Rimuovi la selezione delle barre precedenti\n      d3.select(\"#bar-chart\").selectAll(\".bar\").remove();\n      createBarChart(this.FinancialJournal);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select('g.apartments')\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}