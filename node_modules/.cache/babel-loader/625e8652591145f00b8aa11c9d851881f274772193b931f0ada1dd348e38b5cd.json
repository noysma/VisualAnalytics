{"ast":null,"code":"import VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      yScaleMax: 0,\n      maxTravelTime: 0,\n      svg: null,\n      chart: null,\n      width: 800,\n      // Aggiunta della larghezza del grafico\n      height: 400 // Aggiunta dell'altezza del grafico\n    };\n  },\n\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 2\n      }, \"TravelJournal\").then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60);\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = this.width - margin.left - margin.right; // Utilizzo della larghezza del grafico dalla data\n        const height = this.height - margin.top - margin.bottom; // Utilizzo dell'altezza del grafico dalla data\n\n        this.svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", this.width).attr(\"height\", this.height);\n        this.chart = this.svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n        this.updateChart();\n        this.$watch(\"currentWeekIndex\", () => {\n          this.updateChart();\n        });\n      });\n    },\n    updateChart() {\n      const {\n        currentWeekIndex,\n        weekStart,\n        svg,\n        chart,\n        width,\n        height,\n        maxTravelTime,\n        yScaleMax\n      } = this;\n      const currentWeekStart = new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + currentWeekIndex * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      const currentWeekData = parsedData.filter(d => {\n        return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n      });\n      const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n      const totalTravelTimes = weekdays.map(day => {\n        const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n        const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n        return {\n          day,\n          totalTravelTime\n        };\n      });\n      const newMaxTravelTime = d3.max(totalTravelTimes, d => d.totalTravelTime);\n      if (newMaxTravelTime > maxTravelTime) {\n        this.maxTravelTime = newMaxTravelTime;\n        this.yScaleMax = maxTravelTime + 30;\n      }\n      svg.selectAll(\".bar\").remove();\n      svg.selectAll(\".x-axis\").remove();\n      svg.selectAll(\".y-axis\").remove();\n      const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n      const yTicks = d3.range(0, yScaleMax, 30);\n      const y = d3.scaleLinear().domain([0, maxTravelTime]).range([height, 0]);\n      const xAxis = d3.axisBottom(x);\n      const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n        const hours = Math.floor(d / 60);\n        const minutes = d % 60;\n        return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n      });\n      chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n      chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n      chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n    }\n  }\n};","map":{"version":3,"names":["VueSlider","getSingleEndpoint","d3","components","data","currentWeekIndex","totalWeeks","travelJournal","weekStart","yScaleMax","maxTravelTime","svg","chart","width","height","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","getFullYear","getMonth","getDate","getDay","weekEnd","length","Math","ceil","margin","top","right","bottom","left","select","$refs","chartContainer","append","attr","updateChart","$watch","currentWeekStart","currentWeekEnd","currentWeekData","filter","weekdays","totalTravelTimes","day","dayTravelTimes","indexOf","totalTravelTime","sum","newMaxTravelTime","max","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","floor","minutes","call","enter","bandwidth"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n      <div ref=\"chartContainer\"></div>\n    </div>\n  </template>\n  \n  <script>\nimport VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\n\nexport default {\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      yScaleMax: 0,\n      maxTravelTime: 0,\n      svg: null,\n      chart: null,\n      width: 800, // Aggiunta della larghezza del grafico\n      height: 400, // Aggiunta dell'altezza del grafico\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({ participantId: 2 }, \"TravelJournal\").then((response) => {\n        this.travelJournal = response.data.map((d) => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id,\n          },\n        }));\n        const data = response.data;\n\n        const parsedData = data.map((d) => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60);\n          return { startDate, endDate, travelTime };\n        });\n\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n\n        const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n        const width = this.width - margin.left - margin.right; // Utilizzo della larghezza del grafico dalla data\n        const height = this.height - margin.top - margin.bottom; // Utilizzo dell'altezza del grafico dalla data\n\n        this.svg = d3\n          .select(this.$refs.chartContainer)\n          .append(\"svg\")\n          .attr(\"width\", this.width)\n          .attr(\"height\", this.height);\n\n        this.chart = this.svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        this.updateChart();\n\n        this.$watch(\"currentWeekIndex\", () => {\n          this.updateChart();\n        });\n      });\n    },\n    updateChart() {\n      const { currentWeekIndex, weekStart, svg, chart, width, height, maxTravelTime, yScaleMax } = this;\n\n      const currentWeekStart = new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + (currentWeekIndex * 7));\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      const currentWeekData = parsedData.filter((d) => {\n        return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n      });\n\n      const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n      const totalTravelTimes = weekdays.map((day) => {\n        const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n        const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n        return { day, totalTravelTime };\n      });\n\n      const newMaxTravelTime = d3.max(totalTravelTimes, (d) => d.totalTravelTime);\n\n      if (newMaxTravelTime > maxTravelTime) {\n        this.maxTravelTime = newMaxTravelTime;\n        this.yScaleMax = maxTravelTime + 30;\n      }\n\n      svg.selectAll(\".bar\").remove();\n      svg.selectAll(\".x-axis\").remove();\n      svg.selectAll(\".y-axis\").remove();\n\n      const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n      const yTicks = d3.range(0, yScaleMax, 30);\n      const y = d3\n        .scaleLinear()\n        .domain([0, maxTravelTime])\n        .range([height, 0]);\n\n      const xAxis = d3.axisBottom(x);\n      const yAxis = d3\n        .axisLeft(y)\n        .tickValues(yTicks)\n        .tickFormat((d) => {\n          const hours = Math.floor(d / 60);\n          const minutes = d % 60;\n          return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n        });\n\n      chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n      chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n      chart\n        .selectAll(\".bar\")\n        .data(totalTravelTimes)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) => x(d.day))\n        .attr(\"y\", (d) => y(d.totalTravelTime))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"height\", (d) => height - y(d.totalTravelTime));\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}