{"ast":null,"code":"import * as d3 from \"d3\";\nexport function TrafficPlot(component, parsedData) {\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n  const width = 800 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n  const svg = d3.select(component.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n  const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  component.$data.chart = chart;\n  component.$data.svg = svg;\n  const maxTravelTime = d3.max(parsedData, d => d.travelTime);\n  component.$data.maxTravelTime = maxTravelTime;\n  updateChart(component, parsedData);\n}\nexport function updateChart(component, parsedData, width, height) {\n  const {\n    chart,\n    svg,\n    weekStart,\n    currentWeekIndex,\n    maxTravelTime\n  } = component.$data;\n  const currentWeekStart = new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + currentWeekIndex * 7);\n  const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n  const currentWeekData = parsedData.filter(d => {\n    return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n  });\n  const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n  component.$data.totalTravelTime = totalTravelTime;\n  const totalTravelTimes = weekdays.map(day => {\n    const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n    const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n    return {\n      day,\n      totalTravelTime\n    };\n  });\n  svg.selectAll(\".bar\").remove();\n  svg.selectAll(\".x-axis\").remove();\n  svg.selectAll(\".y-axis\").remove();\n  const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n  const yTicks = d3.range(0, maxTravelTime + 600, 600);\n  const y = d3.scaleLinear().domain([0, maxTravelTime + 600]).range([height, 0]);\n  const xAxis = d3.axisBottom(x);\n  const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n    const hours = Math.floor(d / 60);\n    return `${hours}`;\n  });\n  chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n  chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n  chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n}\nexport function formatWeekLabel(value) {\n  const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n  const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n  const startDay = currentWeekStart.getDate();\n  const startMonth = new Intl.DateTimeFormat('en', {\n    month: 'long'\n  }).format(currentWeekStart);\n  const startYear = currentWeekStart.getFullYear();\n  const endDay = currentWeekEnd.getDate();\n  const endMonth = new Intl.DateTimeFormat('en', {\n    month: 'long'\n  }).format(currentWeekEnd);\n  const endYear = currentWeekEnd.getFullYear();\n  return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`;\n}","map":{"version":3,"names":["d3","TrafficPlot","component","parsedData","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","$data","maxTravelTime","max","d","travelTime","updateChart","weekStart","currentWeekIndex","currentWeekStart","Date","getFullYear","getMonth","getDate","currentWeekEnd","currentWeekData","filter","startDate","weekdays","totalTravelTime","reduce","total","totalTravelTimes","map","day","dayTravelTimes","getDay","indexOf","sum","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","Math","floor","call","data","enter","bandwidth","formatWeekLabel","value","startDay","startMonth","Intl","DateTimeFormat","month","format","startYear","endDay","endMonth","endYear"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["import * as d3 from \"d3\";\n\nexport function TrafficPlot(component, parsedData) {\n  const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n  const width = 800 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n\n  const svg = d3\n    .select(component.$refs.chartContainer)\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom);\n\n  const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n  component.$data.chart = chart;\n  component.$data.svg = svg;\n\n  const maxTravelTime = d3.max(parsedData, (d) => d.travelTime);\n  component.$data.maxTravelTime = maxTravelTime;\n\n  updateChart(component, parsedData);\n}\n\nexport function updateChart(component, parsedData, width, height) {\n  const { chart, svg, weekStart, currentWeekIndex, maxTravelTime } = component.$data;\n\n  const currentWeekStart = new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + (currentWeekIndex * 7));\n  const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n  const currentWeekData = parsedData.filter((d) => {\n    return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n  });\n\n  const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n  component.$data.totalTravelTime = totalTravelTime;\n  const totalTravelTimes = weekdays.map((day) => {\n    const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n    const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n    return { day, totalTravelTime };\n  });\n\n  svg.selectAll(\".bar\").remove();\n  svg.selectAll(\".x-axis\").remove();\n  svg.selectAll(\".y-axis\").remove();\n\n  const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n  const yTicks = d3.range(0, maxTravelTime + 600, 600);\n  const y = d3\n    .scaleLinear()\n    .domain([0, maxTravelTime + 600])\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(x);\n  const yAxis = d3\n    .axisLeft(y)\n    .tickValues(yTicks)\n    .tickFormat((d) => {\n      const hours = Math.floor(d / 60);\n      return `${hours}`;\n    });\n\n  chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n  chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n  chart\n    .selectAll(\".bar\")\n    .data(totalTravelTimes)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"bar\")\n    .attr(\"x\", (d) => x(d.day))\n    .attr(\"y\", (d) => y(d.totalTravelTime))\n    .attr(\"width\", x.bandwidth())\n    .attr(\"height\", (d) => height - y(d.totalTravelTime));\n}\n\nexport function formatWeekLabel(value) {\n  const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (value * 7));\n  const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n\n  const startDay = currentWeekStart.getDate();\n  const startMonth = new Intl.DateTimeFormat('en', { month: 'long' }).format(currentWeekStart);\n  const startYear = currentWeekStart.getFullYear();\n\n  const endDay = currentWeekEnd.getDate();\n  const endMonth = new Intl.DateTimeFormat('en', { month: 'long' }).format(currentWeekEnd);\n  const endYear = currentWeekEnd.getFullYear();\n\n  return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}