{"ast":null,"code":"import VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport * as d3 from 'd3';\nexport default {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      totalTravelTime: 0,\n      maxTravelTime: 0\n    };\n  },\n  mounted() {\n    d3.csv(\"travelDuration.csv\").then(data => {\n      this.processData(data);\n      this.createChart();\n    });\n  },\n  methods: {\n    processData(data) {\n      const parsedData = data.map(d => {\n        const startDate = new Date(d.date);\n        const travelTime = parseInt(d.travelDuration);\n        const endDate = new Date(startDate.getTime() + travelTime * 1000 * 60); // Converti la durata da minuti a millisecondi\n        return {\n          startDate,\n          endDate,\n          travelTime\n        };\n      });\n\n      // Calcola il totale delle settimane\n      const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n      const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n      const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n      this.totalWeeks = totalWeeks;\n      this.weekStart = weekStart;\n\n      // Imposta il valore massimo per l'asse y come la durata massima del viaggio\n      const maxTravelTime = d3.max(parsedData, d => d.travelTime);\n      this.maxTravelTime = maxTravelTime;\n      this.travelJournal = parsedData;\n    },\n    createChart() {\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 40\n      };\n      const width = 800 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const svg = d3.select(this.$refs.chartContainer).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);\n      const chart = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Resto del codice...\n    },\n\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      const startDay = currentWeekStart.getDate();\n      const startMonth = new Intl.DateTimeFormat('en', {\n        month: 'long'\n      }).format(currentWeekStart);\n      const startYear = currentWeekStart.getFullYear();\n      const endDay = currentWeekEnd.getDate();\n      const endMonth = new Intl.DateTimeFormat('en', {\n        month: 'long'\n      }).format(currentWeekEnd);\n      const endYear = currentWeekEnd.getFullYear();\n      return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`;\n    }\n  }\n};","map":{"version":3,"names":["VueSlider","d3","components","data","currentWeekIndex","totalWeeks","travelJournal","weekStart","totalTravelTime","maxTravelTime","mounted","csv","then","processData","createChart","methods","parsedData","map","d","startDate","Date","date","travelTime","parseInt","travelDuration","endDate","getTime","getFullYear","getMonth","getDate","getDay","weekEnd","length","Math","ceil","max","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","formatWeekLabel","value","currentWeekStart","currentWeekEnd","startDay","startMonth","Intl","DateTimeFormat","month","format","startYear","endDay","endMonth","endYear"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names-->\n<template>\n  <div>\n    <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n    <div ref=\"chartContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport * as d3 from 'd3';\n\nexport default {\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      totalTravelTime: 0,\n      maxTravelTime: 0,\n    };\n  },\n  mounted() {\n    d3.csv(\"travelDuration.csv\").then((data) => {\n      this.processData(data);\n      this.createChart();\n    });\n  },\n  methods: {\n    processData(data) {\n      const parsedData = data.map((d) => {\n        const startDate = new Date(d.date);\n        const travelTime = parseInt(d.travelDuration);\n        const endDate = new Date(startDate.getTime() + travelTime * 1000 * 60); // Converti la durata da minuti a millisecondi\n        return { startDate, endDate, travelTime };\n      });\n\n      // Calcola il totale delle settimane\n      const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n      const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n      const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n      this.totalWeeks = totalWeeks;\n      this.weekStart = weekStart;\n\n      // Imposta il valore massimo per l'asse y come la durata massima del viaggio\n      const maxTravelTime = d3.max(parsedData, (d) => d.travelTime);\n      this.maxTravelTime = maxTravelTime;\n\n      this.travelJournal = parsedData;\n    },\n    createChart() {\n      const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n      const width = 800 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(this.$refs.chartContainer)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom);\n\n      const chart = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Resto del codice...\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n\n      const startDay = currentWeekStart.getDate();\n      const startMonth = new Intl.DateTimeFormat('en', { month: 'long' }).format(currentWeekStart);\n      const startYear = currentWeekStart.getFullYear();\n\n      const endDay = currentWeekEnd.getDate();\n      const endMonth = new Intl.DateTimeFormat('en', { month: 'long' }).format(currentWeekEnd);\n      const endYear = currentWeekEnd.getFullYear();\n\n      return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`;\n    },\n  },\n};\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- eslint-disable vue/multi-word-component-names\n<template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <br>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div id=\"bar-chart\"></div>  \n    </div>\n\n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n\n    <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" :tooltip-formatter=\"formatWeekLabel\" />\n    <div ref=\"chartContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nimport { createBarChart } from \"@/assets/CitizenPurchase\";\n\nconst bm = new BuildingMap();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, 'Apartments').then((response) => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n\n    getSingleEndpoint({ participantId: 2 }, 'FinancialJournal').then((response) => {\n      this.FinancialJournal = response.data.map(d => ({\n        type: \"Feature\",\n        properties: {\n          amount: d.amount,\n          category: d.category,\n          timestamp: d.timestamp,\n          id: d.id,\n        },\n      }));\n\n      // Rimuovi la selezione delle barre precedenti\n      d3.select(\"#bar-chart\").selectAll(\".bar\").remove();\n      createBarChart(this.FinancialJournal);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select('g.apartments')\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style> -->\n"],"mappings":"AASA,OAAAA,SAAA;AACA;AACA,YAAAC,EAAA;AAEA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,gBAAA;MACAC,UAAA;MACAC,aAAA;MACAC,SAAA;MACAC,eAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACAT,EAAA,CAAAU,GAAA,uBAAAC,IAAA,CAAAT,IAAA;MACA,KAAAU,WAAA,CAAAV,IAAA;MACA,KAAAW,WAAA;IACA;EACA;EACAC,OAAA;IACAF,YAAAV,IAAA;MACA,MAAAa,UAAA,GAAAb,IAAA,CAAAc,GAAA,CAAAC,CAAA;QACA,MAAAC,SAAA,OAAAC,IAAA,CAAAF,CAAA,CAAAG,IAAA;QACA,MAAAC,UAAA,GAAAC,QAAA,CAAAL,CAAA,CAAAM,cAAA;QACA,MAAAC,OAAA,OAAAL,IAAA,CAAAD,SAAA,CAAAO,OAAA,KAAAJ,UAAA;QACA;UAAAH,SAAA;UAAAM,OAAA;UAAAH;QAAA;MACA;;MAEA;MACA,MAAAf,SAAA,OAAAa,IAAA,CAAAJ,UAAA,IAAAG,SAAA,CAAAQ,WAAA,IAAAX,UAAA,IAAAG,SAAA,CAAAS,QAAA,IAAAZ,UAAA,IAAAG,SAAA,CAAAU,OAAA,KAAAb,UAAA,IAAAG,SAAA,CAAAW,MAAA;MACA,MAAAC,OAAA,OAAAX,IAAA,CAAAJ,UAAA,CAAAA,UAAA,CAAAgB,MAAA,MAAAb,SAAA,CAAAQ,WAAA,IAAAX,UAAA,CAAAA,UAAA,CAAAgB,MAAA,MAAAb,SAAA,CAAAS,QAAA,IAAAZ,UAAA,CAAAA,UAAA,CAAAgB,MAAA,MAAAb,SAAA,CAAAU,OAAA;MACA,MAAAxB,UAAA,GAAA4B,IAAA,CAAAC,IAAA,EAAAH,OAAA,GAAAxB,SAAA;MACA,KAAAF,UAAA,GAAAA,UAAA;MACA,KAAAE,SAAA,GAAAA,SAAA;;MAEA;MACA,MAAAE,aAAA,GAAAR,EAAA,CAAAkC,GAAA,CAAAnB,UAAA,EAAAE,CAAA,IAAAA,CAAA,CAAAI,UAAA;MACA,KAAAb,aAAA,GAAAA,aAAA;MAEA,KAAAH,aAAA,GAAAU,UAAA;IACA;IACAF,YAAA;MACA,MAAAsB,MAAA;QAAAC,GAAA;QAAAC,KAAA;QAAAC,MAAA;QAAAC,IAAA;MAAA;MACA,MAAAC,KAAA,SAAAL,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAE,KAAA;MACA,MAAAI,MAAA,SAAAN,MAAA,CAAAC,GAAA,GAAAD,MAAA,CAAAG,MAAA;MAEA,MAAAI,GAAA,GAAA1C,EAAA,CACA2C,MAAA,MAAAC,KAAA,CAAAC,cAAA,EACAC,MAAA,QACAC,IAAA,UAAAP,KAAA,GAAAL,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAE,KAAA,EACAU,IAAA,WAAAN,MAAA,GAAAN,MAAA,CAAAC,GAAA,GAAAD,MAAA,CAAAG,MAAA;MAEA,MAAAU,KAAA,GAAAN,GAAA,CAAAI,MAAA,MAAAC,IAAA,2BAAAZ,MAAA,CAAAI,IAAA,IAAAJ,MAAA,CAAAC,GAAA;;MAEA;IACA;;IACAa,gBAAAC,KAAA;MACA,MAAAC,gBAAA,OAAAhC,IAAA,MAAAb,SAAA,CAAAoB,WAAA,SAAApB,SAAA,CAAAqB,QAAA,SAAArB,SAAA,CAAAsB,OAAA,KAAAsB,KAAA;MACA,MAAAE,cAAA,OAAAjC,IAAA,CAAAgC,gBAAA,CAAAzB,WAAA,IAAAyB,gBAAA,CAAAxB,QAAA,IAAAwB,gBAAA,CAAAvB,OAAA;MAEA,MAAAyB,QAAA,GAAAF,gBAAA,CAAAvB,OAAA;MACA,MAAA0B,UAAA,OAAAC,IAAA,CAAAC,cAAA;QAAAC,KAAA;MAAA,GAAAC,MAAA,CAAAP,gBAAA;MACA,MAAAQ,SAAA,GAAAR,gBAAA,CAAAzB,WAAA;MAEA,MAAAkC,MAAA,GAAAR,cAAA,CAAAxB,OAAA;MACA,MAAAiC,QAAA,OAAAN,IAAA,CAAAC,cAAA;QAAAC,KAAA;MAAA,GAAAC,MAAA,CAAAN,cAAA;MACA,MAAAU,OAAA,GAAAV,cAAA,CAAA1B,WAAA;MAEA,UAAA2B,QAAA,IAAAC,UAAA,IAAAK,SAAA,MAAAC,MAAA,IAAAC,QAAA,IAAAC,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}