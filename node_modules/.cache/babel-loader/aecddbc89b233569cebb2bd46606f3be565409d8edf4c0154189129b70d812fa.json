{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  mounted() {\n    const data = [{\n      name: \"USA\",\n      values: [{\n        date: \"2000\",\n        price: \"100\"\n      }, {\n        date: \"2001\",\n        price: \"110\"\n      }, {\n        date: \"2002\",\n        price: \"145\"\n      }, {\n        date: \"2003\",\n        price: \"241\"\n      }, {\n        date: \"2004\",\n        price: \"101\"\n      }, {\n        date: \"2005\",\n        price: \"90\"\n      }, {\n        date: \"2006\",\n        price: \"10\"\n      }, {\n        date: \"2007\",\n        price: \"35\"\n      }, {\n        date: \"2008\",\n        price: \"21\"\n      }, {\n        date: \"2009\",\n        price: \"201\"\n      }]\n    }, {\n      name: \"Canada\",\n      values: [{\n        date: \"2000\",\n        price: \"200\"\n      }, {\n        date: \"2001\",\n        price: \"120\"\n      }, {\n        date: \"2002\",\n        price: \"33\"\n      }, {\n        date: \"2003\",\n        price: \"21\"\n      }, {\n        date: \"2004\",\n        price: \"51\"\n      }, {\n        date: \"2005\",\n        price: \"190\"\n      }, {\n        date: \"2006\",\n        price: \"120\"\n      }, {\n        date: \"2007\",\n        price: \"85\"\n      }, {\n        date: \"2008\",\n        price: \"221\"\n      }, {\n        date: \"2009\",\n        price: \"101\"\n      }]\n    }, {\n      name: \"Mexico\",\n      values: [{\n        date: \"2000\",\n        price: \"50\"\n      }, {\n        date: \"2001\",\n        price: \"10\"\n      }, {\n        date: \"2002\",\n        price: \"5\"\n      }, {\n        date: \"2003\",\n        price: \"71\"\n      }, {\n        date: \"2004\",\n        price: \"20\"\n      }, {\n        date: \"2005\",\n        price: \"9\"\n      }, {\n        date: \"2006\",\n        price: \"220\"\n      }, {\n        date: \"2007\",\n        price: \"235\"\n      }, {\n        date: \"2008\",\n        price: \"61\"\n      }, {\n        date: \"2009\",\n        price: \"10\"\n      }]\n    }];\n    const width = 500;\n    const height = 300;\n    const margin = 50;\n    const duration = 250;\n    const lineOpacity = \"0.25\";\n    const lineOpacityHover = \"0.85\";\n    const otherLinesOpacityHover = \"0.1\";\n    const lineStroke = \"1.5px\";\n    const lineStrokeHover = \"2.5px\";\n    const circleOpacity = \"0.85\";\n    const circleOpacityOnLineHover = \"0.25\";\n    const circleRadius = 3;\n    const circleRadiusHover = 6;\n\n    /* Format Data */\n    const parseDate = d3.timeParse(\"%Y\");\n    data.forEach(function (d) {\n      d.values.forEach(function (d) {\n        d.date = parseDate(d.date);\n        d.price = +d.price;\n      });\n    });\n\n    /* Scale */\n    const xScale = d3.scaleTime().domain(d3.extent(data[0].values, d => d.date)).range([0, width - margin]);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data[0].values, d => d.price)]).range([height - margin, 0]);\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    /* Add SVG */\n    const svg = d3.select(this.$refs.chart).attr(\"width\", width + margin + \"px\").attr(\"height\", height + margin + \"px\").append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`);\n\n    /* Add line into SVG */\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.price));\n    const lines = svg.append(\"g\").attr(\"class\", \"lines\");\n    lines.selectAll(\".line-group\").data(data).enter().append(\"g\").attr(\"class\", \"line-group\").on(\"mouseover\", (d, i) => {\n      svg.append(\"text\").attr(\"class\", \"title-text\").style(\"fill\", color(i)).text(d.name).attr(\"text-anchor\", \"middle\").attr(\"x\", (width - margin) / 2).attr(\"y\", 5);\n    }).on(\"mouseout\", () => {\n      svg.select(\".title-text\").remove();\n    }).append(\"path\").attr(\"class\", \"line\").attr(\"d\", d => line(d.values)).style(\"stroke\", (d, i) => color(i)).style(\"opacity\", lineOpacity).on(\"mouseover\", function (d) {\n      d3.selectAll(\".line\").style(\"opacity\", otherLinesOpacityHover);\n      d3.selectAll(\".circle\").style(\"opacity\", circleOpacityOnLineHover);\n      d3.select(this).style(\"opacity\", lineOpacityHover).style(\"stroke-width\", lineStrokeHover).style(\"cursor\", \"pointer\");\n    }).on(\"mouseout\", function () {\n      d3.selectAll(\".line\").style(\"opacity\", lineOpacity);\n      d3.selectAll(\".circle\").style(\"opacity\", circleOpacity);\n      d3.select(this).style(\"stroke-width\", lineStroke).style(\"cursor\", \"none\");\n    });\n\n    /* Add circles in the line */\n    lines.selectAll(\"circle-group\").data(data).enter().append(\"g\").style(\"fill\", (d, i) => color(i)).selectAll(\"circle\").data(d => d.values).enter().append(\"g\").attr(\"class\", \"circle\").on(\"mouseover\", function (d) {\n      d3.select(this).style(\"cursor\", \"pointer\").append(\"text\").attr(\"class\", \"text\").text(`${d.price}`).attr(\"x\", d => xScale(d.date) + 5).attr(\"y\", d => yScale(d.price) - 10);\n    }).on(\"mouseout\", function () {\n      d3.select(this).style(\"cursor\", \"none\").select(\".text\").remove();\n    }).append(\"circle\").attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.price)).attr(\"r\", circleRadius).style(\"opacity\", circleOpacity).on(\"mouseover\", function () {\n      d3.select(this).transition().duration(duration).attr(\"r\", circleRadiusHover);\n    }).on(\"mouseout\", function () {\n      d3.select(this).transition().duration(duration).attr(\"r\", circleRadius);\n    });\n\n    /* Add Axis into SVG */\n    const xAxis = d3.axisBottom(xScale).ticks(5);\n    const yAxis = d3.axisLeft(yScale).ticks(5);\n    svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", `translate(0, ${height - margin})`).call(xAxis);\n    svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis).append(\"text\").attr(\"y\", 15).attr(\"transform\", \"rotate(-90)\").attr(\"fill\", \"#000\").text(\"Price ($)\");\n  }\n};","map":{"version":3,"names":["d3","mounted","data","name","values","date","price","width","height","margin","duration","lineOpacity","lineOpacityHover","otherLinesOpacityHover","lineStroke","lineStrokeHover","circleOpacity","circleOpacityOnLineHover","circleRadius","circleRadiusHover","parseDate","timeParse","forEach","d","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","color","scaleOrdinal","schemeCategory10","svg","select","$refs","chart","attr","append","line","x","y","lines","selectAll","enter","on","i","style","text","remove","transition","xAxis","axisBottom","ticks","yAxis","axisLeft","call"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div>\n    <svg ref=\"chart\"></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    const data = [\n      {\n        name: \"USA\",\n        values: [\n          { date: \"2000\", price: \"100\" },\n          { date: \"2001\", price: \"110\" },\n          { date: \"2002\", price: \"145\" },\n          { date: \"2003\", price: \"241\" },\n          { date: \"2004\", price: \"101\" },\n          { date: \"2005\", price: \"90\" },\n          { date: \"2006\", price: \"10\" },\n          { date: \"2007\", price: \"35\" },\n          { date: \"2008\", price: \"21\" },\n          { date: \"2009\", price: \"201\" }\n        ]\n      },\n      {\n        name: \"Canada\",\n        values: [\n          { date: \"2000\", price: \"200\" },\n          { date: \"2001\", price: \"120\" },\n          { date: \"2002\", price: \"33\" },\n          { date: \"2003\", price: \"21\" },\n          { date: \"2004\", price: \"51\" },\n          { date: \"2005\", price: \"190\" },\n          { date: \"2006\", price: \"120\" },\n          { date: \"2007\", price: \"85\" },\n          { date: \"2008\", price: \"221\" },\n          { date: \"2009\", price: \"101\" }\n        ]\n      },\n      {\n        name: \"Mexico\",\n        values: [\n          { date: \"2000\", price: \"50\" },\n          { date: \"2001\", price: \"10\" },\n          { date: \"2002\", price: \"5\" },\n          { date: \"2003\", price: \"71\" },\n          { date: \"2004\", price: \"20\" },\n          { date: \"2005\", price: \"9\" },\n          { date: \"2006\", price: \"220\" },\n          { date: \"2007\", price: \"235\" },\n          { date: \"2008\", price: \"61\" },\n          { date: \"2009\", price: \"10\" }\n        ]\n      }\n    ];\n\n    const width = 500;\n    const height = 300;\n    const margin = 50;\n    const duration = 250;\n\n    const lineOpacity = \"0.25\";\n    const lineOpacityHover = \"0.85\";\n    const otherLinesOpacityHover = \"0.1\";\n    const lineStroke = \"1.5px\";\n    const lineStrokeHover = \"2.5px\";\n\n    const circleOpacity = \"0.85\";\n    const circleOpacityOnLineHover = \"0.25\";\n    const circleRadius = 3;\n    const circleRadiusHover = 6;\n\n    /* Format Data */\n    const parseDate = d3.timeParse(\"%Y\");\n    data.forEach(function (d) {\n      d.values.forEach(function (d) {\n        d.date = parseDate(d.date);\n        d.price = +d.price;\n      });\n    });\n\n    /* Scale */\n    const xScale = d3\n      .scaleTime()\n      .domain(d3.extent(data[0].values, (d) => d.date))\n      .range([0, width - margin]);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data[0].values, (d) => d.price)])\n      .range([height - margin, 0]);\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    /* Add SVG */\n    const svg = d3\n      .select(this.$refs.chart)\n      .attr(\"width\", width + margin + \"px\")\n      .attr(\"height\", height + margin + \"px\")\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin}, ${margin})`);\n\n    /* Add line into SVG */\n    const line = d3\n      .line()\n      .x((d) => xScale(d.date))\n      .y((d) => yScale(d.price));\n\n    const lines = svg.append(\"g\").attr(\"class\", \"lines\");\n\n    lines\n      .selectAll(\".line-group\")\n      .data(data)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"line-group\")\n      .on(\"mouseover\", (d, i) => {\n        svg\n          .append(\"text\")\n          .attr(\"class\", \"title-text\")\n          .style(\"fill\", color(i))\n          .text(d.name)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"x\", (width - margin) / 2)\n          .attr(\"y\", 5);\n      })\n      .on(\"mouseout\", () => {\n        svg.select(\".title-text\").remove();\n      })\n      .append(\"path\")\n      .attr(\"class\", \"line\")\n      .attr(\"d\", (d) => line(d.values))\n      .style(\"stroke\", (d, i) => color(i))\n      .style(\"opacity\", lineOpacity)\n      .on(\"mouseover\", function (d) {\n        d3.selectAll(\".line\").style(\"opacity\", otherLinesOpacityHover);\n        d3.selectAll(\".circle\").style(\"opacity\", circleOpacityOnLineHover);\n        d3.select(this)\n          .style(\"opacity\", lineOpacityHover)\n          .style(\"stroke-width\", lineStrokeHover)\n          .style(\"cursor\", \"pointer\");\n      })\n      .on(\"mouseout\", function () {\n        d3.selectAll(\".line\").style(\"opacity\", lineOpacity);\n        d3.selectAll(\".circle\").style(\"opacity\", circleOpacity);\n        d3.select(this)\n          .style(\"stroke-width\", lineStroke)\n          .style(\"cursor\", \"none\");\n      });\n\n    /* Add circles in the line */\n    lines\n      .selectAll(\"circle-group\")\n      .data(data)\n      .enter()\n      .append(\"g\")\n      .style(\"fill\", (d, i) => color(i))\n      .selectAll(\"circle\")\n      .data((d) => d.values)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"circle\")\n      .on(\"mouseover\", function (d) {\n        d3.select(this)\n          .style(\"cursor\", \"pointer\")\n          .append(\"text\")\n          .attr(\"class\", \"text\")\n          .text(`${d.price}`)\n          .attr(\"x\", (d) => xScale(d.date) + 5)\n          .attr(\"y\", (d) => yScale(d.price) - 10);\n      })\n      .on(\"mouseout\", function () {\n        d3.select(this).style(\"cursor\", \"none\").select(\".text\").remove();\n      })\n      .append(\"circle\")\n      .attr(\"cx\", (d) => xScale(d.date))\n      .attr(\"cy\", (d) => yScale(d.price))\n      .attr(\"r\", circleRadius)\n      .style(\"opacity\", circleOpacity)\n      .on(\"mouseover\", function () {\n        d3.select(this)\n          .transition()\n          .duration(duration)\n          .attr(\"r\", circleRadiusHover);\n      })\n      .on(\"mouseout\", function () {\n        d3.select(this).transition().duration(duration).attr(\"r\", circleRadius);\n      });\n\n    /* Add Axis into SVG */\n    const xAxis = d3.axisBottom(xScale).ticks(5);\n    const yAxis = d3.axisLeft(yScale).ticks(5);\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0, ${height - margin})`)\n      .call(xAxis);\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n      .append(\"text\")\n      .attr(\"y\", 15)\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"fill\", \"#000\")\n      .text(\"Price ($)\");\n  }\n};\n</script>\n\n<style>\n/* Add CSS styles here */\n</style>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- <template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    QUESTION 1 \n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    QUESTION 2 \n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <p>Line Chart con:\n        <br>\n        -asse x: time stamp\n        <br>\n        -asse y: available balance\n        <br>\n        il colore delle linee sul grafico è dato dall'educational level\n      </p>\n    </div>\n\n    QUESTION 3 \n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\n\nconst bm = new BuildingMap();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = true;\n      this.restaurantsActive = false;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = true;\n      this.pubsActive = false;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n/* BUSINESS HEALTH STYLE */\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 60px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}