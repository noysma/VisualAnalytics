{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingTypeLegend } from \"@/assets/BuildingMap\";\nimport { select } from \"d3\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: []\n    };\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n      bl.color(bm.color());\n      d3.select(this.$refs.map).select('g.legend').call(bl);\n      d3.select(this.$refs.map).select('g.buildings').selectAll('path').on('click', (event, d) => {\n        this.showBuildingInfo(d.properties.maxOccupancy);\n      });\n    },\n    showBuildingInfo(maxOccupancy) {\n      alert(`Max occupancy: ${maxOccupancy}`);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","select","bm","bl","name","components","data","buildings","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","methods","$refs","datum","call","color","selectAll","on","event","showBuildingInfo","alert"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <b-container id=\"app\">\n    <b-row>\n      <b-col>\n        <div id=\"map\">\n            <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n            </svg>\n        </div>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport { getSingleEndpoint} from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport {BuildingMap, BuildingTypeLegend} from \"@/assets/BuildingMap\";\nimport { select } from \"d3\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data(){\n      return {\n          buildings: [],\n      }\n  },\n  mounted(){\n      getSingleEndpoint({}, 'Buildings').then((response) => {\n          this.buildings = response.data.map(d => ({\n              type: \"Feature\",\n              geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n              properties:{\n                  buildingId: d.buildingId,\n                  buildingType: d.buildingType,\n                  maxOccupancy: d.maxOccupancy,\n                  units: d.units,\n              },\n          }));\n          this.drawBuildings();\n      });\n  },\n  methods:{\n    drawBuildings(){\n        d3.select(this.$refs.map).select('g.buildings')\n            .datum(this.buildings)\n            .call(bm);\n\n        bl.color(bm.color());\n\n        d3.select(this.$refs.map).select('g.legend')\n            .call(bl);\n\n        d3.select(this.$refs.map)\n            .select('g.buildings')\n            .selectAll('path')\n            .on('click', (event, d) => { \n                this.showBuildingInfo(d.properties.maxOccupancy);   \n            });\n    },\n    showBuildingInfo(maxOccupancy) {\n        alert(`Max occupancy: ${maxOccupancy}`);\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nsvg g.buildings path{\n    fill-opacity: 0.2;\n    stroke: grey;\n}\n\nsvg g.buildings path:hover{\n    fill-opacity: 10;\n}\n\n</style>"],"mappings":"AAgBA,SAAAA,iBAAA;AACA,IAAAC,MAAA,GAAAC,OAAA,YAAAD,MAAA;AACA,MAAAE,GAAA,GAAAD,OAAA;AACA,MAAAE,EAAA,GAAAF,OAAA;AAEA,SAAAG,WAAA,EAAAC,kBAAA;AACA,SAAAC,MAAA;AAEA,MAAAC,EAAA,OAAAH,WAAA;AACA,MAAAI,EAAA,OAAAH,kBAAA;AAEA;EACAI,IAAA;EACAC,UAAA,GACA;EACAC,KAAA;IACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACAd,iBAAA,kBAAAe,IAAA,CAAAC,QAAA;MACA,KAAAH,SAAA,GAAAG,QAAA,CAAAJ,IAAA,CAAAK,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAjB,GAAA,CAAAkB,QAAA,CAAAC,KAAA,CAAArB,MAAA,CAAAsB,IAAA,CAAAL,CAAA,CAAAM,QAAA,UAAAC,SAAA;QACAC,UAAA;UACAC,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAC,YAAA,EAAAV,CAAA,CAAAU,YAAA;UACAC,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAC,KAAA,EAAAZ,CAAA,CAAAY;QACA;MACA;MACA,KAAAC,aAAA;IACA;EACA;EACAC,OAAA;IACAD,cAAA;MACA3B,EAAA,CAAAG,MAAA,MAAA0B,KAAA,CAAAhB,GAAA,EAAAV,MAAA,gBACA2B,KAAA,MAAArB,SAAA,EACAsB,IAAA,CAAA3B,EAAA;MAEAC,EAAA,CAAA2B,KAAA,CAAA5B,EAAA,CAAA4B,KAAA;MAEAhC,EAAA,CAAAG,MAAA,MAAA0B,KAAA,CAAAhB,GAAA,EAAAV,MAAA,aACA4B,IAAA,CAAA1B,EAAA;MAEAL,EAAA,CAAAG,MAAA,MAAA0B,KAAA,CAAAhB,GAAA,EACAV,MAAA,gBACA8B,SAAA,SACAC,EAAA,WAAAC,KAAA,EAAArB,CAAA;QACA,KAAAsB,gBAAA,CAAAtB,CAAA,CAAAQ,UAAA,CAAAG,YAAA;MACA;IACA;IACAW,iBAAAX,YAAA;MACAY,KAAA,mBAAAZ,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}