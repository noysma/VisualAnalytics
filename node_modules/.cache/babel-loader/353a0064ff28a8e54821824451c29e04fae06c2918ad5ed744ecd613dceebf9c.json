{"ast":null,"code":"import VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"apiConnector\";\nimport * as d3 from \"d3\";\nconst TrafficPlot = {\n  components: {\n    VueSlider\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      totalTravelTime: 0,\n      maxTravelTime: 0\n    };\n  },\n  mounted() {\n    this.createTrafficPlot();\n  },\n  methods: {\n    createTrafficPlot() {\n      getSingleEndpoint({\n        participantId: 1000\n      }, \"TravelJournal\").then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Calcola il totale delle settimane\n        const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n        const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n        const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n        this.totalWeeks = totalWeeks;\n        this.weekStart = weekStart;\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Funzione per aggiornare il grafico in base alla settimana selezionata\n        const updateChart = () => {\n          const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter(d => {\n            return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n          });\n\n          // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n          this.totalTravelTime = totalTravelTime;\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n\n          // Rimuovi il vecchio grafico\n          svg.selectAll(\".bar\").remove();\n          svg.selectAll(\".x-axis\").remove();\n          svg.selectAll(\".y-axis\").remove();\n\n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, this.maxTravelTime + 600, 600); // Utilizza this.maxTravelTime come valore massimo per l'asse y\n          const y = d3.scaleLinear().domain([0, this.maxTravelTime + 600]).range([height, 0]);\n\n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60); // Calcola le ore\n            return `${hours}`; // Formatta l'etichetta come \"hh:00\"\n          });\n\n          // Aggiungi gli assi al grafico\n          chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n          chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n          // Crea le barre del grafico\n          chart.selectAll(\".bar\").data(totalTravelTimes).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n        };\n\n        // Calcola il valore massimo della durata del viaggio su tutte le settimane\n        const maxTravelTime = d3.max(parsedData, d => d.travelTime);\n        this.maxTravelTime = maxTravelTime;\n\n        // Aggiorna il grafico iniziale\n        updateChart();\n\n        // Aggiorna il grafico quando viene cambiata la settimana selezionata\n        this.$watch(\"currentWeekIndex\", () => {\n          updateChart();\n        });\n      });\n    },\n    formatWeekLabel(value) {\n      const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + value * 7);\n      const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n      const startDay = currentWeekStart.getDate();\n      const startMonth = new Intl.DateTimeFormat('en', {\n        month: 'long'\n      }).format(currentWeekStart);\n      const startYear = currentWeekStart.getFullYear();\n      const endDay = currentWeekEnd.getDate();\n      const endMonth = new Intl.DateTimeFormat('en', {\n        month: 'long'\n      }).format(currentWeekEnd);\n      const endYear = currentWeekEnd.getFullYear();\n      return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`;\n    }\n  }\n};\nexport default {\n  TrafficPlot\n};","map":{"version":3,"names":["VueSlider","getSingleEndpoint","d3","TrafficPlot","components","data","currentWeekIndex","totalWeeks","travelJournal","weekStart","totalTravelTime","maxTravelTime","mounted","createTrafficPlot","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","Date","endDate","travelTime","getFullYear","getMonth","getDate","getDay","weekEnd","length","Math","ceil","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","updateChart","currentWeekStart","currentWeekEnd","currentWeekData","filter","weekdays","reduce","total","totalTravelTimes","day","dayTravelTimes","indexOf","sum","selectAll","remove","x","scaleBand","domain","range","padding","yTicks","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","floor","call","enter","bandwidth","max","$watch","formatWeekLabel","value","startDay","startMonth","Intl","DateTimeFormat","month","format","startYear","endDay","endMonth","endYear"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/TrafficPlot.js"],"sourcesContent":["import VueSlider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\nimport { getSingleEndpoint } from \"apiConnector\";\nimport * as d3 from \"d3\";\n\nconst TrafficPlot = {\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      currentWeekIndex: 0,\n      totalWeeks: 0,\n      travelJournal: [],\n      weekStart: null,\n      totalTravelTime: 0,\n      maxTravelTime: 0,\n    };\n  },\n  mounted() {\n    this.createTrafficPlot();\n  },\n  methods: {\n    createTrafficPlot() {\n        getSingleEndpoint({ participantId: 1000 }, \"TravelJournal\").then((response) => {\n            this.travelJournal = response.data.map((d) => ({\n            type: \"Feature\",\n            properties: {\n                travelStartTime: d.travelStartTime,\n                travelStartLocationId: d.travelStartLocationId,\n                travelEndLocationId: d.travelEndLocationId,\n                checkInTime: d.checkInTime,\n                checkOutTime: d.checkOutTime,\n                endingBalance: d.endingBalance,\n                travelEndTime: d.travelEndTime,\n                participantId: d.participantId,\n                purpose: d.purpose,\n                startingBalance: d.startingBalance,\n                id: d.id,\n            },\n            }));\n            const data = response.data;\n    \n            // Parsing delle date e calcolo della durata dei viaggi in minuti\n            const parsedData = data.map((d) => {\n            const startDate = new Date(d.travelStartTime);\n            const endDate = new Date(d.travelEndTime);\n            const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n            return { startDate, endDate, travelTime };\n            });\n    \n            // Calcola il totale delle settimane\n            const weekStart = new Date(parsedData[0].startDate.getFullYear(), parsedData[0].startDate.getMonth(), parsedData[0].startDate.getDate() - parsedData[0].startDate.getDay());\n            const weekEnd = new Date(parsedData[parsedData.length - 1].startDate.getFullYear(), parsedData[parsedData.length - 1].startDate.getMonth(), parsedData[parsedData.length - 1].startDate.getDate() + 6);\n            const totalWeeks = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24 * 7));\n            this.totalWeeks = totalWeeks;\n            this.weekStart = weekStart;\n    \n            // Crea il grafico utilizzando D3\n            const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n            const width = 800 - margin.left - margin.right;\n            const height = 400 - margin.top - margin.bottom;\n    \n            const svg = d3\n            .select(this.$refs.chartContainer)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom);\n    \n            const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    \n            // Funzione per aggiornare il grafico in base alla settimana selezionata\n            const updateChart = () => {\n            const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n            const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n            const currentWeekData = parsedData.filter((d) => {\n                return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n            });\n    \n            // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n            const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]; \n            const totalTravelTime = parsedData.reduce((total, d) => total + d.travelTime, 0);\n            this.totalTravelTime = totalTravelTime;\n            const totalTravelTimes = weekdays.map((day) => {\n                const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n                const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n                return { day, totalTravelTime };\n            });\n    \n            // Rimuovi il vecchio grafico\n            svg.selectAll(\".bar\").remove();\n            svg.selectAll(\".x-axis\").remove();\n            svg.selectAll(\".y-axis\").remove();\n    \n            // Scala per gli assi x e y\n            const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n    \n            const yTicks = d3.range(0, this.maxTravelTime + 600, 600); // Utilizza this.maxTravelTime come valore massimo per l'asse y\n            const y = d3\n                .scaleLinear()\n                .domain([0, this.maxTravelTime + 600])\n                .range([height, 0]);\n    \n            // Creazione degli assi x e y\n            const xAxis = d3.axisBottom(x);\n            const yAxis = d3\n                .axisLeft(y)\n                .tickValues(yTicks)\n                .tickFormat((d) => {\n                const hours = Math.floor(d / 60); // Calcola le ore\n                return `${hours}`; // Formatta l'etichetta come \"hh:00\"\n                });\n    \n            // Aggiungi gli assi al grafico\n            chart.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n            chart.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n    \n            // Crea le barre del grafico\n            chart\n                .selectAll(\".bar\")\n                .data(totalTravelTimes)\n                .enter()\n                .append(\"rect\")\n                .attr(\"class\", \"bar\")\n                .attr(\"x\", (d) => x(d.day))\n                .attr(\"y\", (d) => y(d.totalTravelTime))\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", (d) => height - y(d.totalTravelTime));\n            };\n    \n            // Calcola il valore massimo della durata del viaggio su tutte le settimane\n            const maxTravelTime = d3.max(parsedData, (d) => d.travelTime);\n            this.maxTravelTime = maxTravelTime;\n    \n            // Aggiorna il grafico iniziale\n            updateChart();\n    \n            // Aggiorna il grafico quando viene cambiata la settimana selezionata\n            this.$watch(\"currentWeekIndex\", () => {\n            updateChart();\n            });\n        });\n        },\n        formatWeekLabel(value) {\n        const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (value * 7));\n        const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n    \n        const startDay = currentWeekStart.getDate();\n        const startMonth = new Intl.DateTimeFormat('en', { month: 'long' }).format(currentWeekStart);\n        const startYear = currentWeekStart.getFullYear();\n    \n        const endDay = currentWeekEnd.getDate();\n        const endMonth = new Intl.DateTimeFormat('en', { month: 'long' }).format(currentWeekEnd);\n        const endYear = currentWeekEnd.getFullYear();\n    \n        return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`;\n        },\n    },\n    };\n    export default {TrafficPlot};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}