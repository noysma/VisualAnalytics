{"ast":null,"code":"import { getSingleEndpoint } from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingTypeLegend } from \"@/assets/BuildingMap\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      buildings: [],\n      showTypes: {\n        'Residental': true,\n        'Commercial': true,\n        'School': true\n      }\n    };\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    drawBuildings() {\n      const self = this;\n      const svg = d3.select(this.$refs.map);\n      svg.select(\"g.buildings\").selectAll(\"path\") // selezioniamo tutti i path\n      .data(this.buildings.filter(d => this.showTypes[d.properties.buildingType])) // applichiamo il filtro ai dati\n      .join(enter => enter.append(\"path\").call(bm)) // creiamo i path per i nuovi dati\n      .call(bm); // aggiorniamo i path esistenti\n\n      bl.color(bm.color());\n      const legend = svg.select(\"g.legend\").call(bl);\n      legend.selectAll(\".legend-item\").on(\"click\", function (type) {\n        self.toggleType(type);\n        d3.select(this).classed(\"active\", self.showTypes[type]);\n        d3.event.stopPropagation();\n      });\n      svg.on(\"click\", function () {\n        self.toggleType(null);\n        legend.selectAll(\".legend-item\").classed(\"active\", false);\n      });\n    },\n    toggleType(type) {\n      if (type === null) {\n        // Ripristina tutti i filtri\n        this.showTypes = {\n          \"Residental\": true,\n          \"Commercial\": true,\n          \"School\": true\n        };\n      } else {\n        // Attiva/disattiva il filtro per il tipo di edificio selezionato\n        this.showTypes = {\n          ...this.showTypes,\n          // copiamo l'oggetto esistente\n          [type]: !this.showTypes[type] // aggiorniamo il valore del tipo selezionato\n        };\n      }\n\n      // Aggiorna la visualizzazione sulla mappa\n      const svg = d3.select(this.$refs.map);\n      svg.select(\"g.buildings\").selectAll(\"path\").attr(\"stroke-width\", d => this.showTypes[d.properties.buildingType] ? 2 : 0).style(\"fill-opacity\", d => this.showTypes[d.properties.buildingType] ? 1 : 0.2).classed(\"active\", d => this.showTypes[d.properties.buildingType]);\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","bm","bl","name","components","data","buildings","showTypes","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","drawBuildings","methods","self","svg","select","$refs","selectAll","filter","join","enter","append","call","color","legend","on","toggleType","classed","event","stopPropagation","attr","style"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <b-container id=\"app\">\n    <b-row>\n      <b-col>\n        <div id=\"map\">\n            <svg width=\"100%\" height=\"700px\" ref=\"map\">\n                <g class=\"buildings\"></g>\n                <g class=\"legend\"></g>\n            </svg>\n        </div>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n\n<script>\nimport { getSingleEndpoint} from \"@/assets/api_connector\";\nlet Buffer = require('buffer/').Buffer;\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport {BuildingMap, BuildingTypeLegend} from \"@/assets/BuildingMap\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      buildings: [],\n      showTypes: {\n        'Residental': true,\n        'Commercial': true,\n        'School': true,\n      }\n    }\n  },\n  mounted() {\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      this.drawBuildings();\n    });\n  },\n\n  methods: {\n  drawBuildings() {\n    const self = this;\n    const svg = d3.select(this.$refs.map);\n    \n    svg.select(\"g.buildings\")\n      .selectAll(\"path\") // selezioniamo tutti i path\n      .data(this.buildings.filter(d => this.showTypes[d.properties.buildingType])) // applichiamo il filtro ai dati\n      .join(enter => enter.append(\"path\").call(bm)) // creiamo i path per i nuovi dati\n      .call(bm); // aggiorniamo i path esistenti\n\n    bl.color(bm.color());\n\n    const legend = svg.select(\"g.legend\")\n      .call(bl);\n\n    legend.selectAll(\".legend-item\")\n      .on(\"click\", function(type) {\n        self.toggleType(type);\n        d3.select(this).classed(\"active\", self.showTypes[type]);\n        d3.event.stopPropagation();\n      });\n    \n      svg.on(\"click\", function() {\n        self.toggleType(null);\n        legend.selectAll(\".legend-item\").classed(\"active\", false);\n      });\n  },\n\n  toggleType(type) {\n    if (type === null) {\n      // Ripristina tutti i filtri\n      this.showTypes = {\n        \"Residental\": true,\n        \"Commercial\": true,\n        \"School\": true\n      };\n    } else {\n      // Attiva/disattiva il filtro per il tipo di edificio selezionato\n      this.showTypes = {\n        ...this.showTypes, // copiamo l'oggetto esistente\n        [type]: !this.showTypes[type] // aggiorniamo il valore del tipo selezionato\n      };\n    }\n\n    // Aggiorna la visualizzazione sulla mappa\n    const svg = d3.select(this.$refs.map);\n    svg.select(\"g.buildings\")\n      .selectAll(\"path\")\n      .attr(\"stroke-width\", d => this.showTypes[d.properties.buildingType] ? 2 : 0)\n      .style(\"fill-opacity\", d => this.showTypes[d.properties.buildingType] ? 1 : 0.2)\n      .classed(\"active\", d => this.showTypes[d.properties.buildingType]);\n  }\n}\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nsvg g.buildings path {\n  fill-opacity: 0.2;\n  stroke: grey;\n}\n\nsvg g.buildings path:hover,\nsvg g.buildings path.active {\n  fill-opacity: 1;\n  stroke-width: 2;\n}\n\n</style>"],"mappings":"AAiBA,SAAAA,iBAAA;AACA,IAAAC,MAAA,GAAAC,OAAA,YAAAD,MAAA;AACA,MAAAE,GAAA,GAAAD,OAAA;AACA,MAAAE,EAAA,GAAAF,OAAA;AAEA,SAAAG,WAAA,EAAAC,kBAAA;AAEA,MAAAC,EAAA,OAAAF,WAAA;AACA,MAAAG,EAAA,OAAAF,kBAAA;AAEA;EACAG,IAAA;EACAC,UAAA,GACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;QACA;QACA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACAd,iBAAA,kBAAAe,IAAA,CAAAC,QAAA;MACA,KAAAJ,SAAA,GAAAI,QAAA,CAAAL,IAAA,CAAAM,GAAA,CAAAC,CAAA;QACAC,IAAA;QACAC,QAAA,EAAAjB,GAAA,CAAAkB,QAAA,CAAAC,KAAA,CAAArB,MAAA,CAAAsB,IAAA,CAAAL,CAAA,CAAAM,QAAA,UAAAC,SAAA;QACAC,UAAA;UACAC,UAAA,EAAAT,CAAA,CAAAS,UAAA;UACAC,YAAA,EAAAV,CAAA,CAAAU,YAAA;UACAC,YAAA,EAAAX,CAAA,CAAAW,YAAA;UACAC,KAAA,EAAAZ,CAAA,CAAAY;QACA;MACA;MACA,KAAAC,aAAA;IACA;EACA;EAEAC,OAAA;IACAD,cAAA;MACA,MAAAE,IAAA;MACA,MAAAC,GAAA,GAAA9B,EAAA,CAAA+B,MAAA,MAAAC,KAAA,CAAAnB,GAAA;MAEAiB,GAAA,CAAAC,MAAA,gBACAE,SAAA;MAAA,CACA1B,IAAA,MAAAC,SAAA,CAAA0B,MAAA,CAAApB,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA;MAAA,CACAW,IAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,MAAA,SAAAC,IAAA,CAAAnC,EAAA;MAAA,CACAmC,IAAA,CAAAnC,EAAA;;MAEAC,EAAA,CAAAmC,KAAA,CAAApC,EAAA,CAAAoC,KAAA;MAEA,MAAAC,MAAA,GAAAV,GAAA,CAAAC,MAAA,aACAO,IAAA,CAAAlC,EAAA;MAEAoC,MAAA,CAAAP,SAAA,iBACAQ,EAAA,oBAAA1B,IAAA;QACAc,IAAA,CAAAa,UAAA,CAAA3B,IAAA;QACAf,EAAA,CAAA+B,MAAA,OAAAY,OAAA,WAAAd,IAAA,CAAApB,SAAA,CAAAM,IAAA;QACAf,EAAA,CAAA4C,KAAA,CAAAC,eAAA;MACA;MAEAf,GAAA,CAAAW,EAAA;QACAZ,IAAA,CAAAa,UAAA;QACAF,MAAA,CAAAP,SAAA,iBAAAU,OAAA;MACA;IACA;IAEAD,WAAA3B,IAAA;MACA,IAAAA,IAAA;QACA;QACA,KAAAN,SAAA;UACA;UACA;UACA;QACA;MACA;QACA;QACA,KAAAA,SAAA;UACA,QAAAA,SAAA;UAAA;UACA,CAAAM,IAAA,SAAAN,SAAA,CAAAM,IAAA;QACA;MACA;;MAEA;MACA,MAAAe,GAAA,GAAA9B,EAAA,CAAA+B,MAAA,MAAAC,KAAA,CAAAnB,GAAA;MACAiB,GAAA,CAAAC,MAAA,gBACAE,SAAA,SACAa,IAAA,iBAAAhC,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA,WACAuB,KAAA,iBAAAjC,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA,aACAmB,OAAA,WAAA7B,CAAA,SAAAL,SAAA,CAAAK,CAAA,CAAAQ,UAAA,CAAAE,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}