{"ast":null,"code":"import * as d3 from 'd3';\nexport function createScatterplot(data) {\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  };\n  const width = 700 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n  const container = d3.select(\"#turnover\").style('position', 'relative').style('width', width + margin.left + margin.right + 'px').style('height', height + margin.top + margin.bottom + 'px');\n  const x = d3.scaleLinear().domain([0, d3.max(data, d => +d.hourlyRate) + 10]).range([0, width]);\n  const y = d3.scaleLinear().domain([0, d3.max(data, d => +d.counts) + 5]).range([height, 0]);\n  const circles = container.selectAll('.circle').data(data).enter().append('div').attr('class', 'circle').style('position', 'absolute').style('width', '10px').style('height', '10px').style('border-radius', '50%').style('background-color', 'gray').style('left', d => x(+d.hourlyRate) + 'px').style('top', d => y(+d.counts) + 'px');\n  circles.on('mouseover', function (event, d) {\n    d3.select(this).style('background-color', 'red');\n    const tooltip = container.append('div').attr('class', 'tooltip').style('position', 'absolute').style('left', event.pageX + 10 + 'px').style('top', event.pageY + 10 + 'px').style('background-color', 'white').style('padding', '5px').style('border', '1px solid black').html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n  });\n  circles.on('mouseout', function () {\n    d3.select(this).style('background-color', 'gray');\n    container.selectAll('.tooltip').remove();\n  });\n}\n\n// import * as d3 from 'd3';\n\n// export function createScatterplot(svgElement, tooltipElement, data) {\n//   // set the dimensions and margins of the graph\n//   const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n//   const width = 700 - margin.left - margin.right;\n//   const height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the component element\n//   const svg = d3.select(svgElement)\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n//   // Creazione della scala X\n//   const x = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n//     .range([0, width]);\n\n//   // Creazione della scala Y\n//   const y = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.counts) + 5])\n//     .range([height, 0]);\n\n//   // Creazione dell'asse X\n//   const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n//   svg.append('g')\n//     .attr('transform', `translate(0, ${height})`)\n//     .call(xAxis);\n\n//   // Creazione dell'asse Y\n//   const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n//   svg.append('g')\n//     .call(yAxis);\n\n//   // Aggiunta dei punti\n//   const circles = svg.selectAll('circle')\n//     .data(data)\n//     .enter()\n//     .append('circle')\n//     .attr('cx', d => x(+d.hourlyRate))\n//     .attr('cy', d => y(+d.counts))\n//     .attr('r', 5)\n//     .style('fill', 'gray')\n//     .style('stroke', 'darkgray');\n\n//   // Mostra il tooltip con le informazioni del punto\n//   const tooltip = d3.select(tooltipElement)\n//   .style('position', 'absolute')\n//   .style('background-color', 'rgba(0, 0, 0, 0.8)')\n//   .style('color', 'white')\n//   .style('border', '1px solid white')\n//   .style('border-radius', '4px')\n//   .style('padding', '6px')\n//   .style('opacity', 0)\n//   .style('pointer-events', 'none')\n\n//   circles.on('mouseover', function (event, d) {\n//       // Evidenzia il pallino\n//       d3.select(this).style('fill', 'red');\n\n//       // Mostra il tooltip con le informazioni del punto\n//       const xPosition = x(+d.hourlyRate) + margin.left + margin.right ;\n//       const yPosition = y(+d.counts) + height -20;\n\n//         tooltip.transition()\n//         .duration(500)\n//         .style(\"opacity\", 0.9)\n//         .style(\"left\", xPosition + \"px\")\n//         .style(\"top\", yPosition + \"px\");\n\n//       tooltip.html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n\n//       // Aggiungi le linee tratteggiate\n//       svg.append('line')\n//         .attr('x1', x(+d.hourlyRate))\n//         .attr('y1', height)\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'black')\n//         .style('stroke-dasharray', '2,2');\n\n//       svg.append('line')\n//         .attr('x1', 0)\n//         .attr('y1', y(+d.counts))\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'gray')\n//         .style('stroke-dasharray', '2,2');\n//     })\n//     circles.on('mouseout', function () {\n//       // Ripristina il colore grigio per il pallino\n//       d3.select(this).style('fill', 'gray');\n\n//       // Nascondi il tooltip\n//       tooltip.transition()\n//         .duration(500)\n//         .style('opacity', 0);\n\n//       // Rimuovi le linee tratteggiate\n//       svg.selectAll('line').remove();\n//     });\n// }","map":{"version":3,"names":["d3","createScatterplot","data","margin","top","right","bottom","left","width","height","container","select","style","x","scaleLinear","domain","max","d","hourlyRate","range","y","counts","circles","selectAll","enter","append","attr","on","event","tooltip","pageX","pageY","html","jobId","remove"],"sources":["/Users/camillachiruzzi/vastprof/VAST2022Vue/src/assets/Turnover.js"],"sourcesContent":["import * as d3 from 'd3';\n\nexport function createScatterplot(data) {\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n  const width = 700 - margin.left - margin.right;\n  const height = 500 - margin.top - margin.bottom;\n\n  const container = d3.select(\"#turnover\")\n    .style('position', 'relative')\n    .style('width', width + margin.left + margin.right + 'px')\n    .style('height', height + margin.top + margin.bottom + 'px');\n\n  const x = d3.scaleLinear()\n    .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n    .range([0, width]);\n\n  const y = d3.scaleLinear()\n    .domain([0, d3.max(data, d => +d.counts) + 5])\n    .range([height, 0]);\n\n  const circles = container.selectAll('.circle')\n    .data(data)\n    .enter()\n    .append('div')\n    .attr('class', 'circle')\n    .style('position', 'absolute')\n    .style('width', '10px')\n    .style('height', '10px')\n    .style('border-radius', '50%')\n    .style('background-color', 'gray')\n    .style('left', d => x(+d.hourlyRate) + 'px')\n    .style('top', d => y(+d.counts) + 'px');\n\n  circles.on('mouseover', function (event, d) {\n    d3.select(this).style('background-color', 'red');\n\n    const tooltip = container.append('div')\n      .attr('class', 'tooltip')\n      .style('position', 'absolute')\n      .style('left', (event.pageX + 10) + 'px')\n      .style('top', (event.pageY + 10) + 'px')\n      .style('background-color', 'white')\n      .style('padding', '5px')\n      .style('border', '1px solid black')\n      .html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n  });\n\n  circles.on('mouseout', function () {\n    d3.select(this).style('background-color', 'gray');\n    container.selectAll('.tooltip').remove();\n  });\n}\n\n\n\n\n\n\n// import * as d3 from 'd3';\n\n// export function createScatterplot(svgElement, tooltipElement, data) {\n//   // set the dimensions and margins of the graph\n//   const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n//   const width = 700 - margin.left - margin.right;\n//   const height = 500 - margin.top - margin.bottom;\n\n//   // append the svg object to the component element\n//   const svg = d3.select(svgElement)\n//     .attr('width', width + margin.left + margin.right)\n//     .attr('height', height + margin.top + margin.bottom)\n//     .append('g')\n//     .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n//   // Creazione della scala X\n//   const x = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.hourlyRate) + 10])\n//     .range([0, width]);\n\n//   // Creazione della scala Y\n//   const y = d3.scaleLinear()\n//     .domain([0, d3.max(data, d => +d.counts) + 5])\n//     .range([height, 0]);\n\n//   // Creazione dell'asse X\n//   const xAxis = d3.axisBottom(x).tickValues(d3.range(0, d3.max(data, d => +d.hourlyRate) + 11, 10));\n//   svg.append('g')\n//     .attr('transform', `translate(0, ${height})`)\n//     .call(xAxis);\n\n//   // Creazione dell'asse Y\n//   const yAxis = d3.axisLeft(y).tickValues(d3.range(0, d3.max(data, d => +d.counts) + 6, 5));\n//   svg.append('g')\n//     .call(yAxis);\n\n//   // Aggiunta dei punti\n//   const circles = svg.selectAll('circle')\n//     .data(data)\n//     .enter()\n//     .append('circle')\n//     .attr('cx', d => x(+d.hourlyRate))\n//     .attr('cy', d => y(+d.counts))\n//     .attr('r', 5)\n//     .style('fill', 'gray')\n//     .style('stroke', 'darkgray');\n\n//   // Mostra il tooltip con le informazioni del punto\n//   const tooltip = d3.select(tooltipElement)\n//   .style('position', 'absolute')\n//   .style('background-color', 'rgba(0, 0, 0, 0.8)')\n//   .style('color', 'white')\n//   .style('border', '1px solid white')\n//   .style('border-radius', '4px')\n//   .style('padding', '6px')\n//   .style('opacity', 0)\n//   .style('pointer-events', 'none')\n\n\n//   circles.on('mouseover', function (event, d) {\n//       // Evidenzia il pallino\n//       d3.select(this).style('fill', 'red');\n\n//       // Mostra il tooltip con le informazioni del punto\n//       const xPosition = x(+d.hourlyRate) + margin.left + margin.right ;\n//       const yPosition = y(+d.counts) + height -20;\n\n\n\n//         tooltip.transition()\n//         .duration(500)\n//         .style(\"opacity\", 0.9)\n//         .style(\"left\", xPosition + \"px\")\n//         .style(\"top\", yPosition + \"px\");\n\n//       tooltip.html(`Job ID: ${d.jobId}<br>Turnover: ${d.counts}<br>Hourly wage: ${d.hourlyRate}`);\n\n//       // Aggiungi le linee tratteggiate\n//       svg.append('line')\n//         .attr('x1', x(+d.hourlyRate))\n//         .attr('y1', height)\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'black')\n//         .style('stroke-dasharray', '2,2');\n\n//       svg.append('line')\n//         .attr('x1', 0)\n//         .attr('y1', y(+d.counts))\n//         .attr('x2', x(+d.hourlyRate))\n//         .attr('y2', y(+d.counts))\n//         .style('stroke', 'gray')\n//         .style('stroke-dasharray', '2,2');\n//     })\n//     circles.on('mouseout', function () {\n//       // Ripristina il colore grigio per il pallino\n//       d3.select(this).style('fill', 'gray');\n    \n//       // Nascondi il tooltip\n//       tooltip.transition()\n//         .duration(500)\n//         .style('opacity', 0);\n    \n//       // Rimuovi le linee tratteggiate\n//       svg.selectAll('line').remove();\n//     });\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}