{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\nimport { BuildingMap, BuildingTypeLegend, BuildingApt, BuildingPub, BuildingRestaurant } from \"@/assets/Map\";\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nimport { DensityMap } from \"@/assets/DensityMap\";\nconst dm = new DensityMap();\nimport { routineComparison } from \"@/assets/RoutineComparison\";\nimport { createBarChart } from \"@/assets/TrafficPlot\";\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: {\n          active: false,\n          maxHeight: null\n        },\n        2: {\n          active: false,\n          maxHeight: null\n        },\n        3: {\n          active: false,\n          maxHeight: null\n        },\n        4: {\n          active: false,\n          maxHeight: null\n        }\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      partID: 1,\n      participantStatus: []\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then(response => {\n        this.apartments = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy\n          }\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n      this.drawDensity();\n    });\n    this.fetchTravelJournalData();\n    d3.csv(\"@/Data/Travel.csv\").then(function (data) {\n      createBarChart(data);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select(\"g.buildings\").datum(this.buildings).call(bm);\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map).select(\"g.apartments\").datum(this.apartments).call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select(\"g.pubs\").datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select(\"g.restaurants\").datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawDensity() {\n      d3.select(\"#density-map\").append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"700px\").append(\"g\").classed(\"density\", true).datum(this.buildings).call(dm);\n    },\n    fetchTravelJournalData() {\n      if (this.partID !== null) {\n        const params = {\n          participantId: Number(this.partID)\n        };\n        getSingleEndpoint({\n          participantId: params.participantId\n        }, 'ParticipantStatusLogs').then(response => {\n          const updatedData = response.data.map(d => ({\n            timestamp: new Date(d.timestamp),\n            currentMode: d.currentMode\n          }));\n\n          // Update the data and redraw the heatmap\n          this.participantStatus = updatedData; // Rename from 'partecipanStatus' to 'participantStatus'\n          routineComparison(this.participantStatus, 'heatmap-container', 450, 500);\n        });\n      } else {\n        console.error(\"Please enter a participant ID.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","Buffer","require","wkx","d3","BuildingMap","BuildingTypeLegend","BuildingApt","BuildingPub","BuildingRestaurant","bm","bl","apt","pub","rest","DensityMap","dm","routineComparison","createBarChart","name","components","data","panels","active","maxHeight","buildings","apartments","pubs","restaurants","pubsActive","restaurantsActive","partID","participantStatus","mounted","then","response","map","d","type","geometry","Geometry","parse","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","numberOfRooms","apartmentId","rentalCost","drawApt","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","drawDensity","fetchTravelJournalData","csv","methods","toggleAccordion","section","select","$refs","datum","call","colorScale","color","domain","concat","scaleOrdinal","schemeCategory10","extent","togglePubs","toggleRestaurants","append","attr","classed","params","participantId","Number","updatedData","timestamp","Date","currentMode","console","error"],"sources":["src/components/Challenge2.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div id=\"vc2\" class=\"vc2-container\">\n    <h1 class=\"vc2Title\">Challenge 2: Patterns of Life</h1>\n    <p>\n      Considers the patterns of daily life throughout the city.\n      You will describe the daily routines for some representative people, characterize the travel patterns to identify potential bottlenecks or hazards, and examine how these patterns change over time and seasons.\n    </p>\n  \n    <!-- QUESTION 1 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(1)\">\n      Assuming the volunteers are representative of the cityâ€™s population, characterize the distinct areas of the city that you identify.\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"legend\"></g>\n        <g class=\"apartments\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n      </svg>\n    </div>\n\n    <!-- QUESTION 2 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(2)\">\n      Where are the busiest areas in Engagement?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <div id=\"density-map\"></div>\n    </div>\n\n    <!-- QUESTION 3 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(3)\">\n      Participants have given permission to have their daily routines captured. Choose two different participants with different routines and describe their daily patterns.\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <div>\n        <label for=\"participantId\">Participant ID:</label>\n        <input type=\"number\" id=\"partID\" v-model=\"partID\" />\n        <button @click=\"fetchTravelJournalData\">Fetch Data</button>\n      </div>\n      <svg id=\"heatmap-container\" ref=\"heatmapContainer\" width=\"450\" height=\"500\"></svg>\n    </div>\n\n    <!-- QUESTION 4 -->\n    <button class=\"accordion2\" @click=\"toggleAccordion(4)\">Over the span of the dataset, how do patterns change?</button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[4].maxHeight }\">\n      <svg id=\"chart\"></svg>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nlet Buffer = require(\"buffer/\").Buffer;\nconst wkx = require(\"wkx\");\nconst d3 = require(\"d3\");\n\nimport {\n  BuildingMap,\n  BuildingTypeLegend,\n  BuildingApt,\n  BuildingPub,\n  BuildingRestaurant,\n} from \"@/assets/Map\";\n\nconst bm = new BuildingMap();\nconst bl = new BuildingTypeLegend();\nconst apt = new BuildingApt();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nimport {\n  DensityMap,\n} from \"@/assets/DensityMap\";\n\nconst dm = new DensityMap();\n\nimport {\n  routineComparison,\n} from \"@/assets/RoutineComparison\";\n\nimport { \n  createBarChart,\n} from \"@/assets/TrafficPlot\";\n\n\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      apartments: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      partID: 1,\n      participantStatus: [],\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, \"Buildings\").then((response) => {\n      this.buildings = response.data.map((d) => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n      // DRAW APARTMENTS\n      getSingleEndpoint({}, \"Apartments\").then((response) => {\n        this.apartments = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            numberOfRooms: d.numberOfRooms,\n            apartmentId: d.apartmentId,\n            buildingId: d.buildingId,\n            rentalCost: d.rentalCost,\n            maxOccupancy: d.maxOccupancy,\n          },\n        }));\n        this.drawApt();\n      });\n      // DRAW PUBS\n      getSingleEndpoint({}, \"Pubs\").then((response) => {\n        this.pubs = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, \"Restaurants\").then((response) => {\n        this.restaurants = response.data.map((d) => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, \"hex\")).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n      this.drawDensity();\n    });\n    this.fetchTravelJournalData();\n    d3.csv(\"@/Data/Travel.csv\").then(function(data) {\n      createBarChart(data);\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select(\"g.buildings\")\n        .datum(this.buildings)\n        .call(bm);\n\n      const colorScale = bm.color().domain().concat(\"apartments\");\n      bl.color(d3.scaleOrdinal(d3.schemeCategory10).domain(colorScale));\n\n      d3.select(this.$refs.map).select(\"g.legend\").call(bl);\n    },\n    drawApt() {\n      d3.select(this.$refs.map)\n        .select(\"g.apartments\")\n        .datum(this.apartments)\n        .call(apt, bm.extent());\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select(\"g.pubs\")\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select(\"g.restaurants\")\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n    drawDensity() {\n      d3.select(\"#density-map\")\n        .append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"700px\")\n        .append(\"g\")\n        .classed(\"density\", true)\n        .datum(this.buildings)\n        .call(dm);\n    },\n    fetchTravelJournalData() {\n      if (this.partID !== null) {\n        const params = {\n          participantId: Number(this.partID),\n        };\n        getSingleEndpoint({ participantId: params.participantId,  }, 'ParticipantStatusLogs').then((response) => {\n          const updatedData = response.data.map(d => ({\n            timestamp: new Date(d.timestamp),\n            currentMode: d.currentMode,\n          }));\n\n          // Update the data and redraw the heatmap\n          this.participantStatus = updatedData; // Rename from 'partecipanStatus' to 'participantStatus'\n          routineComparison(this.participantStatus, 'heatmap-container', 450, 500);\n        });\n      } else {\n        console.error(\"Please enter a participant ID.\");\n      }\n    },\n  },\n};\n</script>\n\n\n<style>\n#vc2 {\n  position: relative;\n}\n\n.vc2Title{\n  color: #8ECAE6;\n}\n\n/* CARDS STYLE */\n.accordion2 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px; \n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px; \n  border-radius: 20px;\n}\n\n.active, .accordion2:hover {\n  background-color: #8ECAE6;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.button-container {\n  position: absolute;\n  top: 10px;\n  right: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  color: white;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba; \n}\n\n.button-container .restButton {\n  background-color: #cc3333;\n}\n\n#density-map {\n  height: 700px;\n}\n\n#heatmap-container {\n  margin-top: 20px;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}