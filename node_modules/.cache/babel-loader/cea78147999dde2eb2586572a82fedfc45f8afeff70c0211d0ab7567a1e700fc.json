{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\nimport { BuildingMap, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\nconst bm = new BuildingMap();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: {\n          active: false,\n          maxHeight: null\n        },\n        2: {\n          active: false,\n          maxHeight: null\n        },\n        3: {\n          active: false,\n          maxHeight: null\n        },\n        4: {\n          active: false,\n          maxHeight: null\n        }\n      },\n      buildings: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: []\n    };\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then(response => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units\n        }\n      }));\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then(response => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then(response => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId\n          }\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n    drawBuildings() {\n      d3.select(this.$refs.map).select('g.buildings').datum(this.buildings).call(bm);\n    },\n    drawPub() {\n      d3.select(this.$refs.map).select('g.pubs').datum(this.pubs).call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map).select('g.restaurants').datum(this.restaurants).call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","wkx","require","d3","BuildingMap","BuildingPub","BuildingRestaurant","bm","pub","rest","name","components","data","panels","active","maxHeight","buildings","pubs","restaurants","pubsActive","restaurantsActive","FinancialJournal","mounted","then","response","map","d","type","geometry","Geometry","parse","Buffer","from","location","toGeoJSON","properties","buildingId","buildingType","maxOccupancy","units","pubId","hourlyCost","drawPub","restaurantId","foodCost","drawRestaurants","drawBuildings","methods","toggleAccordion","section","select","$refs","datum","call","extent","togglePubs","toggleRestaurants"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div id=\"vc3\" class=\"vc3-container\">\n    <h1 class=\"vc3Title\">Challenge 3: Economics</h1>\n    <p>\n      Considers the financial health of the city. Over time, are businesses growing or shrinking? How are people changing jobs? Are standards of living improving or declining over time?\n    </p>\n\n    <!-- QUESTION 1 -->\n    <button class=\"accordion3\" @click=\"toggleAccordion(1)\">\n      Over the period covered by the dataset, which businesses appear to be more prosperous? Which appear to be struggling?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[1].maxHeight }\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-8\">\n          <div class=\"button-container\">\n            <button :class=\"{ active: pubsActive }\" @click=\"togglePubs\" class=\"pubsButton\">Pubs</button>\n            <button :class=\"{ active: restaurantsActive }\" @click=\"toggleRestaurants\" class=\"restButton\">Restaurants</button>\n          </div>\n        </div>\n      </div>\n      <svg width=\"100%\" height=\"700px\" ref=\"map\">\n        <g class=\"buildings\"></g>\n        <g class=\"pubs\" :opacity=\"pubsActive ? 1 : 0\"></g>\n        <g class=\"restaurants\" :opacity=\"restaurantsActive ? 1 : 0\"></g>\n        <g class=\"pubs hidden\"></g>\n        <g class=\"restaurants hidden\"></g>\n      </svg>\n    </div>\n\n    <!-- QUESTION 2 -->\n    <button class=\"accordion3\" @click=\"toggleAccordion(2)\">\n      How does the financial health of the residents change over the period covered by the dataset? How do wages compare to the overall cost of living in Engagement? Are there groups that appear to exhibit similar patterns?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[2].maxHeight }\">\n      <p>Line Chart con:\n        <br>\n        -asse x: time stamp\n        <br>\n        -asse y: available balance\n        <br>\n        il colore delle linee sul grafico Ã¨ dato dall'educational level\n      </p>\n    </div>\n\n    <!-- QUESTION 3 -->\n    <button class=\"accordion3\" @click=\"toggleAccordion(3)\">\n      Describe the health of the various employers within the city limits. What employment patterns do you observe? Do you notice any areas of particularly high or low turnover?\n    </button>\n    <div class=\"panel\" :style=\"{ maxHeight: panels[3].maxHeight }\">\n      <p>contenuto</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nconst wkx = require('wkx');\nconst d3 = require('d3');\n\nimport { BuildingMap, BuildingPub, BuildingRestaurant } from \"@/assets/BusinessStatus\";\n\nconst bm = new BuildingMap();\nconst pub = new BuildingPub();\nconst rest = new BuildingRestaurant();\n\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      panels: {\n        1: { active: false, maxHeight: null },\n        2: { active: false, maxHeight: null },\n        3: { active: false, maxHeight: null },\n        4: { active: false, maxHeight: null },\n      },\n      buildings: [],\n      pubs: [],\n      restaurants: [],\n      pubsActive: false,\n      restaurantsActive: false,\n      FinancialJournal: [],\n    }\n  },\n  mounted() {\n    // DRAW THE MAP\n    getSingleEndpoint({}, 'Buildings').then((response) => {\n      this.buildings = response.data.map(d => ({\n        type: \"Feature\",\n        geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n        properties: {\n          buildingId: d.buildingId,\n          buildingType: d.buildingType,\n          maxOccupancy: d.maxOccupancy,\n          units: d.units,\n        },\n      }));\n\n      // DRAW PUBS\n      getSingleEndpoint({}, 'Pubs').then((response) => {\n        this.pubs = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            pubId: d.pubId,\n            hourlyCost: d.hourlyCost,\n            maxOccupancy: d.maxOccupancy,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawPub();\n      });\n\n      // DRAW RESTAURANTS\n      getSingleEndpoint({}, 'Restaurants').then((response) => {\n        this.restaurants = response.data.map(d => ({\n          type: \"Feature\",\n          geometry: wkx.Geometry.parse(Buffer.from(d.location, 'hex')).toGeoJSON(),\n          properties: {\n            restaurantId: d.restaurantId,\n            maxOccupancy: d.maxOccupancy,\n            foodCost: d.foodCost,\n            buildingId: d.buildingId,\n          },\n        }));\n        this.drawRestaurants();\n      });\n      this.drawBuildings();\n    });\n  },\n  methods: {\n    toggleAccordion(section) {\n      this.panels[section].active = !this.panels[section].active;\n      if (this.panels[section].active) {\n        this.panels[section].maxHeight = \"none\";\n      } else {\n        this.panels[section].maxHeight = null;\n      }\n    },\n\n    drawBuildings() {\n      d3.select(this.$refs.map)\n        .select('g.buildings')\n        .datum(this.buildings)\n        .call(bm);\n    },\n    drawPub() {\n      d3.select(this.$refs.map)\n        .select('g.pubs')\n        .datum(this.pubs)\n        .call(pub, bm.extent());\n    },\n    drawRestaurants() {\n      d3.select(this.$refs.map)\n        .select('g.restaurants')\n        .datum(this.restaurants)\n        .call(rest, bm.extent());\n    },\n    togglePubs() {\n      this.pubsActive = !this.pubsActive;\n    },\n    toggleRestaurants() {\n      this.restaurantsActive = !this.restaurantsActive;\n    },\n  }\n}\n</script>\n\n<style>\n#vc3 {\n  position: relative;\n}\n\n.vc3Title {\n  color: #FB8500;\n}\n\n.accordion3 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  text-align: justify;\n  transition: 0.4s;\n  margin-bottom: 20px;\n  border-radius: 20px;\n}\n\n.active,\n.accordion3:hover {\n  background-color: #FB8500;\n  color: white;\n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n/* BUSINESS HEALTH STYLE */\n#map {\n  margin-top: 50px;\n  position: relative;\n}\n\nsvg g.buildings {\n  fill-opacity: 0.3;\n  stroke: grey;\n}\n\n.tooltip {\n  position: absolute;\n  padding: 6px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-weight: bold;\n}\n\n.button-container {\n  position: absolute;\n  top: 5000px;\n  left: 30px;\n}\n\n.button-container button {\n  margin-left: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 20px;\n  padding: 10px 20px;\n  transition: background-color 0.3s ease;\n  opacity: 0.3;\n}\n\n.button-container .pubsButton {\n  background-color: #0051ba;\n}\n\n.button-container .restButton {\n  background-color: #ff06fa;\n}\n\n.button-container .active {\n  opacity: 1;\n}\n\n.button-container .hidden {\n  display: none;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}