{"ast":null,"code":"import { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      currentWeekIndex: 0,\n      travelJournal: [],\n      weekStart: new Date() // Aggiungi questa riga per definire la data di inizio della settimana\n    };\n  },\n\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({\n        participantId: 1010\n      }, 'TravelJournal').then(response => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          }\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map(d => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return {\n            startDate,\n            endDate,\n            travelTime\n          };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = {\n          top: 20,\n          right: 20,\n          bottom: 30,\n          left: 40\n        };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n        const svg = d3.select(this.$refs.chartContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n        const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n        const updateChart = () => {\n          const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + this.currentWeekIndex * 7);\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter(d => {\n            return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n          });\n\n          // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map(day => {\n            const dayTravelTimes = currentWeekData.filter(d => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, d => d.travelTime);\n            return {\n              day,\n              totalTravelTime\n            };\n          });\n\n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n          const yTicks = d3.range(0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30, 30); // Genera intervalli di 30 minuti per l'asse y\n          const y = d3.scaleLinear().domain([0, d3.max(totalTravelTimes, d => d.totalTravelTime) + 30]).range([height, 0]);\n\n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3.axisLeft(y).tickValues(yTicks).tickFormat(d => {\n            const hours = Math.floor(d / 60); // Calcola le ore\n            const minutes = d % 60; // Calcola i minuti\n            return `${hours}:${minutes.toString().padStart(2, '0')}`; // Formatta l'etichetta come \"hh:mm\"\n          });\n\n          // Aggiorna gli assi x e y\n          chart.select(\".x-axis\").call(xAxis);\n          chart.select(\".y-axis\").call(yAxis);\n\n          // Crea le barre del grafico\n          const bars = chart.selectAll(\".bar\").data(totalTravelTimes);\n          bars.enter().append(\"rect\").attr(\"class\", \"bar\").merge(bars).transition().duration(500).attr(\"x\", d => x(d.day)).attr(\"y\", d => y(d.totalTravelTime)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.totalTravelTime));\n          bars.exit().remove();\n        };\n\n        // Aggiungi lo slider\n        const slider = d3.sliderHorizontal().min(0).max(Math.floor(data.length / 7) - 1).step(1).width(width).displayValue(false).on(\"onchange\", val => {\n          this.currentWeekIndex = val;\n          updateChart();\n        });\n        d3.select(this.$refs.sliderContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", 50).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`).call(slider);\n        updateChart();\n      });\n    }\n  }\n};","map":{"version":3,"names":["getSingleEndpoint","d3","data","currentWeekIndex","travelJournal","weekStart","Date","mounted","createChart","methods","participantId","then","response","map","d","type","properties","travelStartTime","travelStartLocationId","travelEndLocationId","checkInTime","checkOutTime","endingBalance","travelEndTime","purpose","startingBalance","id","parsedData","startDate","endDate","travelTime","margin","top","right","bottom","left","width","height","svg","select","$refs","chartContainer","append","attr","chart","updateChart","currentWeekStart","getFullYear","getMonth","getDate","currentWeekEnd","currentWeekData","filter","weekdays","totalTravelTimes","day","dayTravelTimes","getDay","indexOf","totalTravelTime","sum","x","scaleBand","domain","range","padding","yTicks","max","y","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","tickValues","tickFormat","hours","Math","floor","minutes","toString","padStart","call","bars","selectAll","enter","merge","transition","duration","bandwidth","exit","remove","slider","sliderHorizontal","min","length","step","displayValue","on","val","sliderContainer"],"sources":["src/components/Challenge3.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <vue-slider v-model=\"currentWeekIndex\" :min=\"0\" :max=\"totalWeeks - 1\" />\n      <div ref=\"chartContainer\"></div>\n      <p>Total Weeks: {{ totalWeeks }}</p>\n      <p>Current Week: {{ getWeekDateRange(currentWeekIndex) }}</p>\n    </div>\n  </template>\n  \n  <script>\nimport { getSingleEndpoint } from \"../assets/apiConnector\";\nimport * as d3 from \"d3\";\n\nexport default {\n  data() {\n    return {\n      currentWeekIndex: 0,\n      travelJournal: [],\n      weekStart: new Date(), // Aggiungi questa riga per definire la data di inizio della settimana\n    };\n  },\n  mounted() {\n    this.createChart();\n  },\n  methods: {\n    createChart() {\n      getSingleEndpoint({ participantId: 1010 }, 'TravelJournal').then((response) => {\n        this.travelJournal = response.data.map(d => ({\n          type: \"Feature\",\n          properties: {\n            travelStartTime: d.travelStartTime,\n            travelStartLocationId: d.travelStartLocationId,\n            travelEndLocationId: d.travelEndLocationId,\n            checkInTime: d.checkInTime,\n            checkOutTime: d.checkOutTime,\n            endingBalance: d.endingBalance,\n            travelEndTime: d.travelEndTime,\n            participantId: d.participantId,\n            purpose: d.purpose,\n            startingBalance: d.startingBalance,\n            id: d.id\n          },\n        }));\n        const data = response.data;\n\n        // Parsing delle date e calcolo della durata dei viaggi in minuti\n        const parsedData = data.map((d) => {\n          const startDate = new Date(d.travelStartTime);\n          const endDate = new Date(d.travelEndTime);\n          const travelTime = (endDate - startDate) / (1000 * 60); // Conversione da millisecondi a minuti\n          return { startDate, endDate, travelTime };\n        });\n\n        // Crea il grafico utilizzando D3\n        const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n\n        const svg = d3\n          .select(this.$refs.chartContainer)\n          .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom);\n\n        const chart = svg\n          .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        const updateChart = () => {\n          const currentWeekStart = new Date(this.weekStart.getFullYear(), this.weekStart.getMonth(), this.weekStart.getDate() + (this.currentWeekIndex * 7));\n          const currentWeekEnd = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate() + 6);\n          const currentWeekData = parsedData.filter((d) => {\n            return d.startDate >= currentWeekStart && d.startDate <= currentWeekEnd;\n          });\n\n          // Calcola il totale della differenza tra startDate e endDate per ogni giorno della settimana\n          const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n          const totalTravelTimes = weekdays.map((day) => {\n            const dayTravelTimes = currentWeekData.filter((d) => d.startDate.getDay() === weekdays.indexOf(day));\n            const totalTravelTime = d3.sum(dayTravelTimes, (d) => d.travelTime);\n            return { day, totalTravelTime };\n          });\n\n          // Scala per gli assi x e y\n          const x = d3.scaleBand().domain(weekdays).range([0, width]).padding(0.1);\n\n          const yTicks = d3.range(0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30, 30); // Genera intervalli di 30 minuti per l'asse y\n          const y = d3\n            .scaleLinear()\n            .domain([0, d3.max(totalTravelTimes, (d) => d.totalTravelTime) + 30])\n            .range([height, 0]);\n\n          // Creazione degli assi x e y\n          const xAxis = d3.axisBottom(x);\n          const yAxis = d3\n            .axisLeft(y)\n            .tickValues(yTicks)\n            .tickFormat((d) => {\n              const hours = Math.floor(d / 60); // Calcola le ore\n              const minutes = d % 60; // Calcola i minuti\n              return `${hours}:${minutes.toString().padStart(2, '0')}`; // Formatta l'etichetta come \"hh:mm\"\n            });\n\n          // Aggiorna gli assi x e y\n          chart.select(\".x-axis\").call(xAxis);\n          chart.select(\".y-axis\").call(yAxis);\n\n          // Crea le barre del grafico\n          const bars = chart.selectAll(\".bar\").data(totalTravelTimes);\n\n          bars\n            .enter()\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .merge(bars)\n            .transition()\n            .duration(500)\n            .attr(\"x\", (d) => x(d.day))\n            .attr(\"y\", (d) => y(d.totalTravelTime))\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => height - y(d.totalTravelTime));\n\n          bars.exit().remove();\n        };\n\n        // Aggiungi lo slider\n        const slider = d3\n          .sliderHorizontal()\n          .min(0)\n          .max(Math.floor(data.length / 7) - 1)\n          .step(1)\n          .width(width)\n          .displayValue(false)\n          .on(\"onchange\", (val) => {\n            this.currentWeekIndex = val;\n            updateChart();\n          });\n\n        d3.select(this.$refs.sliderContainer).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", 50).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`).call(slider);\n\n        updateChart();\n      });\n    },\n  },\n};\n</script>\n\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}